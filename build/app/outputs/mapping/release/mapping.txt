android.arch.lifecycle.AndroidViewModel -> android.arch.lifecycle.AndroidViewModel:
android.arch.lifecycle.CompositeGeneratedAdaptersObserver -> android.arch.lifecycle.a:
android.arch.lifecycle.DefaultLifecycleObserver -> android.arch.lifecycle.b:
android.arch.lifecycle.FullLifecycleObserver -> android.arch.lifecycle.c:
android.arch.lifecycle.FullLifecycleObserverAdapter -> android.arch.lifecycle.d:
android.arch.lifecycle.GenericLifecycleObserver -> android.arch.lifecycle.e:
android.arch.lifecycle.Lifecycle -> android.arch.lifecycle.f:
android.arch.lifecycle.LifecycleOwner -> android.arch.lifecycle.g:
android.arch.lifecycle.LiveData -> android.arch.lifecycle.h:
    java.lang.Object NOT_SET -> a
    void <clinit>() -> <clinit>
android.arch.lifecycle.LiveData$LifecycleBoundObserver -> android.arch.lifecycle.h$a:
android.arch.lifecycle.LiveData$ObserverWrapper -> android.arch.lifecycle.h$b:
android.arch.lifecycle.ReflectiveGenericLifecycleObserver -> android.arch.lifecycle.i:
android.arch.lifecycle.SingleGeneratedAdapterObserver -> android.arch.lifecycle.j:
android.arch.lifecycle.ViewModel -> android.arch.lifecycle.k:
    void <init>() -> <init>
android.arch.lifecycle.ViewModelProvider -> android.arch.lifecycle.l:
android.arch.lifecycle.ViewModelProvider$Factory -> android.arch.lifecycle.l$a:
android.support.annotation.Keep -> android.support.annotation.Keep:
android.support.v4.app.CoreComponentFactory -> android.support.v4.app.CoreComponentFactory:
    void <init>() -> <init>
    android.app.Activity instantiateActivity(java.lang.ClassLoader,java.lang.String,android.content.Intent) -> instantiateActivity
    android.app.Application instantiateApplication(java.lang.ClassLoader,java.lang.String) -> instantiateApplication
    android.content.BroadcastReceiver instantiateReceiver(java.lang.ClassLoader,java.lang.String,android.content.Intent) -> instantiateReceiver
    android.content.ContentProvider instantiateProvider(java.lang.ClassLoader,java.lang.String) -> instantiateProvider
    android.app.Service instantiateService(java.lang.ClassLoader,java.lang.String,android.content.Intent) -> instantiateService
    java.lang.Object checkCompatWrapper(java.lang.Object) -> a
android.support.v4.app.CoreComponentFactory$CompatWrapped -> android.support.v4.app.CoreComponentFactory$a:
    java.lang.Object getWrapper() -> a
android.support.v4.app.LoaderManager -> android.support.v4.app.a:
android.support.v4.app.LoaderManagerImpl -> android.support.v4.app.LoaderManagerImpl:
    boolean DEBUG -> a
    android.arch.lifecycle.LifecycleOwner mLifecycleOwner -> b
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
android.support.v4.app.LoaderManagerImpl$LoaderViewModel -> android.support.v4.app.LoaderManagerImpl$LoaderViewModel:
    android.arch.lifecycle.ViewModelProvider$Factory FACTORY -> a
    android.support.v4.util.SparseArrayCompat mLoaders -> b
    boolean mCreatingLoader -> c
    void <init>() -> <init>
    void <clinit>() -> <clinit>
android.support.v4.app.LoaderManagerImpl$LoaderViewModel$1 -> android.support.v4.app.LoaderManagerImpl$LoaderViewModel$1:
    void <init>() -> <init>
android.support.v4.graphics.drawable.IconCompat -> android.support.v4.graphics.drawable.IconCompat:
    int mType -> a
    java.lang.Object mObj1 -> b
    byte[] mData -> c
    android.os.Parcelable mParcelable -> d
    int mInt1 -> e
    int mInt2 -> f
    android.content.res.ColorStateList mTintList -> g
    android.graphics.PorterDuff$Mode DEFAULT_TINT_MODE -> h
    android.graphics.PorterDuff$Mode mTintMode -> i
    java.lang.String mTintModeStr -> j
    void <init>() -> <init>
    java.lang.String getResPackage() -> a
    int getResId() -> b
    java.lang.String toString() -> toString
    void onPreParceling(boolean) -> a
    void onPostParceling() -> c
    java.lang.String typeToString(int) -> a
    java.lang.String getResPackage(android.graphics.drawable.Icon) -> a
    int getResId(android.graphics.drawable.Icon) -> b
    void <clinit>() -> <clinit>
android.support.v4.graphics.drawable.IconCompatParcelizer -> android.support.v4.graphics.drawable.IconCompatParcelizer:
    void <init>() -> <init>
    android.support.v4.graphics.drawable.IconCompat read(androidx.versionedparcelable.VersionedParcel) -> read
    void write(android.support.v4.graphics.drawable.IconCompat,androidx.versionedparcelable.VersionedParcel) -> write
android.support.v4.util.ContainerHelpers -> android.support.v4.a.a:
    int[] EMPTY_INTS -> a
    long[] EMPTY_LONGS -> b
    java.lang.Object[] EMPTY_OBJECTS -> c
    int idealIntArraySize(int) -> a
    int idealByteArraySize(int) -> b
    void <clinit>() -> <clinit>
android.support.v4.util.DebugUtils -> android.support.v4.a.b:
    void buildShortClassTag(java.lang.Object,java.lang.StringBuilder) -> a
android.support.v4.util.SparseArrayCompat -> android.support.v4.a.c:
    java.lang.Object DELETED -> a
    boolean mGarbage -> b
    int[] mKeys -> c
    java.lang.Object[] mValues -> d
    int mSize -> e
    void <init>() -> <init>
    void <init>(int) -> <init>
    android.support.v4.util.SparseArrayCompat clone() -> a
    void gc() -> c
    int size() -> b
    int keyAt(int) -> a
    java.lang.Object valueAt(int) -> b
    java.lang.String toString() -> toString
    java.lang.Object clone() -> clone
    void <clinit>() -> <clinit>
androidx.core.graphics.drawable.IconCompatParcelizer -> androidx.core.graphics.drawable.IconCompatParcelizer:
    void <init>() -> <init>
    android.support.v4.graphics.drawable.IconCompat read(androidx.versionedparcelable.VersionedParcel) -> read
    void write(android.support.v4.graphics.drawable.IconCompat,androidx.versionedparcelable.VersionedParcel) -> write
androidx.versionedparcelable.CustomVersionedParcelable -> androidx.versionedparcelable.CustomVersionedParcelable:
    void <init>() -> <init>
    void onPreParceling(boolean) -> a
    void onPostParceling() -> c
androidx.versionedparcelable.ParcelImpl -> androidx.versionedparcelable.ParcelImpl:
    androidx.versionedparcelable.VersionedParcelable mParcel -> a
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void <init>(android.os.Parcel) -> <init>
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    void <clinit>() -> <clinit>
androidx.versionedparcelable.ParcelImpl$1 -> androidx.versionedparcelable.ParcelImpl$1:
    void <init>() -> <init>
    androidx.versionedparcelable.ParcelImpl createFromParcel(android.os.Parcel) -> a
    androidx.versionedparcelable.ParcelImpl[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
androidx.versionedparcelable.VersionedParcel -> androidx.versionedparcelable.a:
    void <init>() -> <init>
    boolean isStream() -> a
    void closeField() -> b
    androidx.versionedparcelable.VersionedParcel createSubParcel() -> c
    void writeByteArray(byte[]) -> a
    void writeInt(int) -> a
    void writeString(java.lang.String) -> a
    void writeParcelable(android.os.Parcelable) -> a
    int readInt() -> d
    java.lang.String readString() -> e
    byte[] readByteArray() -> f
    android.os.Parcelable readParcelable() -> g
    boolean readField(int) -> b
    void setOutputField(int) -> c
    void setSerializationFlags(boolean,boolean) -> a
    void writeByteArray(byte[],int) -> a
    void writeInt(int,int) -> a
    void writeString(java.lang.String,int) -> a
    void writeParcelable(android.os.Parcelable,int) -> a
    int readInt(int,int) -> b
    java.lang.String readString(java.lang.String,int) -> b
    byte[] readByteArray(byte[],int) -> b
    android.os.Parcelable readParcelable(android.os.Parcelable,int) -> b
    void writeVersionedParcelable(androidx.versionedparcelable.VersionedParcelable) -> a
    void writeVersionedParcelableCreator(androidx.versionedparcelable.VersionedParcelable) -> b
    androidx.versionedparcelable.VersionedParcelable readVersionedParcelable() -> h
    androidx.versionedparcelable.VersionedParcelable readFromParcel(java.lang.String,androidx.versionedparcelable.VersionedParcel) -> a
    void writeToParcel(androidx.versionedparcelable.VersionedParcelable,androidx.versionedparcelable.VersionedParcel) -> a
    java.lang.Class findParcelClass(androidx.versionedparcelable.VersionedParcelable) -> c
    java.lang.Class findParcelClass(java.lang.Class) -> a
androidx.versionedparcelable.VersionedParcelParcel -> androidx.versionedparcelable.b:
    android.util.SparseIntArray mPositionLookup -> a
    android.os.Parcel mParcel -> b
    int mOffset -> c
    int mEnd -> d
    java.lang.String mPrefix -> e
    int mCurrentField -> f
    int mNextRead -> g
    void <init>(android.os.Parcel) -> <init>
    void <init>(android.os.Parcel,int,int,java.lang.String) -> <init>
    int readUntilField(int) -> d
    boolean readField(int) -> b
    void setOutputField(int) -> c
    void closeField() -> b
    androidx.versionedparcelable.VersionedParcel createSubParcel() -> c
    void writeByteArray(byte[]) -> a
    void writeInt(int) -> a
    void writeString(java.lang.String) -> a
    void writeParcelable(android.os.Parcelable) -> a
    int readInt() -> d
    java.lang.String readString() -> e
    byte[] readByteArray() -> f
    android.os.Parcelable readParcelable() -> g
androidx.versionedparcelable.VersionedParcelable -> androidx.versionedparcelable.c:
com.cloudwebrtc.flutterwebrtcdemo.MainActivity -> com.cloudwebrtc.flutterwebrtcdemo.MainActivity:
    void <init>() -> <init>
    void onCreate(android.os.Bundle) -> onCreate
com.cloudwebrtc.webrtc.BuildConfig -> com.cloudwebrtc.webrtc.BuildConfig:
    boolean DEBUG -> DEBUG
    java.lang.String APPLICATION_ID -> APPLICATION_ID
    java.lang.String BUILD_TYPE -> BUILD_TYPE
    java.lang.String FLAVOR -> FLAVOR
    int VERSION_CODE -> VERSION_CODE
    java.lang.String VERSION_NAME -> VERSION_NAME
    void <init>() -> <init>
com.cloudwebrtc.webrtc.CameraEventsHandler -> com.cloudwebrtc.webrtc.CameraEventsHandler:
    java.lang.String TAG -> TAG
    void <init>() -> <init>
    void onCameraError(java.lang.String) -> onCameraError
    void onCameraDisconnected() -> onCameraDisconnected
    void onCameraFreezed(java.lang.String) -> onCameraFreezed
    void onCameraOpening(java.lang.String) -> onCameraOpening
    void onFirstFrameAvailable() -> onFirstFrameAvailable
    void onCameraClosed() -> onCameraClosed
com.cloudwebrtc.webrtc.DataChannelObserver -> com.cloudwebrtc.webrtc.DataChannelObserver:
    int mId -> mId
    org.webrtc.DataChannel mDataChannel -> mDataChannel
    java.lang.String peerConnectionId -> peerConnectionId
    com.cloudwebrtc.webrtc.FlutterWebRTCPlugin plugin -> plugin
    io.flutter.plugin.common.EventChannel eventChannel -> eventChannel
    io.flutter.plugin.common.EventChannel$EventSink eventSink -> eventSink
    void <init>(com.cloudwebrtc.webrtc.FlutterWebRTCPlugin,java.lang.String,int,org.webrtc.DataChannel) -> <init>
    java.lang.String dataChannelStateString(org.webrtc.DataChannel$State) -> dataChannelStateString
    void onListen(java.lang.Object,io.flutter.plugin.common.EventChannel$EventSink) -> onListen
    void onCancel(java.lang.Object) -> onCancel
    void onBufferedAmountChange(long) -> onBufferedAmountChange
    void onStateChange() -> onStateChange
    void onMessage(org.webrtc.DataChannel$Buffer) -> onMessage
    void sendEvent(com.cloudwebrtc.webrtc.utils.ConstraintsMap) -> sendEvent
com.cloudwebrtc.webrtc.DataChannelObserver$1 -> com.cloudwebrtc.webrtc.DataChannelObserver$1:
    int[] $SwitchMap$org$webrtc$DataChannel$State -> $SwitchMap$org$webrtc$DataChannel$State
    void <clinit>() -> <clinit>
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer -> com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer:
    java.lang.String TAG -> TAG
    android.graphics.SurfaceTexture texture -> texture
    io.flutter.view.TextureRegistry$SurfaceTextureEntry entry -> entry
    int id -> id
    org.webrtc.RendererCommon$RendererEvents rendererEvents -> rendererEvents
    com.cloudwebrtc.webrtc.SurfaceTextureRenderer surfaceTextureRenderer -> surfaceTextureRenderer
    org.webrtc.VideoTrack videoTrack -> videoTrack
    io.flutter.plugin.common.EventChannel eventChannel -> eventChannel
    io.flutter.plugin.common.EventChannel$EventSink eventSink -> eventSink
    void Dispose() -> Dispose
    void <init>(android.graphics.SurfaceTexture,io.flutter.view.TextureRegistry$SurfaceTextureEntry) -> <init>
    void setEventChannel(io.flutter.plugin.common.EventChannel) -> setEventChannel
    void setId(int) -> setId
    void onListen(java.lang.Object,io.flutter.plugin.common.EventChannel$EventSink) -> onListen
    void onCancel(java.lang.Object) -> onCancel
    void removeRendererFromVideoTrack() -> removeRendererFromVideoTrack
    void setStream(org.webrtc.MediaStream) -> setStream
    void setVideoTrack(org.webrtc.VideoTrack) -> setVideoTrack
    void tryAddRendererToVideoTrack() -> tryAddRendererToVideoTrack
    int access$000(com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer) -> access$000
com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer$1 -> com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer$1:
    int _rotation -> _rotation
    int _width -> _width
    int _height -> _height
    com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer this$0 -> this$0
    void <init>(com.cloudwebrtc.webrtc.FlutterRTCVideoRenderer) -> <init>
    void onFirstFrameRendered() -> onFirstFrameRendered
    void onFrameResolutionChanged(int,int,int) -> onFrameResolutionChanged
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin -> com.cloudwebrtc.webrtc.FlutterWebRTCPlugin:
    java.lang.String TAG -> TAG
    io.flutter.plugin.common.PluginRegistry$Registrar registrar -> registrar
    io.flutter.plugin.common.MethodChannel channel -> channel
    java.util.Map localStreams -> localStreams
    java.util.Map localTracks -> localTracks
    java.util.Map mPeerConnectionObservers -> mPeerConnectionObservers
    io.flutter.view.TextureRegistry textures -> textures
    android.util.LongSparseArray renders -> renders
    com.cloudwebrtc.webrtc.GetUserMediaImpl getUserMediaImpl -> getUserMediaImpl
    org.webrtc.PeerConnectionFactory mFactory -> mFactory
    org.webrtc.audio.AudioDeviceModule audioDeviceModule -> audioDeviceModule
    com.cloudwebrtc.webrtc.utils.RTCAudioManager rtcAudioManager -> rtcAudioManager
    android.app.Activity getActivity() -> getActivity
    android.content.Context getContext() -> getContext
    void registerWith(io.flutter.plugin.common.PluginRegistry$Registrar) -> registerWith
    io.flutter.plugin.common.PluginRegistry$Registrar registrar() -> registrar
    void <init>(io.flutter.plugin.common.PluginRegistry$Registrar,io.flutter.plugin.common.MethodChannel) -> <init>
    void startAudioManager() -> startAudioManager
    void stopAudioManager() -> stopAudioManager
    void onAudioManagerDevicesChanged(com.cloudwebrtc.webrtc.utils.RTCAudioManager$AudioDevice,java.util.Set) -> onAudioManagerDevicesChanged
    void onMethodCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result) -> onMethodCall
    org.webrtc.PeerConnection getPeerConnection(java.lang.String) -> getPeerConnection
    java.util.List createIceServers(com.cloudwebrtc.webrtc.utils.ConstraintsArray) -> createIceServers
    org.webrtc.PeerConnection$RTCConfiguration parseRTCConfiguration(com.cloudwebrtc.webrtc.utils.ConstraintsMap) -> parseRTCConfiguration
    java.lang.String peerConnectionInit(com.cloudwebrtc.webrtc.utils.ConstraintsMap,com.cloudwebrtc.webrtc.utils.ConstraintsMap) -> peerConnectionInit
    java.lang.String getNextStreamUUID() -> getNextStreamUUID
    java.lang.String getNextTrackUUID() -> getNextTrackUUID
    org.webrtc.MediaStream getStreamForId(java.lang.String,java.lang.String) -> getStreamForId
    org.webrtc.MediaStreamTrack getTrackForId(java.lang.String) -> getTrackForId
    void parseConstraints(com.cloudwebrtc.webrtc.utils.ConstraintsMap,java.util.List) -> parseConstraints
    java.lang.String getMapStrValue(com.cloudwebrtc.webrtc.utils.ConstraintsMap,java.lang.String) -> getMapStrValue
    org.webrtc.MediaConstraints parseMediaConstraints(com.cloudwebrtc.webrtc.utils.ConstraintsMap) -> parseMediaConstraints
    void getUserMedia(com.cloudwebrtc.webrtc.utils.ConstraintsMap,io.flutter.plugin.common.MethodChannel$Result) -> getUserMedia
    void getDisplayMedia(com.cloudwebrtc.webrtc.utils.ConstraintsMap,io.flutter.plugin.common.MethodChannel$Result) -> getDisplayMedia
    void getSources(io.flutter.plugin.common.MethodChannel$Result) -> getSources
    void mediaStreamTrackStop(java.lang.String) -> mediaStreamTrackStop
    void mediaStreamTrackSetEnabled(java.lang.String,boolean) -> mediaStreamTrackSetEnabled
    void mediaStreamTrackSetVolume(java.lang.String,double) -> mediaStreamTrackSetVolume
    void mediaStreamAddTrack(java.lang.String,java.lang.String,io.flutter.plugin.common.MethodChannel$Result) -> mediaStreamAddTrack
    void mediaStreamRemoveTrack(java.lang.String,java.lang.String,io.flutter.plugin.common.MethodChannel$Result) -> mediaStreamRemoveTrack
    void mediaStreamTrackRelease(java.lang.String,java.lang.String) -> mediaStreamTrackRelease
    com.cloudwebrtc.webrtc.utils.ConstraintsMap getCameraInfo(int) -> getCameraInfo
    org.webrtc.MediaConstraints defaultConstraints() -> defaultConstraints
    void peerConnectionSetConfiguration(com.cloudwebrtc.webrtc.utils.ConstraintsMap,org.webrtc.PeerConnection) -> peerConnectionSetConfiguration
    void peerConnectionAddStream(java.lang.String,java.lang.String,io.flutter.plugin.common.MethodChannel$Result) -> peerConnectionAddStream
    void peerConnectionRemoveStream(java.lang.String,java.lang.String,io.flutter.plugin.common.MethodChannel$Result) -> peerConnectionRemoveStream
    void peerConnectionCreateOffer(java.lang.String,com.cloudwebrtc.webrtc.utils.ConstraintsMap,io.flutter.plugin.common.MethodChannel$Result) -> peerConnectionCreateOffer
    void peerConnectionCreateAnswer(java.lang.String,com.cloudwebrtc.webrtc.utils.ConstraintsMap,io.flutter.plugin.common.MethodChannel$Result) -> peerConnectionCreateAnswer
    void peerConnectionSetLocalDescription(com.cloudwebrtc.webrtc.utils.ConstraintsMap,java.lang.String,io.flutter.plugin.common.MethodChannel$Result) -> peerConnectionSetLocalDescription
    void peerConnectionSetRemoteDescription(com.cloudwebrtc.webrtc.utils.ConstraintsMap,java.lang.String,io.flutter.plugin.common.MethodChannel$Result) -> peerConnectionSetRemoteDescription
    void peerConnectionAddICECandidate(com.cloudwebrtc.webrtc.utils.ConstraintsMap,java.lang.String,io.flutter.plugin.common.MethodChannel$Result) -> peerConnectionAddICECandidate
    void peerConnectionGetStats(java.lang.String,java.lang.String,io.flutter.plugin.common.MethodChannel$Result) -> peerConnectionGetStats
    void peerConnectionClose(java.lang.String) -> peerConnectionClose
    void peerConnectionDispose(java.lang.String) -> peerConnectionDispose
    void mediaStreamRelease(java.lang.String) -> mediaStreamRelease
    void createDataChannel(java.lang.String,java.lang.String,com.cloudwebrtc.webrtc.utils.ConstraintsMap,io.flutter.plugin.common.MethodChannel$Result) -> createDataChannel
    void dataChannelSend(java.lang.String,int,java.nio.ByteBuffer,java.lang.Boolean) -> dataChannelSend
    void dataChannelClose(java.lang.String,int) -> dataChannelClose
    void access$000(com.cloudwebrtc.webrtc.FlutterWebRTCPlugin,com.cloudwebrtc.webrtc.utils.RTCAudioManager$AudioDevice,java.util.Set) -> access$000
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin$1 -> com.cloudwebrtc.webrtc.FlutterWebRTCPlugin$1:
    com.cloudwebrtc.webrtc.FlutterWebRTCPlugin this$0 -> this$0
    void <init>(com.cloudwebrtc.webrtc.FlutterWebRTCPlugin) -> <init>
    void onAudioDeviceChanged(com.cloudwebrtc.webrtc.utils.RTCAudioManager$AudioDevice,java.util.Set) -> onAudioDeviceChanged
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin$2 -> com.cloudwebrtc.webrtc.FlutterWebRTCPlugin$2:
    io.flutter.plugin.common.MethodChannel$Result val$result -> val$result
    com.cloudwebrtc.webrtc.FlutterWebRTCPlugin this$0 -> this$0
    void <init>(com.cloudwebrtc.webrtc.FlutterWebRTCPlugin,io.flutter.plugin.common.MethodChannel$Result) -> <init>
    void onCreateFailure(java.lang.String) -> onCreateFailure
    void onCreateSuccess(org.webrtc.SessionDescription) -> onCreateSuccess
    void onSetFailure(java.lang.String) -> onSetFailure
    void onSetSuccess() -> onSetSuccess
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin$3 -> com.cloudwebrtc.webrtc.FlutterWebRTCPlugin$3:
    io.flutter.plugin.common.MethodChannel$Result val$result -> val$result
    com.cloudwebrtc.webrtc.FlutterWebRTCPlugin this$0 -> this$0
    void <init>(com.cloudwebrtc.webrtc.FlutterWebRTCPlugin,io.flutter.plugin.common.MethodChannel$Result) -> <init>
    void onCreateFailure(java.lang.String) -> onCreateFailure
    void onCreateSuccess(org.webrtc.SessionDescription) -> onCreateSuccess
    void onSetFailure(java.lang.String) -> onSetFailure
    void onSetSuccess() -> onSetSuccess
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin$4 -> com.cloudwebrtc.webrtc.FlutterWebRTCPlugin$4:
    io.flutter.plugin.common.MethodChannel$Result val$result -> val$result
    com.cloudwebrtc.webrtc.FlutterWebRTCPlugin this$0 -> this$0
    void <init>(com.cloudwebrtc.webrtc.FlutterWebRTCPlugin,io.flutter.plugin.common.MethodChannel$Result) -> <init>
    void onCreateSuccess(org.webrtc.SessionDescription) -> onCreateSuccess
    void onSetSuccess() -> onSetSuccess
    void onCreateFailure(java.lang.String) -> onCreateFailure
    void onSetFailure(java.lang.String) -> onSetFailure
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin$5 -> com.cloudwebrtc.webrtc.FlutterWebRTCPlugin$5:
    io.flutter.plugin.common.MethodChannel$Result val$result -> val$result
    com.cloudwebrtc.webrtc.FlutterWebRTCPlugin this$0 -> this$0
    void <init>(com.cloudwebrtc.webrtc.FlutterWebRTCPlugin,io.flutter.plugin.common.MethodChannel$Result) -> <init>
    void onCreateSuccess(org.webrtc.SessionDescription) -> onCreateSuccess
    void onSetSuccess() -> onSetSuccess
    void onCreateFailure(java.lang.String) -> onCreateFailure
    void onSetFailure(java.lang.String) -> onSetFailure
com.cloudwebrtc.webrtc.FlutterWebRTCPlugin$6 -> com.cloudwebrtc.webrtc.FlutterWebRTCPlugin$6:
    int[] $SwitchMap$com$cloudwebrtc$webrtc$utils$ObjectType -> $SwitchMap$com$cloudwebrtc$webrtc$utils$ObjectType
    void <clinit>() -> <clinit>
com.cloudwebrtc.webrtc.GetUserMediaImpl -> com.cloudwebrtc.webrtc.GetUserMediaImpl:
    int DEFAULT_WIDTH -> DEFAULT_WIDTH
    int DEFAULT_HEIGHT -> DEFAULT_HEIGHT
    int DEFAULT_FPS -> DEFAULT_FPS
    java.lang.String PERMISSION_AUDIO -> PERMISSION_AUDIO
    java.lang.String PERMISSION_VIDEO -> PERMISSION_VIDEO
    java.lang.String PERMISSION_SCREEN -> PERMISSION_SCREEN
    int CAPTURE_PERMISSION_REQUEST_CODE -> CAPTURE_PERMISSION_REQUEST_CODE
    java.lang.String GRANT_RESULTS -> GRANT_RESULTS
    java.lang.String PERMISSIONS -> PERMISSIONS
    java.lang.String PROJECTION_DATA -> PROJECTION_DATA
    java.lang.String RESULT_RECEIVER -> RESULT_RECEIVER
    java.lang.String REQUEST_CODE -> REQUEST_CODE
    java.lang.String TAG -> TAG
    java.util.Map mVideoCapturers -> mVideoCapturers
    android.content.Context applicationContext -> applicationContext
    com.cloudwebrtc.webrtc.FlutterWebRTCPlugin plugin -> plugin
    int minAPILevel -> minAPILevel
    android.media.projection.MediaProjectionManager mProjectionManager -> mProjectionManager
    android.media.projection.MediaProjection sMediaProjection -> sMediaProjection
    com.cloudwebrtc.webrtc.record.AudioSamplesInterceptor inputSamplesInterceptor -> inputSamplesInterceptor
    com.cloudwebrtc.webrtc.record.OutputAudioSamplesInterceptor outputSamplesInterceptor -> outputSamplesInterceptor
    org.webrtc.audio.JavaAudioDeviceModule audioDeviceModule -> audioDeviceModule
    android.util.SparseArray mediaRecorders -> mediaRecorders
    void screenRequestPremissions(android.os.ResultReceiver) -> screenRequestPremissions
    void <init>(com.cloudwebrtc.webrtc.FlutterWebRTCPlugin,android.content.Context) -> <init>
    void addDefaultAudioConstraints(org.webrtc.MediaConstraints) -> addDefaultAudioConstraints
    org.webrtc.VideoCapturer createVideoCapturer(org.webrtc.CameraEnumerator,boolean,java.lang.String) -> createVideoCapturer
    java.lang.String getFacingMode(com.cloudwebrtc.webrtc.utils.ConstraintsMap) -> getFacingMode
    java.lang.String getSourceIdConstraint(com.cloudwebrtc.webrtc.utils.ConstraintsMap) -> getSourceIdConstraint
    org.webrtc.AudioTrack getUserAudio(com.cloudwebrtc.webrtc.utils.ConstraintsMap) -> getUserAudio
    void getUserMedia(com.cloudwebrtc.webrtc.utils.ConstraintsMap,io.flutter.plugin.common.MethodChannel$Result,org.webrtc.MediaStream) -> getUserMedia
    void getDisplayMedia(com.cloudwebrtc.webrtc.utils.ConstraintsMap,io.flutter.plugin.common.MethodChannel$Result,org.webrtc.MediaStream) -> getDisplayMedia
    void getUserMedia(com.cloudwebrtc.webrtc.utils.ConstraintsMap,io.flutter.plugin.common.MethodChannel$Result,org.webrtc.MediaStream,java.util.List) -> getUserMedia
    org.webrtc.VideoTrack getUserVideo(com.cloudwebrtc.webrtc.utils.ConstraintsMap) -> getUserVideo
    void removeVideoCapturer(java.lang.String) -> removeVideoCapturer
    void requestPermissions(java.util.ArrayList,com.cloudwebrtc.webrtc.utils.Callback,com.cloudwebrtc.webrtc.utils.Callback) -> requestPermissions
    void switchCamera(java.lang.String,io.flutter.plugin.common.MethodChannel$Result) -> switchCamera
    void startRecordingToFile(java.lang.String,java.lang.Integer,org.webrtc.VideoTrack,com.cloudwebrtc.webrtc.record.AudioChannel) -> startRecordingToFile
    void stopRecording(java.lang.Integer) -> stopRecording
    void hasTorch(java.lang.String,io.flutter.plugin.common.MethodChannel$Result) -> hasTorch
    void setTorch(java.lang.String,boolean,io.flutter.plugin.common.MethodChannel$Result) -> setTorch
    java.lang.Object getPrivateProperty(java.lang.Class,java.lang.Object,java.lang.String) -> getPrivateProperty
    void access$000(com.cloudwebrtc.webrtc.GetUserMediaImpl,com.cloudwebrtc.webrtc.utils.ConstraintsMap,io.flutter.plugin.common.MethodChannel$Result,org.webrtc.MediaStream,java.util.List) -> access$000
    com.cloudwebrtc.webrtc.FlutterWebRTCPlugin access$100(com.cloudwebrtc.webrtc.GetUserMediaImpl) -> access$100
    android.content.Context access$200(com.cloudwebrtc.webrtc.GetUserMediaImpl) -> access$200
    java.util.Map access$300(com.cloudwebrtc.webrtc.GetUserMediaImpl) -> access$300
    void <clinit>() -> <clinit>
com.cloudwebrtc.webrtc.GetUserMediaImpl$1 -> com.cloudwebrtc.webrtc.GetUserMediaImpl$1:
    com.cloudwebrtc.webrtc.utils.ConstraintsMap val$constraints -> val$constraints
    io.flutter.plugin.common.MethodChannel$Result val$result -> val$result
    org.webrtc.MediaStream val$mediaStream -> val$mediaStream
    com.cloudwebrtc.webrtc.GetUserMediaImpl this$0 -> this$0
    void <init>(com.cloudwebrtc.webrtc.GetUserMediaImpl,com.cloudwebrtc.webrtc.utils.ConstraintsMap,io.flutter.plugin.common.MethodChannel$Result,org.webrtc.MediaStream) -> <init>
    void invoke(java.lang.Object[]) -> invoke
com.cloudwebrtc.webrtc.GetUserMediaImpl$2 -> com.cloudwebrtc.webrtc.GetUserMediaImpl$2:
    io.flutter.plugin.common.MethodChannel$Result val$result -> val$result
    com.cloudwebrtc.webrtc.GetUserMediaImpl this$0 -> this$0
    void <init>(com.cloudwebrtc.webrtc.GetUserMediaImpl,io.flutter.plugin.common.MethodChannel$Result) -> <init>
    void invoke(java.lang.Object[]) -> invoke
com.cloudwebrtc.webrtc.GetUserMediaImpl$3 -> com.cloudwebrtc.webrtc.GetUserMediaImpl$3:
    io.flutter.plugin.common.MethodChannel$Result val$result -> val$result
    org.webrtc.MediaStream val$mediaStream -> val$mediaStream
    com.cloudwebrtc.webrtc.GetUserMediaImpl this$0 -> this$0
    void <init>(com.cloudwebrtc.webrtc.GetUserMediaImpl,android.os.Handler,io.flutter.plugin.common.MethodChannel$Result,org.webrtc.MediaStream) -> <init>
    void onReceiveResult(int,android.os.Bundle) -> onReceiveResult
com.cloudwebrtc.webrtc.GetUserMediaImpl$3$1 -> com.cloudwebrtc.webrtc.GetUserMediaImpl$3$1:
    com.cloudwebrtc.webrtc.GetUserMediaImpl$3 this$1 -> this$1
    void <init>(com.cloudwebrtc.webrtc.GetUserMediaImpl$3) -> <init>
    void onStop() -> onStop
com.cloudwebrtc.webrtc.GetUserMediaImpl$4 -> com.cloudwebrtc.webrtc.GetUserMediaImpl$4:
    java.util.ArrayList val$permissions -> val$permissions
    com.cloudwebrtc.webrtc.utils.Callback val$errorCallback -> val$errorCallback
    com.cloudwebrtc.webrtc.utils.Callback val$successCallback -> val$successCallback
    com.cloudwebrtc.webrtc.GetUserMediaImpl this$0 -> this$0
    void <init>(com.cloudwebrtc.webrtc.GetUserMediaImpl,java.util.ArrayList,com.cloudwebrtc.webrtc.utils.Callback,com.cloudwebrtc.webrtc.utils.Callback) -> <init>
    void invoke(java.lang.String[],int[]) -> invoke
com.cloudwebrtc.webrtc.GetUserMediaImpl$5 -> com.cloudwebrtc.webrtc.GetUserMediaImpl$5:
    io.flutter.plugin.common.MethodChannel$Result val$result -> val$result
    com.cloudwebrtc.webrtc.GetUserMediaImpl this$0 -> this$0
    void <init>(com.cloudwebrtc.webrtc.GetUserMediaImpl,io.flutter.plugin.common.MethodChannel$Result) -> <init>
    void onCameraSwitchDone(boolean) -> onCameraSwitchDone
    void onCameraSwitchError(java.lang.String) -> onCameraSwitchError
com.cloudwebrtc.webrtc.GetUserMediaImpl$6 -> com.cloudwebrtc.webrtc.GetUserMediaImpl$6:
    int[] $SwitchMap$com$cloudwebrtc$webrtc$utils$ObjectType -> $SwitchMap$com$cloudwebrtc$webrtc$utils$ObjectType
    void <clinit>() -> <clinit>
com.cloudwebrtc.webrtc.GetUserMediaImpl$NoSuchFieldWithNameException -> com.cloudwebrtc.webrtc.GetUserMediaImpl$NoSuchFieldWithNameException:
    java.lang.String className -> className
    java.lang.String fieldName -> fieldName
    com.cloudwebrtc.webrtc.GetUserMediaImpl this$0 -> this$0
    void <init>(com.cloudwebrtc.webrtc.GetUserMediaImpl,java.lang.String,java.lang.String,java.lang.NoSuchFieldException) -> <init>
com.cloudwebrtc.webrtc.GetUserMediaImpl$ScreenRequestPermissionsFragment -> com.cloudwebrtc.webrtc.GetUserMediaImpl$ScreenRequestPermissionsFragment:
    android.os.ResultReceiver resultReceiver -> resultReceiver
    int requestCode -> requestCode
    int resultCode -> resultCode
    void <init>() -> <init>
    void checkSelfPermissions(boolean) -> checkSelfPermissions
    void requestStart(android.app.Activity,int) -> requestStart
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void finish() -> finish
    void onResume() -> onResume
com.cloudwebrtc.webrtc.PeerConnectionObserver -> com.cloudwebrtc.webrtc.PeerConnectionObserver:
    java.lang.String TAG -> TAG
    android.util.SparseArray dataChannels -> dataChannels
    java.lang.String id -> id
    org.webrtc.PeerConnection peerConnection -> peerConnection
    java.util.Map remoteStreams -> remoteStreams
    java.util.Map remoteTracks -> remoteTracks
    com.cloudwebrtc.webrtc.FlutterWebRTCPlugin plugin -> plugin
    io.flutter.plugin.common.EventChannel eventChannel -> eventChannel
    io.flutter.plugin.common.EventChannel$EventSink eventSink -> eventSink
    void <init>(com.cloudwebrtc.webrtc.FlutterWebRTCPlugin,java.lang.String) -> <init>
    void onListen(java.lang.Object,io.flutter.plugin.common.EventChannel$EventSink) -> onListen
    void onCancel(java.lang.Object) -> onCancel
    org.webrtc.PeerConnection getPeerConnection() -> getPeerConnection
    void setPeerConnection(org.webrtc.PeerConnection) -> setPeerConnection
    void close() -> close
    void dispose() -> dispose
    void createDataChannel(java.lang.String,com.cloudwebrtc.webrtc.utils.ConstraintsMap,io.flutter.plugin.common.MethodChannel$Result) -> createDataChannel
    void dataChannelClose(int) -> dataChannelClose
    void dataChannelSend(int,java.nio.ByteBuffer,java.lang.Boolean) -> dataChannelSend
    void getStats(java.lang.String,io.flutter.plugin.common.MethodChannel$Result) -> getStats
    void onIceCandidate(org.webrtc.IceCandidate) -> onIceCandidate
    void onIceCandidatesRemoved(org.webrtc.IceCandidate[]) -> onIceCandidatesRemoved
    void onIceConnectionChange(org.webrtc.PeerConnection$IceConnectionState) -> onIceConnectionChange
    void onIceConnectionReceivingChange(boolean) -> onIceConnectionReceivingChange
    void onIceGatheringChange(org.webrtc.PeerConnection$IceGatheringState) -> onIceGatheringChange
    java.lang.String getUIDForStream(org.webrtc.MediaStream) -> getUIDForStream
    void onAddStream(org.webrtc.MediaStream) -> onAddStream
    void sendEvent(com.cloudwebrtc.webrtc.utils.ConstraintsMap) -> sendEvent
    void onRemoveStream(org.webrtc.MediaStream) -> onRemoveStream
    void onAddTrack(org.webrtc.RtpReceiver,org.webrtc.MediaStream[]) -> onAddTrack
    void onDataChannel(org.webrtc.DataChannel) -> onDataChannel
    void registerDataChannelObserver(int,org.webrtc.DataChannel) -> registerDataChannelObserver
    void onRenegotiationNeeded() -> onRenegotiationNeeded
    void onSignalingChange(org.webrtc.PeerConnection$SignalingState) -> onSignalingChange
    java.lang.String iceConnectionStateString(org.webrtc.PeerConnection$IceConnectionState) -> iceConnectionStateString
    java.lang.String iceGatheringStateString(org.webrtc.PeerConnection$IceGatheringState) -> iceGatheringStateString
    java.lang.String signalingStateString(org.webrtc.PeerConnection$SignalingState) -> signalingStateString
    void onStandardizedIceConnectionChange(org.webrtc.PeerConnection$IceConnectionState) -> onStandardizedIceConnectionChange
    void onConnectionChange(org.webrtc.PeerConnection$PeerConnectionState) -> onConnectionChange
    void onTrack(org.webrtc.RtpTransceiver) -> onTrack
com.cloudwebrtc.webrtc.PeerConnectionObserver$1 -> com.cloudwebrtc.webrtc.PeerConnectionObserver$1:
    io.flutter.plugin.common.MethodChannel$Result val$result -> val$result
    com.cloudwebrtc.webrtc.PeerConnectionObserver this$0 -> this$0
    void <init>(com.cloudwebrtc.webrtc.PeerConnectionObserver,io.flutter.plugin.common.MethodChannel$Result) -> <init>
    void onComplete(org.webrtc.StatsReport[]) -> onComplete
com.cloudwebrtc.webrtc.PeerConnectionObserver$2 -> com.cloudwebrtc.webrtc.PeerConnectionObserver$2:
    int[] $SwitchMap$org$webrtc$PeerConnection$IceConnectionState -> $SwitchMap$org$webrtc$PeerConnection$IceConnectionState
    int[] $SwitchMap$org$webrtc$PeerConnection$IceGatheringState -> $SwitchMap$org$webrtc$PeerConnection$IceGatheringState
    int[] $SwitchMap$org$webrtc$PeerConnection$SignalingState -> $SwitchMap$org$webrtc$PeerConnection$SignalingState
    void <clinit>() -> <clinit>
com.cloudwebrtc.webrtc.R -> com.cloudwebrtc.webrtc.R:
    void <init>() -> <init>
com.cloudwebrtc.webrtc.R$attr -> com.cloudwebrtc.webrtc.R$attr:
    int alpha -> alpha
    int coordinatorLayoutStyle -> coordinatorLayoutStyle
    int font -> font
    int fontProviderAuthority -> fontProviderAuthority
    int fontProviderCerts -> fontProviderCerts
    int fontProviderFetchStrategy -> fontProviderFetchStrategy
    int fontProviderFetchTimeout -> fontProviderFetchTimeout
    int fontProviderPackage -> fontProviderPackage
    int fontProviderQuery -> fontProviderQuery
    int fontStyle -> fontStyle
    int fontVariationSettings -> fontVariationSettings
    int fontWeight -> fontWeight
    int keylines -> keylines
    int layout_anchor -> layout_anchor
    int layout_anchorGravity -> layout_anchorGravity
    int layout_behavior -> layout_behavior
    int layout_dodgeInsetEdges -> layout_dodgeInsetEdges
    int layout_insetEdge -> layout_insetEdge
    int layout_keyline -> layout_keyline
    int statusBarBackground -> statusBarBackground
    int ttcIndex -> ttcIndex
    void <init>() -> <init>
com.cloudwebrtc.webrtc.R$color -> com.cloudwebrtc.webrtc.R$color:
    int notification_action_color_filter -> notification_action_color_filter
    int notification_icon_bg_color -> notification_icon_bg_color
    int ripple_material_light -> ripple_material_light
    int secondary_text_default_material_light -> secondary_text_default_material_light
    void <init>() -> <init>
com.cloudwebrtc.webrtc.R$dimen -> com.cloudwebrtc.webrtc.R$dimen:
    int compat_button_inset_horizontal_material -> compat_button_inset_horizontal_material
    int compat_button_inset_vertical_material -> compat_button_inset_vertical_material
    int compat_button_padding_horizontal_material -> compat_button_padding_horizontal_material
    int compat_button_padding_vertical_material -> compat_button_padding_vertical_material
    int compat_control_corner_material -> compat_control_corner_material
    int compat_notification_large_icon_max_height -> compat_notification_large_icon_max_height
    int compat_notification_large_icon_max_width -> compat_notification_large_icon_max_width
    int notification_action_icon_size -> notification_action_icon_size
    int notification_action_text_size -> notification_action_text_size
    int notification_big_circle_margin -> notification_big_circle_margin
    int notification_content_margin_start -> notification_content_margin_start
    int notification_large_icon_height -> notification_large_icon_height
    int notification_large_icon_width -> notification_large_icon_width
    int notification_main_column_padding_top -> notification_main_column_padding_top
    int notification_media_narrow_margin -> notification_media_narrow_margin
    int notification_right_icon_size -> notification_right_icon_size
    int notification_right_side_padding_top -> notification_right_side_padding_top
    int notification_small_icon_background_padding -> notification_small_icon_background_padding
    int notification_small_icon_size_as_large -> notification_small_icon_size_as_large
    int notification_subtext_size -> notification_subtext_size
    int notification_top_pad -> notification_top_pad
    int notification_top_pad_large_text -> notification_top_pad_large_text
    void <init>() -> <init>
com.cloudwebrtc.webrtc.R$drawable -> com.cloudwebrtc.webrtc.R$drawable:
    int notification_action_background -> notification_action_background
    int notification_bg -> notification_bg
    int notification_bg_low -> notification_bg_low
    int notification_bg_low_normal -> notification_bg_low_normal
    int notification_bg_low_pressed -> notification_bg_low_pressed
    int notification_bg_normal -> notification_bg_normal
    int notification_bg_normal_pressed -> notification_bg_normal_pressed
    int notification_icon_background -> notification_icon_background
    int notification_template_icon_bg -> notification_template_icon_bg
    int notification_template_icon_low_bg -> notification_template_icon_low_bg
    int notification_tile_bg -> notification_tile_bg
    int notify_panel_notification_icon_bg -> notify_panel_notification_icon_bg
    void <init>() -> <init>
com.cloudwebrtc.webrtc.R$id -> com.cloudwebrtc.webrtc.R$id:
    int action_container -> action_container
    int action_divider -> action_divider
    int action_image -> action_image
    int action_text -> action_text
    int actions -> actions
    int async -> async
    int blocking -> blocking
    int bottom -> bottom
    int chronometer -> chronometer
    int end -> end
    int forever -> forever
    int icon -> icon
    int icon_group -> icon_group
    int info -> info
    int italic -> italic
    int left -> left
    int line1 -> line1
    int line3 -> line3
    int none -> none
    int normal -> normal
    int notification_background -> notification_background
    int notification_main_column -> notification_main_column
    int notification_main_column_container -> notification_main_column_container
    int right -> right
    int right_icon -> right_icon
    int right_side -> right_side
    int start -> start
    int tag_transition_group -> tag_transition_group
    int tag_unhandled_key_event_manager -> tag_unhandled_key_event_manager
    int tag_unhandled_key_listeners -> tag_unhandled_key_listeners
    int text -> text
    int text2 -> text2
    int time -> time
    int title -> title
    int top -> top
    void <init>() -> <init>
com.cloudwebrtc.webrtc.R$integer -> com.cloudwebrtc.webrtc.R$integer:
    int status_bar_notification_info_maxnum -> status_bar_notification_info_maxnum
    void <init>() -> <init>
com.cloudwebrtc.webrtc.R$layout -> com.cloudwebrtc.webrtc.R$layout:
    int notification_action -> notification_action
    int notification_action_tombstone -> notification_action_tombstone
    int notification_template_custom_big -> notification_template_custom_big
    int notification_template_icon_group -> notification_template_icon_group
    int notification_template_part_chronometer -> notification_template_part_chronometer
    int notification_template_part_time -> notification_template_part_time
    void <init>() -> <init>
com.cloudwebrtc.webrtc.R$string -> com.cloudwebrtc.webrtc.R$string:
    int status_bar_notification_info_overflow -> status_bar_notification_info_overflow
    void <init>() -> <init>
com.cloudwebrtc.webrtc.R$style -> com.cloudwebrtc.webrtc.R$style:
    int TextAppearance_Compat_Notification -> TextAppearance_Compat_Notification
    int TextAppearance_Compat_Notification_Info -> TextAppearance_Compat_Notification_Info
    int TextAppearance_Compat_Notification_Line2 -> TextAppearance_Compat_Notification_Line2
    int TextAppearance_Compat_Notification_Time -> TextAppearance_Compat_Notification_Time
    int TextAppearance_Compat_Notification_Title -> TextAppearance_Compat_Notification_Title
    int Widget_Compat_NotificationActionContainer -> Widget_Compat_NotificationActionContainer
    int Widget_Compat_NotificationActionText -> Widget_Compat_NotificationActionText
    int Widget_Support_CoordinatorLayout -> Widget_Support_CoordinatorLayout
    void <init>() -> <init>
com.cloudwebrtc.webrtc.R$styleable -> com.cloudwebrtc.webrtc.R$styleable:
    int[] ColorStateListItem -> ColorStateListItem
    int ColorStateListItem_android_color -> ColorStateListItem_android_color
    int ColorStateListItem_android_alpha -> ColorStateListItem_android_alpha
    int ColorStateListItem_alpha -> ColorStateListItem_alpha
    int[] CoordinatorLayout -> CoordinatorLayout
    int CoordinatorLayout_keylines -> CoordinatorLayout_keylines
    int CoordinatorLayout_statusBarBackground -> CoordinatorLayout_statusBarBackground
    int[] CoordinatorLayout_Layout -> CoordinatorLayout_Layout
    int CoordinatorLayout_Layout_android_layout_gravity -> CoordinatorLayout_Layout_android_layout_gravity
    int CoordinatorLayout_Layout_layout_anchor -> CoordinatorLayout_Layout_layout_anchor
    int CoordinatorLayout_Layout_layout_anchorGravity -> CoordinatorLayout_Layout_layout_anchorGravity
    int CoordinatorLayout_Layout_layout_behavior -> CoordinatorLayout_Layout_layout_behavior
    int CoordinatorLayout_Layout_layout_dodgeInsetEdges -> CoordinatorLayout_Layout_layout_dodgeInsetEdges
    int CoordinatorLayout_Layout_layout_insetEdge -> CoordinatorLayout_Layout_layout_insetEdge
    int CoordinatorLayout_Layout_layout_keyline -> CoordinatorLayout_Layout_layout_keyline
    int[] FontFamily -> FontFamily
    int FontFamily_fontProviderAuthority -> FontFamily_fontProviderAuthority
    int FontFamily_fontProviderCerts -> FontFamily_fontProviderCerts
    int FontFamily_fontProviderFetchStrategy -> FontFamily_fontProviderFetchStrategy
    int FontFamily_fontProviderFetchTimeout -> FontFamily_fontProviderFetchTimeout
    int FontFamily_fontProviderPackage -> FontFamily_fontProviderPackage
    int FontFamily_fontProviderQuery -> FontFamily_fontProviderQuery
    int[] FontFamilyFont -> FontFamilyFont
    int FontFamilyFont_android_font -> FontFamilyFont_android_font
    int FontFamilyFont_android_fontWeight -> FontFamilyFont_android_fontWeight
    int FontFamilyFont_android_fontStyle -> FontFamilyFont_android_fontStyle
    int FontFamilyFont_android_ttcIndex -> FontFamilyFont_android_ttcIndex
    int FontFamilyFont_android_fontVariationSettings -> FontFamilyFont_android_fontVariationSettings
    int FontFamilyFont_font -> FontFamilyFont_font
    int FontFamilyFont_fontStyle -> FontFamilyFont_fontStyle
    int FontFamilyFont_fontVariationSettings -> FontFamilyFont_fontVariationSettings
    int FontFamilyFont_fontWeight -> FontFamilyFont_fontWeight
    int FontFamilyFont_ttcIndex -> FontFamilyFont_ttcIndex
    int[] GradientColor -> GradientColor
    int GradientColor_android_startColor -> GradientColor_android_startColor
    int GradientColor_android_endColor -> GradientColor_android_endColor
    int GradientColor_android_type -> GradientColor_android_type
    int GradientColor_android_centerX -> GradientColor_android_centerX
    int GradientColor_android_centerY -> GradientColor_android_centerY
    int GradientColor_android_gradientRadius -> GradientColor_android_gradientRadius
    int GradientColor_android_tileMode -> GradientColor_android_tileMode
    int GradientColor_android_centerColor -> GradientColor_android_centerColor
    int GradientColor_android_startX -> GradientColor_android_startX
    int GradientColor_android_startY -> GradientColor_android_startY
    int GradientColor_android_endX -> GradientColor_android_endX
    int GradientColor_android_endY -> GradientColor_android_endY
    int[] GradientColorItem -> GradientColorItem
    int GradientColorItem_android_color -> GradientColorItem_android_color
    int GradientColorItem_android_offset -> GradientColorItem_android_offset
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.cloudwebrtc.webrtc.SurfaceTextureRenderer -> com.cloudwebrtc.webrtc.SurfaceTextureRenderer:
    org.webrtc.RendererCommon$RendererEvents rendererEvents -> rendererEvents
    java.lang.Object layoutLock -> layoutLock
    boolean isRenderingPaused -> isRenderingPaused
    boolean isFirstFrameRendered -> isFirstFrameRendered
    int rotatedFrameWidth -> rotatedFrameWidth
    int rotatedFrameHeight -> rotatedFrameHeight
    int frameRotation -> frameRotation
    android.graphics.SurfaceTexture texture -> texture
    void <init>(java.lang.String) -> <init>
    void init(org.webrtc.EglBase$Context,org.webrtc.RendererCommon$RendererEvents) -> init
    void init(org.webrtc.EglBase$Context,org.webrtc.RendererCommon$RendererEvents,int[],org.webrtc.RendererCommon$GlDrawer) -> init
    void init(org.webrtc.EglBase$Context,int[],org.webrtc.RendererCommon$GlDrawer) -> init
    void setFpsReduction(float) -> setFpsReduction
    void disableFpsReduction() -> disableFpsReduction
    void pauseVideo() -> pauseVideo
    void onFrame(org.webrtc.VideoFrame) -> onFrame
    void surfaceCreated(android.graphics.SurfaceTexture) -> surfaceCreated
    void surfaceDestroyed() -> surfaceDestroyed
    void updateFrameDimensionsAndReportEvents(org.webrtc.VideoFrame) -> updateFrameDimensionsAndReportEvents
com.cloudwebrtc.webrtc.SurfaceTextureRenderer$$Lambda$0 -> com.cloudwebrtc.webrtc.SurfaceTextureRenderer$$Lambda$0:
    java.util.concurrent.CountDownLatch arg$1 -> arg$1
    void <init>(java.util.concurrent.CountDownLatch) -> <init>
    java.lang.Runnable get$Lambda(java.util.concurrent.CountDownLatch) -> get$Lambda
    void run() -> run
com.cloudwebrtc.webrtc.record.AudioChannel -> com.cloudwebrtc.webrtc.record.AudioChannel:
    com.cloudwebrtc.webrtc.record.AudioChannel INPUT -> INPUT
    com.cloudwebrtc.webrtc.record.AudioChannel OUTPUT -> OUTPUT
    com.cloudwebrtc.webrtc.record.AudioChannel[] $VALUES -> $VALUES
    com.cloudwebrtc.webrtc.record.AudioChannel[] values() -> values
    com.cloudwebrtc.webrtc.record.AudioChannel valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.cloudwebrtc.webrtc.record.AudioSamplesInterceptor -> com.cloudwebrtc.webrtc.record.AudioSamplesInterceptor:
    java.util.HashMap callbacks -> callbacks
    void <init>() -> <init>
    void onWebRtcAudioRecordSamplesReady(org.webrtc.audio.JavaAudioDeviceModule$AudioSamples) -> onWebRtcAudioRecordSamplesReady
    void attachCallback(java.lang.Integer,org.webrtc.audio.JavaAudioDeviceModule$SamplesReadyCallback) -> attachCallback
    void detachCallback(java.lang.Integer) -> detachCallback
com.cloudwebrtc.webrtc.record.AudioTrackInterceptor -> com.cloudwebrtc.webrtc.record.AudioTrackInterceptor:
    android.media.AudioTrack originalTrack -> originalTrack
    org.webrtc.audio.JavaAudioDeviceModule$SamplesReadyCallback callback -> callback
    void <init>(android.media.AudioTrack,org.webrtc.audio.JavaAudioDeviceModule$SamplesReadyCallback) -> <init>
    int write(byte[],int,int) -> write
    int write(java.nio.ByteBuffer,int,int) -> write
    int getPlayState() -> getPlayState
    void play() -> play
    void stop() -> stop
    int getUnderrunCount() -> getUnderrunCount
    int getBufferCapacityInFrames() -> getBufferCapacityInFrames
    int getBufferSizeInFrames() -> getBufferSizeInFrames
    void release() -> release
    int getPlaybackHeadPosition() -> getPlaybackHeadPosition
com.cloudwebrtc.webrtc.record.FrameCapturer -> com.cloudwebrtc.webrtc.record.FrameCapturer:
    org.webrtc.VideoTrack videoTrack -> videoTrack
    java.io.File file -> file
    io.flutter.plugin.common.MethodChannel$Result callback -> callback
    boolean gotFrame -> gotFrame
    void <init>(org.webrtc.VideoTrack,java.io.File,io.flutter.plugin.common.MethodChannel$Result) -> <init>
    void onFrame(org.webrtc.VideoFrame) -> onFrame
    void lambda$onFrame$0$FrameCapturer() -> lambda$onFrame$0$FrameCapturer
com.cloudwebrtc.webrtc.record.FrameCapturer$$Lambda$0 -> com.cloudwebrtc.webrtc.record.FrameCapturer$$Lambda$0:
    com.cloudwebrtc.webrtc.record.FrameCapturer arg$1 -> arg$1
    void <init>(com.cloudwebrtc.webrtc.record.FrameCapturer) -> <init>
    void run() -> run
com.cloudwebrtc.webrtc.record.MediaRecorderImpl -> com.cloudwebrtc.webrtc.record.MediaRecorderImpl:
    java.lang.Integer id -> id
    org.webrtc.VideoTrack videoTrack -> videoTrack
    com.cloudwebrtc.webrtc.record.AudioSamplesInterceptor audioInterceptor -> audioInterceptor
    com.cloudwebrtc.webrtc.record.VideoFileRenderer videoFileRenderer -> videoFileRenderer
    boolean isRunning -> isRunning
    java.io.File recordFile -> recordFile
    java.lang.String TAG -> TAG
    void <init>(java.lang.Integer,org.webrtc.VideoTrack,com.cloudwebrtc.webrtc.record.AudioSamplesInterceptor) -> <init>
    void startRecording(java.io.File) -> startRecording
    java.io.File getRecordFile() -> getRecordFile
    void stopRecording() -> stopRecording
com.cloudwebrtc.webrtc.record.OutputAudioSamplesInterceptor -> com.cloudwebrtc.webrtc.record.OutputAudioSamplesInterceptor:
    org.webrtc.audio.JavaAudioDeviceModule audioDeviceModule -> audioDeviceModule
    void <init>(org.webrtc.audio.JavaAudioDeviceModule) -> <init>
    void attachCallback(java.lang.Integer,org.webrtc.audio.JavaAudioDeviceModule$SamplesReadyCallback) -> attachCallback
    void detachCallback(java.lang.Integer) -> detachCallback
com.cloudwebrtc.webrtc.record.VideoFileRenderer -> com.cloudwebrtc.webrtc.record.VideoFileRenderer:
    java.lang.String TAG -> TAG
    android.os.HandlerThread renderThread -> renderThread
    android.os.Handler renderThreadHandler -> renderThreadHandler
    android.os.HandlerThread audioThread -> audioThread
    android.os.Handler audioThreadHandler -> audioThreadHandler
    int outputFileWidth -> outputFileWidth
    int outputFileHeight -> outputFileHeight
    java.nio.ByteBuffer[] encoderOutputBuffers -> encoderOutputBuffers
    java.nio.ByteBuffer[] audioInputBuffers -> audioInputBuffers
    java.nio.ByteBuffer[] audioOutputBuffers -> audioOutputBuffers
    org.webrtc.EglBase eglBase -> eglBase
    org.webrtc.EglBase$Context sharedContext -> sharedContext
    org.webrtc.VideoFrameDrawer frameDrawer -> frameDrawer
    java.lang.String MIME_TYPE -> MIME_TYPE
    int FRAME_RATE -> FRAME_RATE
    int IFRAME_INTERVAL -> IFRAME_INTERVAL
    android.media.MediaMuxer mediaMuxer -> mediaMuxer
    android.media.MediaCodec encoder -> encoder
    android.media.MediaCodec$BufferInfo bufferInfo -> bufferInfo
    android.media.MediaCodec$BufferInfo audioBufferInfo -> audioBufferInfo
    int trackIndex -> trackIndex
    int audioTrackIndex -> audioTrackIndex
    boolean isRunning -> isRunning
    org.webrtc.GlRectDrawer drawer -> drawer
    android.view.Surface surface -> surface
    android.media.MediaCodec audioEncoder -> audioEncoder
    boolean encoderStarted -> encoderStarted
    boolean muxerStarted -> muxerStarted
    long videoFrameStart -> videoFrameStart
    long presTime -> presTime
    void <init>(java.lang.String,org.webrtc.EglBase$Context,boolean) -> <init>
    void initVideoEncoder() -> initVideoEncoder
    void onFrame(org.webrtc.VideoFrame) -> onFrame
    void renderFrameOnRenderThread(org.webrtc.VideoFrame) -> renderFrameOnRenderThread
    void release() -> release
    void drainEncoder() -> drainEncoder
    void drainAudio() -> drainAudio
    void onWebRtcAudioRecordSamplesReady(org.webrtc.audio.JavaAudioDeviceModule$AudioSamples) -> onWebRtcAudioRecordSamplesReady
    void lambda$onWebRtcAudioRecordSamplesReady$4$VideoFileRenderer(org.webrtc.audio.JavaAudioDeviceModule$AudioSamples) -> lambda$onWebRtcAudioRecordSamplesReady$4$VideoFileRenderer
    void lambda$release$3$VideoFileRenderer() -> lambda$release$3$VideoFileRenderer
    void lambda$release$2$VideoFileRenderer() -> lambda$release$2$VideoFileRenderer
    void lambda$onFrame$1$VideoFileRenderer(org.webrtc.VideoFrame) -> lambda$onFrame$1$VideoFileRenderer
    void lambda$initVideoEncoder$0$VideoFileRenderer() -> lambda$initVideoEncoder$0$VideoFileRenderer
com.cloudwebrtc.webrtc.record.VideoFileRenderer$$Lambda$0 -> com.cloudwebrtc.webrtc.record.VideoFileRenderer$$Lambda$0:
    com.cloudwebrtc.webrtc.record.VideoFileRenderer arg$1 -> arg$1
    void <init>(com.cloudwebrtc.webrtc.record.VideoFileRenderer) -> <init>
    void run() -> run
com.cloudwebrtc.webrtc.record.VideoFileRenderer$$Lambda$1 -> com.cloudwebrtc.webrtc.record.VideoFileRenderer$$Lambda$1:
    com.cloudwebrtc.webrtc.record.VideoFileRenderer arg$1 -> arg$1
    org.webrtc.VideoFrame arg$2 -> arg$2
    void <init>(com.cloudwebrtc.webrtc.record.VideoFileRenderer,org.webrtc.VideoFrame) -> <init>
    void run() -> run
com.cloudwebrtc.webrtc.record.VideoFileRenderer$$Lambda$2 -> com.cloudwebrtc.webrtc.record.VideoFileRenderer$$Lambda$2:
    com.cloudwebrtc.webrtc.record.VideoFileRenderer arg$1 -> arg$1
    void <init>(com.cloudwebrtc.webrtc.record.VideoFileRenderer) -> <init>
    void run() -> run
com.cloudwebrtc.webrtc.record.VideoFileRenderer$$Lambda$3 -> com.cloudwebrtc.webrtc.record.VideoFileRenderer$$Lambda$3:
    com.cloudwebrtc.webrtc.record.VideoFileRenderer arg$1 -> arg$1
    void <init>(com.cloudwebrtc.webrtc.record.VideoFileRenderer) -> <init>
    void run() -> run
com.cloudwebrtc.webrtc.record.VideoFileRenderer$$Lambda$4 -> com.cloudwebrtc.webrtc.record.VideoFileRenderer$$Lambda$4:
    com.cloudwebrtc.webrtc.record.VideoFileRenderer arg$1 -> arg$1
    org.webrtc.audio.JavaAudioDeviceModule$AudioSamples arg$2 -> arg$2
    void <init>(com.cloudwebrtc.webrtc.record.VideoFileRenderer,org.webrtc.audio.JavaAudioDeviceModule$AudioSamples) -> <init>
    void run() -> run
com.cloudwebrtc.webrtc.utils.AnyThreadResult -> com.cloudwebrtc.webrtc.utils.AnyThreadResult:
    io.flutter.plugin.common.MethodChannel$Result result -> result
    android.os.Handler handler -> handler
    void <init>(io.flutter.plugin.common.MethodChannel$Result) -> <init>
    void success(java.lang.Object) -> success
    void error(java.lang.String,java.lang.String,java.lang.Object) -> error
    void notImplemented() -> notImplemented
    void post(java.lang.Runnable) -> post
    void lambda$error$1$AnyThreadResult(java.lang.String,java.lang.String,java.lang.Object) -> lambda$error$1$AnyThreadResult
    void lambda$success$0$AnyThreadResult(java.lang.Object) -> lambda$success$0$AnyThreadResult
com.cloudwebrtc.webrtc.utils.AnyThreadResult$$Lambda$0 -> com.cloudwebrtc.webrtc.utils.AnyThreadResult$$Lambda$0:
    com.cloudwebrtc.webrtc.utils.AnyThreadResult arg$1 -> arg$1
    java.lang.Object arg$2 -> arg$2
    void <init>(com.cloudwebrtc.webrtc.utils.AnyThreadResult,java.lang.Object) -> <init>
    void run() -> run
com.cloudwebrtc.webrtc.utils.AnyThreadResult$$Lambda$1 -> com.cloudwebrtc.webrtc.utils.AnyThreadResult$$Lambda$1:
    com.cloudwebrtc.webrtc.utils.AnyThreadResult arg$1 -> arg$1
    java.lang.String arg$2 -> arg$2
    java.lang.String arg$3 -> arg$3
    java.lang.Object arg$4 -> arg$4
    void <init>(com.cloudwebrtc.webrtc.utils.AnyThreadResult,java.lang.String,java.lang.String,java.lang.Object) -> <init>
    void run() -> run
com.cloudwebrtc.webrtc.utils.AnyThreadResult$$Lambda$2 -> com.cloudwebrtc.webrtc.utils.AnyThreadResult$$Lambda$2:
    io.flutter.plugin.common.MethodChannel$Result arg$1 -> arg$1
    void <init>(io.flutter.plugin.common.MethodChannel$Result) -> <init>
    java.lang.Runnable get$Lambda(io.flutter.plugin.common.MethodChannel$Result) -> get$Lambda
    void run() -> run
com.cloudwebrtc.webrtc.utils.AnyThreadSink -> com.cloudwebrtc.webrtc.utils.AnyThreadSink:
    io.flutter.plugin.common.EventChannel$EventSink eventSink -> eventSink
    android.os.Handler handler -> handler
    void <init>(io.flutter.plugin.common.EventChannel$EventSink) -> <init>
    void success(java.lang.Object) -> success
    void error(java.lang.String,java.lang.String,java.lang.Object) -> error
    void endOfStream() -> endOfStream
    void post(java.lang.Runnable) -> post
    void lambda$error$1$AnyThreadSink(java.lang.String,java.lang.String,java.lang.Object) -> lambda$error$1$AnyThreadSink
    void lambda$success$0$AnyThreadSink(java.lang.Object) -> lambda$success$0$AnyThreadSink
com.cloudwebrtc.webrtc.utils.AnyThreadSink$$Lambda$0 -> com.cloudwebrtc.webrtc.utils.AnyThreadSink$$Lambda$0:
    com.cloudwebrtc.webrtc.utils.AnyThreadSink arg$1 -> arg$1
    java.lang.Object arg$2 -> arg$2
    void <init>(com.cloudwebrtc.webrtc.utils.AnyThreadSink,java.lang.Object) -> <init>
    void run() -> run
com.cloudwebrtc.webrtc.utils.AnyThreadSink$$Lambda$1 -> com.cloudwebrtc.webrtc.utils.AnyThreadSink$$Lambda$1:
    com.cloudwebrtc.webrtc.utils.AnyThreadSink arg$1 -> arg$1
    java.lang.String arg$2 -> arg$2
    java.lang.String arg$3 -> arg$3
    java.lang.Object arg$4 -> arg$4
    void <init>(com.cloudwebrtc.webrtc.utils.AnyThreadSink,java.lang.String,java.lang.String,java.lang.Object) -> <init>
    void run() -> run
com.cloudwebrtc.webrtc.utils.AnyThreadSink$$Lambda$2 -> com.cloudwebrtc.webrtc.utils.AnyThreadSink$$Lambda$2:
    io.flutter.plugin.common.EventChannel$EventSink arg$1 -> arg$1
    void <init>(io.flutter.plugin.common.EventChannel$EventSink) -> <init>
    java.lang.Runnable get$Lambda(io.flutter.plugin.common.EventChannel$EventSink) -> get$Lambda
    void run() -> run
com.cloudwebrtc.webrtc.utils.Callback -> com.cloudwebrtc.webrtc.utils.Callback:
    void invoke(java.lang.Object[]) -> invoke
com.cloudwebrtc.webrtc.utils.ConstraintsArray -> com.cloudwebrtc.webrtc.utils.ConstraintsArray:
    java.util.ArrayList mArray -> mArray
    void <init>() -> <init>
    void <init>(java.util.ArrayList) -> <init>
    int size() -> size
    boolean isNull(int) -> isNull
    boolean getBoolean(int) -> getBoolean
    double getDouble(int) -> getDouble
    int getInt(int) -> getInt
    java.lang.String getString(int) -> getString
    java.lang.Byte[] getByte(int) -> getByte
    com.cloudwebrtc.webrtc.utils.ConstraintsArray getArray(int) -> getArray
    com.cloudwebrtc.webrtc.utils.ConstraintsMap getMap(int) -> getMap
    com.cloudwebrtc.webrtc.utils.ObjectType getType(int) -> getType
    java.util.ArrayList toArrayList() -> toArrayList
    void pushNull() -> pushNull
    void pushBoolean(boolean) -> pushBoolean
    void pushDouble(double) -> pushDouble
    void pushInt(int) -> pushInt
    void pushString(java.lang.String) -> pushString
    void pushArray(com.cloudwebrtc.webrtc.utils.ConstraintsArray) -> pushArray
    void pushByte(byte[]) -> pushByte
    void pushMap(com.cloudwebrtc.webrtc.utils.ConstraintsMap) -> pushMap
com.cloudwebrtc.webrtc.utils.ConstraintsMap -> com.cloudwebrtc.webrtc.utils.ConstraintsMap:
    java.util.Map mMap -> mMap
    void <init>() -> <init>
    void <init>(java.util.Map) -> <init>
    java.util.Map toMap() -> toMap
    boolean hasKey(java.lang.String) -> hasKey
    boolean isNull(java.lang.String) -> isNull
    boolean getBoolean(java.lang.String) -> getBoolean
    double getDouble(java.lang.String) -> getDouble
    int getInt(java.lang.String) -> getInt
    java.lang.String getString(java.lang.String) -> getString
    com.cloudwebrtc.webrtc.utils.ConstraintsMap getMap(java.lang.String) -> getMap
    com.cloudwebrtc.webrtc.utils.ObjectType getType(java.lang.String) -> getType
    void putBoolean(java.lang.String,boolean) -> putBoolean
    void putDouble(java.lang.String,double) -> putDouble
    void putInt(java.lang.String,int) -> putInt
    void putString(java.lang.String,java.lang.String) -> putString
    void putByte(java.lang.String,byte[]) -> putByte
    void putNull(java.lang.String) -> putNull
    void putMap(java.lang.String,java.util.Map) -> putMap
    void merge(java.util.Map) -> merge
    void putArray(java.lang.String,java.util.ArrayList) -> putArray
    com.cloudwebrtc.webrtc.utils.ConstraintsArray getArray(java.lang.String) -> getArray
    java.util.ArrayList getListArray(java.lang.String) -> getListArray
com.cloudwebrtc.webrtc.utils.EglUtils -> com.cloudwebrtc.webrtc.utils.EglUtils:
    org.webrtc.EglBase rootEglBase -> rootEglBase
    void <init>() -> <init>
    org.webrtc.EglBase getRootEglBase() -> getRootEglBase
    org.webrtc.EglBase$Context getRootEglBaseContext() -> getRootEglBaseContext
com.cloudwebrtc.webrtc.utils.ObjectType -> com.cloudwebrtc.webrtc.utils.ObjectType:
    com.cloudwebrtc.webrtc.utils.ObjectType Null -> Null
    com.cloudwebrtc.webrtc.utils.ObjectType Boolean -> Boolean
    com.cloudwebrtc.webrtc.utils.ObjectType Number -> Number
    com.cloudwebrtc.webrtc.utils.ObjectType String -> String
    com.cloudwebrtc.webrtc.utils.ObjectType Map -> Map
    com.cloudwebrtc.webrtc.utils.ObjectType Array -> Array
    com.cloudwebrtc.webrtc.utils.ObjectType Byte -> Byte
    com.cloudwebrtc.webrtc.utils.ObjectType[] $VALUES -> $VALUES
    com.cloudwebrtc.webrtc.utils.ObjectType[] values() -> values
    com.cloudwebrtc.webrtc.utils.ObjectType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.cloudwebrtc.webrtc.utils.PermissionUtils -> com.cloudwebrtc.webrtc.utils.PermissionUtils:
    java.lang.String GRANT_RESULTS -> GRANT_RESULTS
    java.lang.String PERMISSIONS -> PERMISSIONS
    java.lang.String REQUEST_CODE -> REQUEST_CODE
    java.lang.String RESULT_RECEIVER -> RESULT_RECEIVER
    int requestCode -> requestCode
    void <init>() -> <init>
    void requestPermissions(com.cloudwebrtc.webrtc.FlutterWebRTCPlugin,java.lang.String[],android.os.ResultReceiver) -> requestPermissions
    void requestPermissions(com.cloudwebrtc.webrtc.FlutterWebRTCPlugin,java.lang.String[],com.cloudwebrtc.webrtc.utils.PermissionUtils$Callback) -> requestPermissions
    void send(android.os.ResultReceiver,int,java.lang.String[],int[]) -> send
    void access$000(android.os.ResultReceiver,int,java.lang.String[],int[]) -> access$000
    void access$100(com.cloudwebrtc.webrtc.FlutterWebRTCPlugin,java.lang.String[],android.os.ResultReceiver) -> access$100
com.cloudwebrtc.webrtc.utils.PermissionUtils$1 -> com.cloudwebrtc.webrtc.utils.PermissionUtils$1:
    com.cloudwebrtc.webrtc.utils.PermissionUtils$Callback val$callback -> val$callback
    void <init>(android.os.Handler,com.cloudwebrtc.webrtc.utils.PermissionUtils$Callback) -> <init>
    void onReceiveResult(int,android.os.Bundle) -> onReceiveResult
com.cloudwebrtc.webrtc.utils.PermissionUtils$Callback -> com.cloudwebrtc.webrtc.utils.PermissionUtils$Callback:
    void invoke(java.lang.String[],int[]) -> invoke
com.cloudwebrtc.webrtc.utils.PermissionUtils$RequestPermissionsFragment -> com.cloudwebrtc.webrtc.utils.PermissionUtils$RequestPermissionsFragment:
    com.cloudwebrtc.webrtc.FlutterWebRTCPlugin plugin -> plugin
    void <init>() -> <init>
    void setPlugin(com.cloudwebrtc.webrtc.FlutterWebRTCPlugin) -> setPlugin
    void checkSelfPermissions(boolean) -> checkSelfPermissions
    void finish() -> finish
    void onRequestPermissionsResult(int,java.lang.String[],int[]) -> onRequestPermissionsResult
    void onResume() -> onResume
com.cloudwebrtc.webrtc.utils.RTCAudioManager -> com.cloudwebrtc.webrtc.utils.RTCAudioManager:
    java.lang.String TAG -> TAG
    java.lang.String SPEAKERPHONE_AUTO -> SPEAKERPHONE_AUTO
    java.lang.String SPEAKERPHONE_TRUE -> SPEAKERPHONE_TRUE
    java.lang.String SPEAKERPHONE_FALSE -> SPEAKERPHONE_FALSE
    android.content.Context appContext -> appContext
    android.media.AudioManager audioManager -> audioManager
    com.cloudwebrtc.webrtc.utils.RTCAudioManager$AudioManagerEvents audioManagerEvents -> audioManagerEvents
    com.cloudwebrtc.webrtc.utils.RTCAudioManager$AudioManagerState amState -> amState
    int savedAudioMode -> savedAudioMode
    boolean savedIsSpeakerPhoneOn -> savedIsSpeakerPhoneOn
    boolean savedIsMicrophoneMute -> savedIsMicrophoneMute
    boolean hasWiredHeadset -> hasWiredHeadset
    com.cloudwebrtc.webrtc.utils.RTCAudioManager$AudioDevice defaultAudioDevice -> defaultAudioDevice
    com.cloudwebrtc.webrtc.utils.RTCAudioManager$AudioDevice selectedAudioDevice -> selectedAudioDevice
    com.cloudwebrtc.webrtc.utils.RTCAudioManager$AudioDevice userSelectedAudioDevice -> userSelectedAudioDevice
    java.lang.String useSpeakerphone -> useSpeakerphone
    com.cloudwebrtc.webrtc.utils.RTCProximitySensor proximitySensor -> proximitySensor
    com.cloudwebrtc.webrtc.utils.RTCBluetoothManager bluetoothManager -> bluetoothManager
    java.util.Set audioDevices -> audioDevices
    android.content.BroadcastReceiver wiredHeadsetReceiver -> wiredHeadsetReceiver
    android.media.AudioManager$OnAudioFocusChangeListener audioFocusChangeListener -> audioFocusChangeListener
    void onProximitySensorChangedState() -> onProximitySensorChangedState
    com.cloudwebrtc.webrtc.utils.RTCAudioManager create(android.content.Context) -> create
    void <init>(android.content.Context) -> <init>
    void start(com.cloudwebrtc.webrtc.utils.RTCAudioManager$AudioManagerEvents) -> start
    void stop() -> stop
    void setAudioDeviceInternal(com.cloudwebrtc.webrtc.utils.RTCAudioManager$AudioDevice) -> setAudioDeviceInternal
    void setDefaultAudioDevice(com.cloudwebrtc.webrtc.utils.RTCAudioManager$AudioDevice) -> setDefaultAudioDevice
    void selectAudioDevice(com.cloudwebrtc.webrtc.utils.RTCAudioManager$AudioDevice) -> selectAudioDevice
    java.util.Set getAudioDevices() -> getAudioDevices
    com.cloudwebrtc.webrtc.utils.RTCAudioManager$AudioDevice getSelectedAudioDevice() -> getSelectedAudioDevice
    void registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter) -> registerReceiver
    void unregisterReceiver(android.content.BroadcastReceiver) -> unregisterReceiver
    void setSpeakerphoneOn(boolean) -> setSpeakerphoneOn
    void setMicrophoneMute(boolean) -> setMicrophoneMute
    boolean hasEarpiece() -> hasEarpiece
    boolean hasWiredHeadset() -> hasWiredHeadset
    void updateAudioDeviceState() -> updateAudioDeviceState
    boolean access$002(com.cloudwebrtc.webrtc.utils.RTCAudioManager,boolean) -> access$002
    void bridge$lambda$0$RTCAudioManager() -> bridge$lambda$0$RTCAudioManager
com.cloudwebrtc.webrtc.utils.RTCAudioManager$$Lambda$0 -> com.cloudwebrtc.webrtc.utils.RTCAudioManager$$Lambda$0:
    com.cloudwebrtc.webrtc.utils.RTCAudioManager arg$1 -> arg$1
    void <init>(com.cloudwebrtc.webrtc.utils.RTCAudioManager) -> <init>
    void run() -> run
com.cloudwebrtc.webrtc.utils.RTCAudioManager$1 -> com.cloudwebrtc.webrtc.utils.RTCAudioManager$1:
    com.cloudwebrtc.webrtc.utils.RTCAudioManager this$0 -> this$0
    void <init>(com.cloudwebrtc.webrtc.utils.RTCAudioManager) -> <init>
    void onAudioFocusChange(int) -> onAudioFocusChange
com.cloudwebrtc.webrtc.utils.RTCAudioManager$2 -> com.cloudwebrtc.webrtc.utils.RTCAudioManager$2:
    int[] $SwitchMap$com$cloudwebrtc$webrtc$utils$RTCAudioManager$AudioDevice -> $SwitchMap$com$cloudwebrtc$webrtc$utils$RTCAudioManager$AudioDevice
    void <clinit>() -> <clinit>
com.cloudwebrtc.webrtc.utils.RTCAudioManager$AudioDevice -> com.cloudwebrtc.webrtc.utils.RTCAudioManager$AudioDevice:
    com.cloudwebrtc.webrtc.utils.RTCAudioManager$AudioDevice SPEAKER_PHONE -> SPEAKER_PHONE
    com.cloudwebrtc.webrtc.utils.RTCAudioManager$AudioDevice WIRED_HEADSET -> WIRED_HEADSET
    com.cloudwebrtc.webrtc.utils.RTCAudioManager$AudioDevice EARPIECE -> EARPIECE
    com.cloudwebrtc.webrtc.utils.RTCAudioManager$AudioDevice BLUETOOTH -> BLUETOOTH
    com.cloudwebrtc.webrtc.utils.RTCAudioManager$AudioDevice NONE -> NONE
    com.cloudwebrtc.webrtc.utils.RTCAudioManager$AudioDevice[] $VALUES -> $VALUES
    com.cloudwebrtc.webrtc.utils.RTCAudioManager$AudioDevice[] values() -> values
    com.cloudwebrtc.webrtc.utils.RTCAudioManager$AudioDevice valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.cloudwebrtc.webrtc.utils.RTCAudioManager$AudioManagerEvents -> com.cloudwebrtc.webrtc.utils.RTCAudioManager$AudioManagerEvents:
    void onAudioDeviceChanged(com.cloudwebrtc.webrtc.utils.RTCAudioManager$AudioDevice,java.util.Set) -> onAudioDeviceChanged
com.cloudwebrtc.webrtc.utils.RTCAudioManager$AudioManagerState -> com.cloudwebrtc.webrtc.utils.RTCAudioManager$AudioManagerState:
    com.cloudwebrtc.webrtc.utils.RTCAudioManager$AudioManagerState UNINITIALIZED -> UNINITIALIZED
    com.cloudwebrtc.webrtc.utils.RTCAudioManager$AudioManagerState PREINITIALIZED -> PREINITIALIZED
    com.cloudwebrtc.webrtc.utils.RTCAudioManager$AudioManagerState RUNNING -> RUNNING
    com.cloudwebrtc.webrtc.utils.RTCAudioManager$AudioManagerState[] $VALUES -> $VALUES
    com.cloudwebrtc.webrtc.utils.RTCAudioManager$AudioManagerState[] values() -> values
    com.cloudwebrtc.webrtc.utils.RTCAudioManager$AudioManagerState valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.cloudwebrtc.webrtc.utils.RTCAudioManager$WiredHeadsetReceiver -> com.cloudwebrtc.webrtc.utils.RTCAudioManager$WiredHeadsetReceiver:
    int STATE_UNPLUGGED -> STATE_UNPLUGGED
    int STATE_PLUGGED -> STATE_PLUGGED
    int HAS_NO_MIC -> HAS_NO_MIC
    int HAS_MIC -> HAS_MIC
    com.cloudwebrtc.webrtc.utils.RTCAudioManager this$0 -> this$0
    void <init>(com.cloudwebrtc.webrtc.utils.RTCAudioManager) -> <init>
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
    void <init>(com.cloudwebrtc.webrtc.utils.RTCAudioManager,com.cloudwebrtc.webrtc.utils.RTCAudioManager$1) -> <init>
com.cloudwebrtc.webrtc.utils.RTCBluetoothManager -> com.cloudwebrtc.webrtc.utils.RTCBluetoothManager:
    java.lang.String TAG -> TAG
    int BLUETOOTH_SCO_TIMEOUT_MS -> BLUETOOTH_SCO_TIMEOUT_MS
    int MAX_SCO_CONNECTION_ATTEMPTS -> MAX_SCO_CONNECTION_ATTEMPTS
    android.content.Context apprtcContext -> apprtcContext
    com.cloudwebrtc.webrtc.utils.RTCAudioManager apprtcAudioManager -> apprtcAudioManager
    android.media.AudioManager audioManager -> audioManager
    android.os.Handler handler -> handler
    int scoConnectionAttempts -> scoConnectionAttempts
    com.cloudwebrtc.webrtc.utils.RTCBluetoothManager$State bluetoothState -> bluetoothState
    android.bluetooth.BluetoothProfile$ServiceListener bluetoothServiceListener -> bluetoothServiceListener
    android.bluetooth.BluetoothAdapter bluetoothAdapter -> bluetoothAdapter
    android.bluetooth.BluetoothHeadset bluetoothHeadset -> bluetoothHeadset
    android.bluetooth.BluetoothDevice bluetoothDevice -> bluetoothDevice
    android.content.BroadcastReceiver bluetoothHeadsetReceiver -> bluetoothHeadsetReceiver
    java.lang.Runnable bluetoothTimeoutRunnable -> bluetoothTimeoutRunnable
    com.cloudwebrtc.webrtc.utils.RTCBluetoothManager create(android.content.Context,com.cloudwebrtc.webrtc.utils.RTCAudioManager) -> create
    void <init>(android.content.Context,com.cloudwebrtc.webrtc.utils.RTCAudioManager) -> <init>
    com.cloudwebrtc.webrtc.utils.RTCBluetoothManager$State getState() -> getState
    void start() -> start
    void stop() -> stop
    boolean startScoAudio() -> startScoAudio
    void stopScoAudio() -> stopScoAudio
    void updateDevice() -> updateDevice
    android.media.AudioManager getAudioManager(android.content.Context) -> getAudioManager
    void registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter) -> registerReceiver
    void unregisterReceiver(android.content.BroadcastReceiver) -> unregisterReceiver
    boolean getBluetoothProfileProxy(android.content.Context,android.bluetooth.BluetoothProfile$ServiceListener,int) -> getBluetoothProfileProxy
    boolean hasPermission(android.content.Context,java.lang.String) -> hasPermission
    void logBluetoothAdapterInfo(android.bluetooth.BluetoothAdapter) -> logBluetoothAdapterInfo
    void updateAudioDeviceState() -> updateAudioDeviceState
    void startTimer() -> startTimer
    void cancelTimer() -> cancelTimer
    void bluetoothTimeout() -> bluetoothTimeout
    boolean isScoOn() -> isScoOn
    java.lang.String stateToString(int) -> stateToString
    void access$000(com.cloudwebrtc.webrtc.utils.RTCBluetoothManager) -> access$000
    com.cloudwebrtc.webrtc.utils.RTCBluetoothManager$State access$100(com.cloudwebrtc.webrtc.utils.RTCBluetoothManager) -> access$100
    android.bluetooth.BluetoothHeadset access$202(com.cloudwebrtc.webrtc.utils.RTCBluetoothManager,android.bluetooth.BluetoothHeadset) -> access$202
    void access$300(com.cloudwebrtc.webrtc.utils.RTCBluetoothManager) -> access$300
    android.bluetooth.BluetoothDevice access$402(com.cloudwebrtc.webrtc.utils.RTCBluetoothManager,android.bluetooth.BluetoothDevice) -> access$402
    com.cloudwebrtc.webrtc.utils.RTCBluetoothManager$State access$102(com.cloudwebrtc.webrtc.utils.RTCBluetoothManager,com.cloudwebrtc.webrtc.utils.RTCBluetoothManager$State) -> access$102
    java.lang.String access$500(com.cloudwebrtc.webrtc.utils.RTCBluetoothManager,int) -> access$500
    void access$600(com.cloudwebrtc.webrtc.utils.RTCBluetoothManager) -> access$600
com.cloudwebrtc.webrtc.utils.RTCBluetoothManager$1 -> com.cloudwebrtc.webrtc.utils.RTCBluetoothManager$1:
    com.cloudwebrtc.webrtc.utils.RTCBluetoothManager this$0 -> this$0
    void <init>(com.cloudwebrtc.webrtc.utils.RTCBluetoothManager) -> <init>
    void run() -> run
com.cloudwebrtc.webrtc.utils.RTCBluetoothManager$BluetoothHeadsetBroadcastReceiver -> com.cloudwebrtc.webrtc.utils.RTCBluetoothManager$BluetoothHeadsetBroadcastReceiver:
    com.cloudwebrtc.webrtc.utils.RTCBluetoothManager this$0 -> this$0
    void <init>(com.cloudwebrtc.webrtc.utils.RTCBluetoothManager) -> <init>
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
    void <init>(com.cloudwebrtc.webrtc.utils.RTCBluetoothManager,com.cloudwebrtc.webrtc.utils.RTCBluetoothManager$1) -> <init>
com.cloudwebrtc.webrtc.utils.RTCBluetoothManager$BluetoothServiceListener -> com.cloudwebrtc.webrtc.utils.RTCBluetoothManager$BluetoothServiceListener:
    com.cloudwebrtc.webrtc.utils.RTCBluetoothManager this$0 -> this$0
    void <init>(com.cloudwebrtc.webrtc.utils.RTCBluetoothManager) -> <init>
    void onServiceConnected(int,android.bluetooth.BluetoothProfile) -> onServiceConnected
    void onServiceDisconnected(int) -> onServiceDisconnected
    void <init>(com.cloudwebrtc.webrtc.utils.RTCBluetoothManager,com.cloudwebrtc.webrtc.utils.RTCBluetoothManager$1) -> <init>
com.cloudwebrtc.webrtc.utils.RTCBluetoothManager$State -> com.cloudwebrtc.webrtc.utils.RTCBluetoothManager$State:
    com.cloudwebrtc.webrtc.utils.RTCBluetoothManager$State UNINITIALIZED -> UNINITIALIZED
    com.cloudwebrtc.webrtc.utils.RTCBluetoothManager$State ERROR -> ERROR
    com.cloudwebrtc.webrtc.utils.RTCBluetoothManager$State HEADSET_UNAVAILABLE -> HEADSET_UNAVAILABLE
    com.cloudwebrtc.webrtc.utils.RTCBluetoothManager$State HEADSET_AVAILABLE -> HEADSET_AVAILABLE
    com.cloudwebrtc.webrtc.utils.RTCBluetoothManager$State SCO_DISCONNECTING -> SCO_DISCONNECTING
    com.cloudwebrtc.webrtc.utils.RTCBluetoothManager$State SCO_CONNECTING -> SCO_CONNECTING
    com.cloudwebrtc.webrtc.utils.RTCBluetoothManager$State SCO_CONNECTED -> SCO_CONNECTED
    com.cloudwebrtc.webrtc.utils.RTCBluetoothManager$State[] $VALUES -> $VALUES
    com.cloudwebrtc.webrtc.utils.RTCBluetoothManager$State[] values() -> values
    com.cloudwebrtc.webrtc.utils.RTCBluetoothManager$State valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
com.cloudwebrtc.webrtc.utils.RTCProximitySensor -> com.cloudwebrtc.webrtc.utils.RTCProximitySensor:
    java.lang.String TAG -> TAG
    org.webrtc.ThreadUtils$ThreadChecker threadChecker -> threadChecker
    java.lang.Runnable onSensorStateListener -> onSensorStateListener
    android.hardware.SensorManager sensorManager -> sensorManager
    android.hardware.Sensor proximitySensor -> proximitySensor
    boolean lastStateReportIsNear -> lastStateReportIsNear
    com.cloudwebrtc.webrtc.utils.RTCProximitySensor create(android.content.Context,java.lang.Runnable) -> create
    void <init>(android.content.Context,java.lang.Runnable) -> <init>
    boolean start() -> start
    void stop() -> stop
    boolean sensorReportsNearState() -> sensorReportsNearState
    void onAccuracyChanged(android.hardware.Sensor,int) -> onAccuracyChanged
    void onSensorChanged(android.hardware.SensorEvent) -> onSensorChanged
    boolean initDefaultSensor() -> initDefaultSensor
    void logProximitySensorInfo() -> logProximitySensorInfo
com.cloudwebrtc.webrtc.utils.RTCUtils -> com.cloudwebrtc.webrtc.utils.RTCUtils:
    void <init>() -> <init>
    void assertIsTrue(boolean) -> assertIsTrue
    java.lang.String getThreadInfo() -> getThreadInfo
    void logDeviceInfo(java.lang.String) -> logDeviceInfo
com.google.devtools.build.android.desugar.runtime.ThrowableExtension -> com.a.a.a.a.a.a.a:
    com.google.devtools.build.android.desugar.runtime.ThrowableExtension$AbstractDesugaringStrategy STRATEGY -> a
    int API_LEVEL -> b
    void addSuppressed(java.lang.Throwable,java.lang.Throwable) -> a
    void printStackTrace(java.lang.Throwable,java.io.PrintWriter) -> a
    boolean useMimicStrategy() -> a
    java.lang.Integer readApiLevelFromBuildVersion() -> b
    void <clinit>() -> <clinit>
com.google.devtools.build.android.desugar.runtime.ThrowableExtension$AbstractDesugaringStrategy -> com.a.a.a.a.a.a.a$a:
    java.lang.Throwable[] EMPTY_THROWABLE_ARRAY -> a
    void <init>() -> <init>
    void addSuppressed(java.lang.Throwable,java.lang.Throwable) -> a
    void printStackTrace(java.lang.Throwable,java.io.PrintWriter) -> a
    void <clinit>() -> <clinit>
com.google.devtools.build.android.desugar.runtime.ThrowableExtension$NullDesugaringStrategy -> com.a.a.a.a.a.a.a$b:
    void <init>() -> <init>
    void addSuppressed(java.lang.Throwable,java.lang.Throwable) -> a
    void printStackTrace(java.lang.Throwable,java.io.PrintWriter) -> a
com.google.devtools.build.android.desugar.runtime.ThrowableExtension$ReuseDesugaringStrategy -> com.a.a.a.a.a.a.a$c:
    void <init>() -> <init>
    void addSuppressed(java.lang.Throwable,java.lang.Throwable) -> a
    void printStackTrace(java.lang.Throwable,java.io.PrintWriter) -> a
io.flutter.Log -> io.flutter.a:
    int logLevel -> a
    void v(java.lang.String,java.lang.String) -> a
    void d(java.lang.String,java.lang.String) -> b
    void w(java.lang.String,java.lang.String) -> c
    void e(java.lang.String,java.lang.String,java.lang.Throwable) -> a
    void <clinit>() -> <clinit>
io.flutter.app.FlutterActivity -> io.flutter.app.a:
    io.flutter.app.FlutterActivityDelegate delegate -> a
    io.flutter.app.FlutterActivityEvents eventDelegate -> b
    io.flutter.view.FlutterView$Provider viewProvider -> c
    io.flutter.plugin.common.PluginRegistry pluginRegistry -> d
    void <init>() -> <init>
    io.flutter.view.FlutterView createFlutterView(android.content.Context) -> a
    io.flutter.view.FlutterNativeView createFlutterNativeView() -> a
    boolean retainFlutterNativeView() -> b
    boolean hasPlugin(java.lang.String) -> a
    io.flutter.plugin.common.PluginRegistry$Registrar registrarFor(java.lang.String) -> b
    void onCreate(android.os.Bundle) -> onCreate
    void onStart() -> onStart
    void onResume() -> onResume
    void onDestroy() -> onDestroy
    void onBackPressed() -> onBackPressed
    void onStop() -> onStop
    void onPause() -> onPause
    void onPostResume() -> onPostResume
    void onRequestPermissionsResult(int,java.lang.String[],int[]) -> onRequestPermissionsResult
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onNewIntent(android.content.Intent) -> onNewIntent
    void onUserLeaveHint() -> onUserLeaveHint
    void onTrimMemory(int) -> onTrimMemory
    void onLowMemory() -> onLowMemory
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
io.flutter.app.FlutterActivityDelegate -> io.flutter.app.b:
    android.view.WindowManager$LayoutParams matchParent -> a
    android.app.Activity activity -> b
    io.flutter.app.FlutterActivityDelegate$ViewFactory viewFactory -> c
    io.flutter.view.FlutterView flutterView -> d
    android.view.View launchView -> e
    void <init>(android.app.Activity,io.flutter.app.FlutterActivityDelegate$ViewFactory) -> <init>
    boolean hasPlugin(java.lang.String) -> a
    io.flutter.plugin.common.PluginRegistry$Registrar registrarFor(java.lang.String) -> b
    boolean onRequestPermissionsResult(int,java.lang.String[],int[]) -> a
    boolean onActivityResult(int,int,android.content.Intent) -> a
    void onCreate(android.os.Bundle) -> a
    void onNewIntent(android.content.Intent) -> a
    boolean isDebuggable() -> i
    void onPause() -> a
    void onStart() -> b
    void onResume() -> c
    void onStop() -> d
    void onPostResume() -> e
    void onDestroy() -> f
    boolean onBackPressed() -> g
    void onUserLeaveHint() -> h
    void onTrimMemory(int) -> onTrimMemory
    void onLowMemory() -> onLowMemory
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    java.lang.String[] getArgsFromIntent(android.content.Intent) -> b
    boolean loadIntent(android.content.Intent) -> c
    void runBundle(java.lang.String) -> c
    android.view.View createLaunchView() -> j
    android.graphics.drawable.Drawable getLaunchScreenDrawableFromActivityTheme() -> k
    java.lang.Boolean showSplashScreenUntilFirstFrame() -> l
    void addLaunchView() -> m
    android.view.View access$000(io.flutter.app.FlutterActivityDelegate) -> a
    android.view.View access$002(io.flutter.app.FlutterActivityDelegate,android.view.View) -> a
    io.flutter.view.FlutterView access$100(io.flutter.app.FlutterActivityDelegate) -> b
    void <clinit>() -> <clinit>
io.flutter.app.FlutterActivityDelegate$1 -> io.flutter.app.b$1:
    io.flutter.app.FlutterActivityDelegate this$0 -> a
    void <init>(io.flutter.app.FlutterActivityDelegate) -> <init>
    void onFirstFrame() -> a
io.flutter.app.FlutterActivityDelegate$1$1 -> io.flutter.app.b$1$1:
    io.flutter.app.FlutterActivityDelegate$1 this$1 -> a
    void <init>(io.flutter.app.FlutterActivityDelegate$1) -> <init>
    void onAnimationEnd(android.animation.Animator) -> onAnimationEnd
io.flutter.app.FlutterActivityDelegate$ViewFactory -> io.flutter.app.b$a:
    io.flutter.view.FlutterView createFlutterView(android.content.Context) -> a
    io.flutter.view.FlutterNativeView createFlutterNativeView() -> a
    boolean retainFlutterNativeView() -> b
io.flutter.app.FlutterActivityEvents -> io.flutter.app.c:
    void onCreate(android.os.Bundle) -> a
    void onNewIntent(android.content.Intent) -> a
    void onPause() -> a
    void onStart() -> b
    void onResume() -> c
    void onPostResume() -> e
    void onDestroy() -> f
    void onStop() -> d
    boolean onBackPressed() -> g
    void onUserLeaveHint() -> h
io.flutter.app.FlutterApplication -> io.flutter.app.FlutterApplication:
    android.app.Activity mCurrentActivity -> a
    void <init>() -> <init>
    void onCreate() -> onCreate
    android.app.Activity getCurrentActivity() -> a
    void setCurrentActivity(android.app.Activity) -> a
io.flutter.app.FlutterPluginRegistry -> io.flutter.app.d:
    android.app.Activity mActivity -> a
    android.content.Context mAppContext -> b
    io.flutter.view.FlutterNativeView mNativeView -> c
    io.flutter.view.FlutterView mFlutterView -> d
    io.flutter.plugin.platform.PlatformViewsController mPlatformViewsController -> e
    java.util.Map mPluginMap -> f
    java.util.List mRequestPermissionsResultListeners -> g
    java.util.List mActivityResultListeners -> h
    java.util.List mNewIntentListeners -> i
    java.util.List mUserLeaveHintListeners -> j
    java.util.List mViewDestroyListeners -> k
    void <init>(io.flutter.view.FlutterNativeView,android.content.Context) -> <init>
    boolean hasPlugin(java.lang.String) -> a
    io.flutter.plugin.common.PluginRegistry$Registrar registrarFor(java.lang.String) -> b
    void attach(io.flutter.view.FlutterView,android.app.Activity) -> a
    void detach() -> a
    void onPreEngineRestart() -> b
    io.flutter.plugin.platform.PlatformViewsController getPlatformViewsController() -> c
    boolean onRequestPermissionsResult(int,java.lang.String[],int[]) -> a
    boolean onActivityResult(int,int,android.content.Intent) -> a
    boolean onNewIntent(android.content.Intent) -> a
    void onUserLeaveHint() -> d
    boolean onViewDestroy(io.flutter.view.FlutterNativeView) -> a
    void destroy() -> e
    android.app.Activity access$000(io.flutter.app.FlutterPluginRegistry) -> a
    android.content.Context access$100(io.flutter.app.FlutterPluginRegistry) -> b
    io.flutter.view.FlutterNativeView access$200(io.flutter.app.FlutterPluginRegistry) -> c
    io.flutter.view.FlutterView access$300(io.flutter.app.FlutterPluginRegistry) -> d
io.flutter.app.FlutterPluginRegistry$FlutterRegistrar -> io.flutter.app.d$a:
    java.lang.String pluginKey -> b
    io.flutter.app.FlutterPluginRegistry this$0 -> a
    void <init>(io.flutter.app.FlutterPluginRegistry,java.lang.String) -> <init>
    android.app.Activity activity() -> a
    android.content.Context context() -> b
    io.flutter.plugin.common.BinaryMessenger messenger() -> c
    io.flutter.view.TextureRegistry textures() -> d
io.flutter.embedding.android.AndroidKeyProcessor -> io.flutter.embedding.a.a:
    io.flutter.embedding.engine.systemchannels.KeyEventChannel keyEventChannel -> a
    io.flutter.plugin.editing.TextInputPlugin textInputPlugin -> b
    int combiningCharacter -> c
    void <init>(io.flutter.embedding.engine.systemchannels.KeyEventChannel,io.flutter.plugin.editing.TextInputPlugin) -> <init>
    void onKeyUp(android.view.KeyEvent) -> a
    void onKeyDown(android.view.KeyEvent) -> b
    java.lang.Character applyCombiningCharacterToBaseCharacter(int) -> a
io.flutter.embedding.android.AndroidTouchProcessor -> io.flutter.embedding.a.b:
    io.flutter.embedding.engine.renderer.FlutterRenderer renderer -> a
    void <init>(io.flutter.embedding.engine.renderer.FlutterRenderer) -> <init>
    boolean onTouchEvent(android.view.MotionEvent) -> a
    boolean onGenericMotionEvent(android.view.MotionEvent) -> b
    void addPointerForIndex(android.view.MotionEvent,int,int,int,java.nio.ByteBuffer) -> a
    int getPointerChangeForAction(int) -> a
    int getPointerDeviceTypeForToolType(int) -> b
io.flutter.embedding.engine.FlutterEngine -> io.flutter.embedding.engine.a:
io.flutter.embedding.engine.FlutterEngine$EngineLifecycleListener -> io.flutter.embedding.engine.a$a:
    void onPreEngineRestart() -> a
io.flutter.embedding.engine.FlutterJNI -> io.flutter.embedding.engine.FlutterJNI:
    java.lang.String TAG -> TAG
    io.flutter.embedding.engine.FlutterJNI$AsyncWaitForVsyncDelegate asyncWaitForVsyncDelegate -> asyncWaitForVsyncDelegate
    float refreshRateFPS -> refreshRateFPS
    java.lang.String observatoryUri -> observatoryUri
    java.lang.Long nativePlatformViewId -> nativePlatformViewId
    io.flutter.embedding.engine.FlutterJNI$AccessibilityDelegate accessibilityDelegate -> accessibilityDelegate
    io.flutter.embedding.engine.dart.PlatformMessageHandler platformMessageHandler -> platformMessageHandler
    java.util.Set engineLifecycleListeners -> engineLifecycleListeners
    java.util.Set flutterUiDisplayListeners -> flutterUiDisplayListeners
    android.os.Looper mainLooper -> mainLooper
    void nativeInit(android.content.Context,java.lang.String[],java.lang.String,java.lang.String,java.lang.String) -> nativeInit
    void nativeRecordStartTimestamp(long) -> nativeRecordStartTimestamp
    boolean nativeGetIsSoftwareRenderingEnabled() -> nativeGetIsSoftwareRenderingEnabled
    java.lang.String getObservatoryUri() -> getObservatoryUri
    void setRefreshRateFPS(float) -> setRefreshRateFPS
    void setAsyncWaitForVsyncDelegate(io.flutter.embedding.engine.FlutterJNI$AsyncWaitForVsyncDelegate) -> setAsyncWaitForVsyncDelegate
    void asyncWaitForVsync(long) -> asyncWaitForVsync
    void nativeOnVsync(long,long,long) -> nativeOnVsync
    io.flutter.view.FlutterCallbackInformation nativeLookupCallbackInformation(long) -> nativeLookupCallbackInformation
    void <init>() -> <init>
    boolean isAttached() -> isAttached
    void attachToNative(boolean) -> attachToNative
    long nativeAttach(io.flutter.embedding.engine.FlutterJNI,boolean) -> nativeAttach
    void detachFromNativeAndReleaseResources() -> detachFromNativeAndReleaseResources
    void nativeDestroy(long) -> nativeDestroy
    void ensureNotAttachedToNative() -> ensureNotAttachedToNative
    void ensureAttachedToNative() -> ensureAttachedToNative
    void addIsDisplayingFlutterUiListener(io.flutter.embedding.engine.renderer.FlutterUiDisplayListener) -> addIsDisplayingFlutterUiListener
    void removeIsDisplayingFlutterUiListener(io.flutter.embedding.engine.renderer.FlutterUiDisplayListener) -> removeIsDisplayingFlutterUiListener
    void onFirstFrame() -> onFirstFrame
    void onRenderingStopped() -> onRenderingStopped
    void onSurfaceCreated(android.view.Surface) -> onSurfaceCreated
    void nativeSurfaceCreated(long,android.view.Surface) -> nativeSurfaceCreated
    void onSurfaceChanged(int,int) -> onSurfaceChanged
    void nativeSurfaceChanged(long,int,int) -> nativeSurfaceChanged
    void onSurfaceDestroyed() -> onSurfaceDestroyed
    void nativeSurfaceDestroyed(long) -> nativeSurfaceDestroyed
    void setViewportMetrics(float,int,int,int,int,int,int,int,int,int,int,int,int,int,int) -> setViewportMetrics
    void nativeSetViewportMetrics(long,float,int,int,int,int,int,int,int,int,int,int,int,int,int,int) -> nativeSetViewportMetrics
    void dispatchPointerDataPacket(java.nio.ByteBuffer,int) -> dispatchPointerDataPacket
    void nativeDispatchPointerDataPacket(long,java.nio.ByteBuffer,int) -> nativeDispatchPointerDataPacket
    void setAccessibilityDelegate(io.flutter.embedding.engine.FlutterJNI$AccessibilityDelegate) -> setAccessibilityDelegate
    void updateSemantics(java.nio.ByteBuffer,java.lang.String[]) -> updateSemantics
    void updateCustomAccessibilityActions(java.nio.ByteBuffer,java.lang.String[]) -> updateCustomAccessibilityActions
    void dispatchSemanticsAction(int,io.flutter.view.AccessibilityBridge$Action) -> dispatchSemanticsAction
    void dispatchSemanticsAction(int,io.flutter.view.AccessibilityBridge$Action,java.lang.Object) -> dispatchSemanticsAction
    void dispatchSemanticsAction(int,int,java.nio.ByteBuffer,int) -> dispatchSemanticsAction
    void nativeDispatchSemanticsAction(long,int,int,java.nio.ByteBuffer,int) -> nativeDispatchSemanticsAction
    void setSemanticsEnabled(boolean) -> setSemanticsEnabled
    void nativeSetSemanticsEnabled(long,boolean) -> nativeSetSemanticsEnabled
    void setAccessibilityFeatures(int) -> setAccessibilityFeatures
    void nativeSetAccessibilityFeatures(long,int) -> nativeSetAccessibilityFeatures
    void registerTexture(long,android.graphics.SurfaceTexture) -> registerTexture
    void nativeRegisterTexture(long,long,android.graphics.SurfaceTexture) -> nativeRegisterTexture
    void markTextureFrameAvailable(long) -> markTextureFrameAvailable
    void nativeMarkTextureFrameAvailable(long,long) -> nativeMarkTextureFrameAvailable
    void unregisterTexture(long) -> unregisterTexture
    void nativeUnregisterTexture(long,long) -> nativeUnregisterTexture
    void runBundleAndSnapshotFromLibrary(java.lang.String,java.lang.String,java.lang.String,android.content.res.AssetManager) -> runBundleAndSnapshotFromLibrary
    void nativeRunBundleAndSnapshotFromLibrary(long,java.lang.String,java.lang.String,java.lang.String,android.content.res.AssetManager) -> nativeRunBundleAndSnapshotFromLibrary
    void setPlatformMessageHandler(io.flutter.embedding.engine.dart.PlatformMessageHandler) -> setPlatformMessageHandler
    void handlePlatformMessage(java.lang.String,byte[],int) -> handlePlatformMessage
    void handlePlatformMessageResponse(int,byte[]) -> handlePlatformMessageResponse
    void dispatchEmptyPlatformMessage(java.lang.String,int) -> dispatchEmptyPlatformMessage
    void nativeDispatchEmptyPlatformMessage(long,java.lang.String,int) -> nativeDispatchEmptyPlatformMessage
    void dispatchPlatformMessage(java.lang.String,java.nio.ByteBuffer,int,int) -> dispatchPlatformMessage
    void nativeDispatchPlatformMessage(long,java.lang.String,java.nio.ByteBuffer,int,int) -> nativeDispatchPlatformMessage
    void invokePlatformMessageEmptyResponseCallback(int) -> invokePlatformMessageEmptyResponseCallback
    void nativeInvokePlatformMessageEmptyResponseCallback(long,int) -> nativeInvokePlatformMessageEmptyResponseCallback
    void invokePlatformMessageResponseCallback(int,java.nio.ByteBuffer,int) -> invokePlatformMessageResponseCallback
    void nativeInvokePlatformMessageResponseCallback(long,int,java.nio.ByteBuffer,int) -> nativeInvokePlatformMessageResponseCallback
    void addEngineLifecycleListener(io.flutter.embedding.engine.FlutterEngine$EngineLifecycleListener) -> addEngineLifecycleListener
    void removeEngineLifecycleListener(io.flutter.embedding.engine.FlutterEngine$EngineLifecycleListener) -> removeEngineLifecycleListener
    void onPreEngineRestart() -> onPreEngineRestart
    android.graphics.Bitmap getBitmap() -> getBitmap
    android.graphics.Bitmap nativeGetBitmap(long) -> nativeGetBitmap
    void ensureRunningOnMainThread() -> ensureRunningOnMainThread
    void <clinit>() -> <clinit>
io.flutter.embedding.engine.FlutterJNI$AccessibilityDelegate -> io.flutter.embedding.engine.FlutterJNI$a:
    void updateCustomAccessibilityActions(java.nio.ByteBuffer,java.lang.String[]) -> a
    void updateSemantics(java.nio.ByteBuffer,java.lang.String[]) -> b
io.flutter.embedding.engine.FlutterJNI$AsyncWaitForVsyncDelegate -> io.flutter.embedding.engine.FlutterJNI$b:
    void asyncWaitForVsync(long) -> a
io.flutter.embedding.engine.dart.DartExecutor -> io.flutter.embedding.engine.a.a:
    io.flutter.embedding.engine.FlutterJNI flutterJNI -> a
    android.content.res.AssetManager assetManager -> b
    io.flutter.embedding.engine.dart.DartMessenger dartMessenger -> c
    io.flutter.plugin.common.BinaryMessenger binaryMessenger -> d
    boolean isApplicationRunning -> e
    java.lang.String isolateServiceId -> f
    io.flutter.embedding.engine.dart.DartExecutor$IsolateServiceIdListener isolateServiceIdListener -> g
    io.flutter.plugin.common.BinaryMessenger$BinaryMessageHandler isolateChannelMessageHandler -> h
    void <init>(io.flutter.embedding.engine.FlutterJNI,android.content.res.AssetManager) -> <init>
    void onAttachedToJNI() -> a
    void onDetachedFromJNI() -> b
    io.flutter.plugin.common.BinaryMessenger getBinaryMessenger() -> c
    void send(java.lang.String,java.nio.ByteBuffer) -> a
    void send(java.lang.String,java.nio.ByteBuffer,io.flutter.plugin.common.BinaryMessenger$BinaryReply) -> a
    void setMessageHandler(java.lang.String,io.flutter.plugin.common.BinaryMessenger$BinaryMessageHandler) -> a
    java.lang.String access$002(io.flutter.embedding.engine.dart.DartExecutor,java.lang.String) -> a
    io.flutter.embedding.engine.dart.DartExecutor$IsolateServiceIdListener access$100(io.flutter.embedding.engine.dart.DartExecutor) -> a
    java.lang.String access$000(io.flutter.embedding.engine.dart.DartExecutor) -> b
io.flutter.embedding.engine.dart.DartExecutor$1 -> io.flutter.embedding.engine.a.a$1:
    io.flutter.embedding.engine.dart.DartExecutor this$0 -> a
    void <init>(io.flutter.embedding.engine.dart.DartExecutor) -> <init>
    void onMessage(java.nio.ByteBuffer,io.flutter.plugin.common.BinaryMessenger$BinaryReply) -> a
io.flutter.embedding.engine.dart.DartExecutor$DefaultBinaryMessenger -> io.flutter.embedding.engine.a.a$a:
    io.flutter.embedding.engine.dart.DartMessenger messenger -> a
    void <init>(io.flutter.embedding.engine.dart.DartMessenger) -> <init>
    void send(java.lang.String,java.nio.ByteBuffer) -> a
    void send(java.lang.String,java.nio.ByteBuffer,io.flutter.plugin.common.BinaryMessenger$BinaryReply) -> a
    void setMessageHandler(java.lang.String,io.flutter.plugin.common.BinaryMessenger$BinaryMessageHandler) -> a
    void <init>(io.flutter.embedding.engine.dart.DartMessenger,io.flutter.embedding.engine.dart.DartExecutor$1) -> <init>
io.flutter.embedding.engine.dart.DartExecutor$IsolateServiceIdListener -> io.flutter.embedding.engine.a.a$b:
    void onIsolateServiceIdAvailable(java.lang.String) -> a
io.flutter.embedding.engine.dart.DartMessenger -> io.flutter.embedding.engine.a.b:
    io.flutter.embedding.engine.FlutterJNI flutterJNI -> a
    java.util.Map messageHandlers -> b
    java.util.Map pendingReplies -> c
    int nextReplyId -> d
    void <init>(io.flutter.embedding.engine.FlutterJNI) -> <init>
    void setMessageHandler(java.lang.String,io.flutter.plugin.common.BinaryMessenger$BinaryMessageHandler) -> a
    void send(java.lang.String,java.nio.ByteBuffer) -> a
    void send(java.lang.String,java.nio.ByteBuffer,io.flutter.plugin.common.BinaryMessenger$BinaryReply) -> a
    void handleMessageFromDart(java.lang.String,byte[],int) -> a
    void handlePlatformMessageResponse(int,byte[]) -> a
io.flutter.embedding.engine.dart.DartMessenger$Reply -> io.flutter.embedding.engine.a.b$a:
    io.flutter.embedding.engine.FlutterJNI flutterJNI -> a
    int replyId -> b
    java.util.concurrent.atomic.AtomicBoolean done -> c
    void <init>(io.flutter.embedding.engine.FlutterJNI,int) -> <init>
    void reply(java.nio.ByteBuffer) -> a
io.flutter.embedding.engine.dart.PlatformMessageHandler -> io.flutter.embedding.engine.a.c:
    void handleMessageFromDart(java.lang.String,byte[],int) -> a
    void handlePlatformMessageResponse(int,byte[]) -> a
io.flutter.embedding.engine.loader.FlutterLoader -> io.flutter.embedding.engine.b.a:
    java.lang.String PUBLIC_AOT_SHARED_LIBRARY_NAME -> a
    java.lang.String PUBLIC_VM_SNAPSHOT_DATA_KEY -> b
    java.lang.String PUBLIC_ISOLATE_SNAPSHOT_DATA_KEY -> c
    java.lang.String PUBLIC_FLUTTER_ASSETS_DIR_KEY -> d
    java.lang.String aotSharedLibraryName -> e
    java.lang.String vmSnapshotData -> f
    java.lang.String isolateSnapshotData -> g
    java.lang.String flutterAssetsDir -> h
    io.flutter.embedding.engine.loader.FlutterLoader instance -> i
    boolean initialized -> j
    io.flutter.embedding.engine.loader.ResourceExtractor resourceExtractor -> k
    io.flutter.embedding.engine.loader.FlutterLoader$Settings settings -> l
    void <init>() -> <init>
    io.flutter.embedding.engine.loader.FlutterLoader getInstance() -> a
    void startInitialization(android.content.Context) -> a
    void startInitialization(android.content.Context,io.flutter.embedding.engine.loader.FlutterLoader$Settings) -> a
    void ensureInitializationComplete(android.content.Context,java.lang.String[]) -> a
    android.content.pm.ApplicationInfo getApplicationInfo(android.content.Context) -> b
    void initConfig(android.content.Context) -> c
    void initResources(android.content.Context) -> d
    java.lang.String findAppBundlePath() -> b
    void <clinit>() -> <clinit>
io.flutter.embedding.engine.loader.FlutterLoader$Settings -> io.flutter.embedding.engine.b.a$a:
    java.lang.String logTag -> a
    void <init>() -> <init>
    java.lang.String getLogTag() -> a
io.flutter.embedding.engine.loader.ResourceCleaner -> io.flutter.embedding.engine.b.b:
    android.content.Context mContext -> a
    void <init>(android.content.Context) -> <init>
    void start() -> a
io.flutter.embedding.engine.loader.ResourceCleaner$1 -> io.flutter.embedding.engine.b.b$1:
    io.flutter.embedding.engine.loader.ResourceCleaner this$0 -> a
    void <init>(io.flutter.embedding.engine.loader.ResourceCleaner) -> <init>
    boolean accept(java.io.File,java.lang.String) -> accept
io.flutter.embedding.engine.loader.ResourceCleaner$2 -> io.flutter.embedding.engine.b.b$2:
    io.flutter.embedding.engine.loader.ResourceCleaner$CleanTask val$task -> a
    io.flutter.embedding.engine.loader.ResourceCleaner this$0 -> b
    void <init>(io.flutter.embedding.engine.loader.ResourceCleaner,io.flutter.embedding.engine.loader.ResourceCleaner$CleanTask) -> <init>
    void run() -> run
io.flutter.embedding.engine.loader.ResourceCleaner$CleanTask -> io.flutter.embedding.engine.b.b$a:
    java.io.File[] mFilesToDelete -> a
    void <init>(java.io.File[]) -> <init>
    boolean hasFilesToDelete() -> a
    java.lang.Void doInBackground(java.lang.Void[]) -> a
    void deleteRecursively(java.io.File) -> a
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
io.flutter.embedding.engine.loader.ResourceExtractor -> io.flutter.embedding.engine.b.c:
    java.lang.String[] SUPPORTED_ABIS -> a
    java.lang.String mDataDirPath -> b
    java.util.HashSet mResources -> c
    io.flutter.embedding.engine.loader.ResourceExtractor$ExtractTask mExtractTask -> d
    long getVersionCode(android.content.pm.PackageInfo) -> a
    void waitForCompletion() -> a
    java.lang.String[] getExistingTimestamps(java.io.File) -> a
    void deleteFiles(java.lang.String,java.util.HashSet) -> b
    java.lang.String checkTimestamp(java.io.File,android.content.pm.PackageManager,java.lang.String) -> b
    void copy(java.io.InputStream,java.io.OutputStream) -> b
    java.lang.String[] getSupportedAbis() -> b
    java.lang.String access$000(java.io.File,android.content.pm.PackageManager,java.lang.String) -> a
    void access$100(java.lang.String,java.util.HashSet) -> a
    void access$200(java.io.InputStream,java.io.OutputStream) -> a
    void <clinit>() -> <clinit>
io.flutter.embedding.engine.loader.ResourceExtractor$1 -> io.flutter.embedding.engine.b.c$1:
    void <init>() -> <init>
    boolean accept(java.io.File,java.lang.String) -> accept
io.flutter.embedding.engine.loader.ResourceExtractor$ExtractTask -> io.flutter.embedding.engine.b.c$a:
    java.lang.String mDataDirPath -> a
    java.util.HashSet mResources -> b
    android.content.res.AssetManager mAssetManager -> c
    java.lang.String mPackageName -> d
    android.content.pm.PackageManager mPackageManager -> e
    java.lang.Void doInBackground(java.lang.Void[]) -> a
    boolean extractAPK(java.io.File) -> a
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
io.flutter.embedding.engine.plugins.lifecycle.HiddenLifecycleReference -> io.flutter.embedding.engine.plugins.lifecycle.HiddenLifecycleReference:
    android.arch.lifecycle.Lifecycle lifecycle -> lifecycle
    void <init>(android.arch.lifecycle.Lifecycle) -> <init>
    android.arch.lifecycle.Lifecycle getLifecycle() -> getLifecycle
io.flutter.embedding.engine.renderer.FlutterRenderer -> io.flutter.embedding.engine.c.a:
    io.flutter.embedding.engine.FlutterJNI flutterJNI -> a
    java.util.concurrent.atomic.AtomicLong nextTextureId -> b
    boolean isDisplayingFlutterUi -> c
    io.flutter.embedding.engine.renderer.FlutterUiDisplayListener flutterUiDisplayListener -> d
    void <init>(io.flutter.embedding.engine.FlutterJNI) -> <init>
    io.flutter.view.TextureRegistry$SurfaceTextureEntry createSurfaceTexture() -> a
    void dispatchPointerDataPacket(java.nio.ByteBuffer,int) -> a
    void registerTexture(long,android.graphics.SurfaceTexture) -> a
    void markTextureFrameAvailable(long) -> a
    void unregisterTexture(long) -> b
    boolean access$002(io.flutter.embedding.engine.renderer.FlutterRenderer,boolean) -> a
    void access$300(io.flutter.embedding.engine.renderer.FlutterRenderer,long) -> a
    void access$400(io.flutter.embedding.engine.renderer.FlutterRenderer,long) -> b
io.flutter.embedding.engine.renderer.FlutterRenderer$1 -> io.flutter.embedding.engine.c.a$1:
    io.flutter.embedding.engine.renderer.FlutterRenderer this$0 -> a
    void <init>(io.flutter.embedding.engine.renderer.FlutterRenderer) -> <init>
    void onFlutterUiDisplayed() -> a
    void onFlutterUiNoLongerDisplayed() -> b
io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry -> io.flutter.embedding.engine.c.a$a:
    long id -> b
    android.graphics.SurfaceTexture surfaceTexture -> c
    boolean released -> d
    android.graphics.SurfaceTexture$OnFrameAvailableListener onFrameListener -> e
    io.flutter.embedding.engine.renderer.FlutterRenderer this$0 -> a
    void <init>(io.flutter.embedding.engine.renderer.FlutterRenderer,long,android.graphics.SurfaceTexture) -> <init>
    android.graphics.SurfaceTexture surfaceTexture() -> a
    long id() -> b
    void release() -> c
    boolean access$100(io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry) -> a
    long access$200(io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry) -> b
io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry$1 -> io.flutter.embedding.engine.c.a$a$1:
    io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry this$1 -> a
    void <init>(io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry) -> <init>
    void onFrameAvailable(android.graphics.SurfaceTexture) -> onFrameAvailable
io.flutter.embedding.engine.renderer.FlutterUiDisplayListener -> io.flutter.embedding.engine.c.b:
    void onFlutterUiDisplayed() -> a
    void onFlutterUiNoLongerDisplayed() -> b
io.flutter.embedding.engine.systemchannels.AccessibilityChannel -> io.flutter.embedding.engine.d.a:
    io.flutter.plugin.common.BasicMessageChannel channel -> a
    io.flutter.embedding.engine.FlutterJNI flutterJNI -> b
    io.flutter.embedding.engine.systemchannels.AccessibilityChannel$AccessibilityMessageHandler handler -> c
    io.flutter.plugin.common.BasicMessageChannel$MessageHandler parsingMessageHandler -> d
    void <init>(io.flutter.embedding.engine.dart.DartExecutor,io.flutter.embedding.engine.FlutterJNI) -> <init>
    void onAndroidAccessibilityEnabled() -> a
    void onAndroidAccessibilityDisabled() -> b
    void setAccessibilityFeatures(int) -> a
    void dispatchSemanticsAction(int,io.flutter.view.AccessibilityBridge$Action) -> a
    void dispatchSemanticsAction(int,io.flutter.view.AccessibilityBridge$Action,java.lang.Object) -> a
    void setAccessibilityMessageHandler(io.flutter.embedding.engine.systemchannels.AccessibilityChannel$AccessibilityMessageHandler) -> a
    io.flutter.embedding.engine.systemchannels.AccessibilityChannel$AccessibilityMessageHandler access$000(io.flutter.embedding.engine.systemchannels.AccessibilityChannel) -> a
io.flutter.embedding.engine.systemchannels.AccessibilityChannel$1 -> io.flutter.embedding.engine.d.a$1:
    io.flutter.embedding.engine.systemchannels.AccessibilityChannel this$0 -> a
    void <init>(io.flutter.embedding.engine.systemchannels.AccessibilityChannel) -> <init>
    void onMessage(java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply) -> a
io.flutter.embedding.engine.systemchannels.AccessibilityChannel$AccessibilityMessageHandler -> io.flutter.embedding.engine.d.a$a:
    void announce(java.lang.String) -> a
    void onTap(int) -> a
    void onLongPress(int) -> b
    void onTooltip(java.lang.String) -> b
io.flutter.embedding.engine.systemchannels.KeyEventChannel -> io.flutter.embedding.engine.d.b:
    io.flutter.plugin.common.BasicMessageChannel channel -> a
    void <init>(io.flutter.embedding.engine.dart.DartExecutor) -> <init>
    void keyUp(io.flutter.embedding.engine.systemchannels.KeyEventChannel$FlutterKeyEvent) -> a
    void keyDown(io.flutter.embedding.engine.systemchannels.KeyEventChannel$FlutterKeyEvent) -> b
    void encodeKeyEvent(io.flutter.embedding.engine.systemchannels.KeyEventChannel$FlutterKeyEvent,java.util.Map) -> a
io.flutter.embedding.engine.systemchannels.KeyEventChannel$FlutterKeyEvent -> io.flutter.embedding.engine.d.b$a:
    int deviceId -> a
    int flags -> b
    int plainCodePoint -> c
    int codePoint -> d
    int keyCode -> e
    java.lang.Character complexCharacter -> f
    int scanCode -> g
    int metaState -> h
    int source -> i
    int vendorId -> j
    int productId -> k
    int repeatCount -> l
    void <init>(android.view.KeyEvent,java.lang.Character) -> <init>
    void <init>(int,int,int,int,int,java.lang.Character,int,int,int,int) -> <init>
io.flutter.embedding.engine.systemchannels.LifecycleChannel -> io.flutter.embedding.engine.d.c:
    io.flutter.plugin.common.BasicMessageChannel channel -> a
    void <init>(io.flutter.embedding.engine.dart.DartExecutor) -> <init>
    void appIsInactive() -> a
    void appIsResumed() -> b
    void appIsPaused() -> c
io.flutter.embedding.engine.systemchannels.LocalizationChannel -> io.flutter.embedding.engine.d.d:
    io.flutter.plugin.common.MethodChannel channel -> a
    void <init>(io.flutter.embedding.engine.dart.DartExecutor) -> <init>
    void sendLocales(java.util.List) -> a
io.flutter.embedding.engine.systemchannels.NavigationChannel -> io.flutter.embedding.engine.d.e:
    io.flutter.plugin.common.MethodChannel channel -> a
    void <init>(io.flutter.embedding.engine.dart.DartExecutor) -> <init>
    void setInitialRoute(java.lang.String) -> a
    void popRoute() -> a
io.flutter.embedding.engine.systemchannels.PlatformChannel -> io.flutter.embedding.engine.d.f:
    io.flutter.plugin.common.MethodChannel channel -> a
    io.flutter.embedding.engine.systemchannels.PlatformChannel$PlatformMessageHandler platformMessageHandler -> c
    io.flutter.plugin.common.MethodChannel$MethodCallHandler parsingMethodCallHandler -> b
    void <init>(io.flutter.embedding.engine.dart.DartExecutor) -> <init>
    void setPlatformMessageHandler(io.flutter.embedding.engine.systemchannels.PlatformChannel$PlatformMessageHandler) -> a
    int decodeOrientations(org.json.JSONArray) -> a
    java.util.ArrayList decodeExclusionRects(org.json.JSONArray) -> b
    java.util.ArrayList encodeExclusionRects(java.util.List) -> a
    io.flutter.embedding.engine.systemchannels.PlatformChannel$AppSwitcherDescription decodeAppSwitcherDescription(org.json.JSONObject) -> a
    java.util.List decodeSystemUiOverlays(org.json.JSONArray) -> c
    io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemChromeStyle decodeSystemChromeStyle(org.json.JSONObject) -> b
    io.flutter.embedding.engine.systemchannels.PlatformChannel$PlatformMessageHandler access$000(io.flutter.embedding.engine.systemchannels.PlatformChannel) -> a
    int access$100(io.flutter.embedding.engine.systemchannels.PlatformChannel,org.json.JSONArray) -> a
    io.flutter.embedding.engine.systemchannels.PlatformChannel$AppSwitcherDescription access$200(io.flutter.embedding.engine.systemchannels.PlatformChannel,org.json.JSONObject) -> a
    java.util.List access$300(io.flutter.embedding.engine.systemchannels.PlatformChannel,org.json.JSONArray) -> b
    io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemChromeStyle access$400(io.flutter.embedding.engine.systemchannels.PlatformChannel,org.json.JSONObject) -> b
    java.util.ArrayList access$500(io.flutter.embedding.engine.systemchannels.PlatformChannel,java.util.List) -> a
    java.util.ArrayList access$600(io.flutter.embedding.engine.systemchannels.PlatformChannel,org.json.JSONArray) -> c
io.flutter.embedding.engine.systemchannels.PlatformChannel$1 -> io.flutter.embedding.engine.d.f$1:
    io.flutter.embedding.engine.systemchannels.PlatformChannel this$0 -> a
    void <init>(io.flutter.embedding.engine.systemchannels.PlatformChannel) -> <init>
    void onMethodCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result) -> onMethodCall
io.flutter.embedding.engine.systemchannels.PlatformChannel$2 -> io.flutter.embedding.engine.d.f$2:
    int[] $SwitchMap$io$flutter$embedding$engine$systemchannels$PlatformChannel$DeviceOrientation -> a
    int[] $SwitchMap$io$flutter$embedding$engine$systemchannels$PlatformChannel$SystemUiOverlay -> b
    void <clinit>() -> <clinit>
io.flutter.embedding.engine.systemchannels.PlatformChannel$AppSwitcherDescription -> io.flutter.embedding.engine.d.f$a:
    int color -> a
    java.lang.String label -> b
    void <init>(int,java.lang.String) -> <init>
io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness -> io.flutter.embedding.engine.d.f$b:
    io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness LIGHT -> a
    io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness DARK -> b
    java.lang.String encodedName -> c
    io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness[] $VALUES -> d
    io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness[] values() -> values
    io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness valueOf(java.lang.String) -> valueOf
    io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness fromValue(java.lang.String) -> a
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    void <clinit>() -> <clinit>
io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat -> io.flutter.embedding.engine.d.f$c:
    io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat PLAIN_TEXT -> a
    java.lang.String encodedName -> b
    io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat[] $VALUES -> c
    io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat[] values() -> values
    io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat valueOf(java.lang.String) -> valueOf
    io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat fromValue(java.lang.String) -> a
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    void <clinit>() -> <clinit>
io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation -> io.flutter.embedding.engine.d.f$d:
    io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation PORTRAIT_UP -> a
    io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation PORTRAIT_DOWN -> b
    io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation LANDSCAPE_LEFT -> c
    io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation LANDSCAPE_RIGHT -> d
    java.lang.String encodedName -> e
    io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation[] $VALUES -> f
    io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation[] values() -> values
    io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation valueOf(java.lang.String) -> valueOf
    io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation fromValue(java.lang.String) -> a
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    void <clinit>() -> <clinit>
io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType -> io.flutter.embedding.engine.d.f$e:
    io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType STANDARD -> a
    io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType LIGHT_IMPACT -> b
    io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType MEDIUM_IMPACT -> c
    io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType HEAVY_IMPACT -> d
    io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType SELECTION_CLICK -> e
    java.lang.String encodedName -> f
    io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType[] $VALUES -> g
    io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType[] values() -> values
    io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType valueOf(java.lang.String) -> valueOf
    io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType fromValue(java.lang.String) -> a
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    void <clinit>() -> <clinit>
io.flutter.embedding.engine.systemchannels.PlatformChannel$PlatformMessageHandler -> io.flutter.embedding.engine.d.f$f:
    void playSystemSound(io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType) -> a
    void vibrateHapticFeedback(io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType) -> a
    void setPreferredOrientations(int) -> a
    void setApplicationSwitcherDescription(io.flutter.embedding.engine.systemchannels.PlatformChannel$AppSwitcherDescription) -> a
    void showSystemOverlays(java.util.List) -> a
    void restoreSystemUiOverlays() -> a
    void setSystemUiOverlayStyle(io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemChromeStyle) -> a
    void popSystemNavigator() -> b
    java.lang.CharSequence getClipboardData(io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat) -> a
    void setClipboardData(java.lang.String) -> a
    java.util.List getSystemGestureExclusionRects() -> c
    void setSystemGestureExclusionRects(java.util.ArrayList) -> a
io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType -> io.flutter.embedding.engine.d.f$g:
    io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType CLICK -> a
    java.lang.String encodedName -> b
    io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType[] $VALUES -> c
    io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType[] values() -> values
    io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType valueOf(java.lang.String) -> valueOf
    io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType fromValue(java.lang.String) -> a
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    void <clinit>() -> <clinit>
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemChromeStyle -> io.flutter.embedding.engine.d.f$h:
    java.lang.Integer statusBarColor -> a
    io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness statusBarIconBrightness -> b
    java.lang.Integer systemNavigationBarColor -> c
    io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness systemNavigationBarIconBrightness -> d
    java.lang.Integer systemNavigationBarDividerColor -> e
    void <init>(java.lang.Integer,io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness,java.lang.Integer,io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness,java.lang.Integer) -> <init>
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay -> io.flutter.embedding.engine.d.f$i:
    io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay TOP_OVERLAYS -> a
    io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay BOTTOM_OVERLAYS -> b
    java.lang.String encodedName -> c
    io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay[] $VALUES -> d
    io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay[] values() -> values
    io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay valueOf(java.lang.String) -> valueOf
    io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay fromValue(java.lang.String) -> a
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    void <clinit>() -> <clinit>
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel -> io.flutter.embedding.engine.d.g:
    io.flutter.plugin.common.MethodChannel channel -> a
    io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewsHandler handler -> b
    io.flutter.plugin.common.MethodChannel$MethodCallHandler parsingHandler -> c
    void invokeViewFocused(int) -> a
    java.lang.String detailedExceptionString(java.lang.Exception) -> b
    void <init>(io.flutter.embedding.engine.dart.DartExecutor) -> <init>
    void setPlatformViewsHandler(io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewsHandler) -> a
    io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewsHandler access$000(io.flutter.embedding.engine.systemchannels.PlatformViewsChannel) -> a
    java.lang.String access$100(java.lang.Exception) -> a
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$1 -> io.flutter.embedding.engine.d.g$1:
    io.flutter.embedding.engine.systemchannels.PlatformViewsChannel this$0 -> a
    void <init>(io.flutter.embedding.engine.systemchannels.PlatformViewsChannel) -> <init>
    void onMethodCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result) -> onMethodCall
    void create(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result) -> a
    void dispose(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result) -> b
    void resize(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result) -> c
    void touch(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result) -> d
    void setDirection(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result) -> e
    void clearFocus(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result) -> f
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$1$1 -> io.flutter.embedding.engine.d.g$1$1:
    io.flutter.plugin.common.MethodChannel$Result val$result -> a
    io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$1 this$1 -> b
    void <init>(io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$1,io.flutter.plugin.common.MethodChannel$Result) -> <init>
    void run() -> run
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest -> io.flutter.embedding.engine.d.g$a:
    int viewId -> a
    java.lang.String viewType -> b
    double logicalWidth -> c
    double logicalHeight -> d
    int direction -> e
    java.nio.ByteBuffer params -> f
    void <init>(int,java.lang.String,double,double,int,java.nio.ByteBuffer) -> <init>
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewResizeRequest -> io.flutter.embedding.engine.d.g$b:
    int viewId -> a
    double newLogicalWidth -> b
    double newLogicalHeight -> c
    void <init>(int,double,double) -> <init>
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewTouch -> io.flutter.embedding.engine.d.g$c:
    int viewId -> a
    java.lang.Number downTime -> b
    java.lang.Number eventTime -> c
    int action -> d
    int pointerCount -> e
    java.lang.Object rawPointerPropertiesList -> f
    java.lang.Object rawPointerCoords -> g
    int metaState -> h
    int buttonState -> i
    float xPrecision -> j
    float yPrecision -> k
    int deviceId -> l
    int edgeFlags -> m
    int source -> n
    int flags -> o
    void <init>(int,java.lang.Number,java.lang.Number,int,int,java.lang.Object,java.lang.Object,int,int,float,float,int,int,int,int) -> <init>
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewsHandler -> io.flutter.embedding.engine.d.g$d:
    long createPlatformView(io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest) -> a
    void disposePlatformView(int) -> a
    void resizePlatformView(io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewResizeRequest,java.lang.Runnable) -> a
    void onTouch(io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewTouch) -> a
    void setDirection(int,int) -> a
    void clearFocus(int) -> b
io.flutter.embedding.engine.systemchannels.SettingsChannel -> io.flutter.embedding.engine.d.h:
    io.flutter.plugin.common.BasicMessageChannel channel -> a
    void <init>(io.flutter.embedding.engine.dart.DartExecutor) -> <init>
    io.flutter.embedding.engine.systemchannels.SettingsChannel$MessageBuilder startMessage() -> a
io.flutter.embedding.engine.systemchannels.SettingsChannel$MessageBuilder -> io.flutter.embedding.engine.d.h$a:
    io.flutter.plugin.common.BasicMessageChannel channel -> a
    java.util.Map message -> b
    void <init>(io.flutter.plugin.common.BasicMessageChannel) -> <init>
    io.flutter.embedding.engine.systemchannels.SettingsChannel$MessageBuilder setTextScaleFactor(float) -> a
    io.flutter.embedding.engine.systemchannels.SettingsChannel$MessageBuilder setUse24HourFormat(boolean) -> a
    io.flutter.embedding.engine.systemchannels.SettingsChannel$MessageBuilder setPlatformBrightness(io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness) -> a
    void send() -> a
io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness -> io.flutter.embedding.engine.d.h$b:
    io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness light -> a
    io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness dark -> b
    java.lang.String name -> c
    io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness[] $VALUES -> d
    io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness[] values() -> values
    io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    void <clinit>() -> <clinit>
io.flutter.embedding.engine.systemchannels.SystemChannel -> io.flutter.embedding.engine.d.i:
    io.flutter.plugin.common.BasicMessageChannel channel -> a
    void <init>(io.flutter.embedding.engine.dart.DartExecutor) -> <init>
    void sendMemoryPressureWarning() -> a
io.flutter.embedding.engine.systemchannels.TextInputChannel -> io.flutter.embedding.engine.d.j:
    io.flutter.plugin.common.MethodChannel channel -> a
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputMethodHandler textInputMethodHandler -> b
    io.flutter.plugin.common.MethodChannel$MethodCallHandler parsingMethodHandler -> c
    void <init>(io.flutter.embedding.engine.dart.DartExecutor) -> <init>
    void requestExistingInputState() -> a
    void updateEditingState(int,java.lang.String,int,int,int,int) -> a
    void newline(int) -> a
    void go(int) -> b
    void search(int) -> c
    void send(int) -> d
    void done(int) -> e
    void next(int) -> f
    void previous(int) -> g
    void unspecifiedAction(int) -> h
    void setTextInputMethodHandler(io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputMethodHandler) -> a
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputMethodHandler access$000(io.flutter.embedding.engine.systemchannels.TextInputChannel) -> a
io.flutter.embedding.engine.systemchannels.TextInputChannel$1 -> io.flutter.embedding.engine.d.j$1:
    io.flutter.embedding.engine.systemchannels.TextInputChannel this$0 -> a
    void <init>(io.flutter.embedding.engine.systemchannels.TextInputChannel) -> <init>
    void onMethodCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result) -> onMethodCall
io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration -> io.flutter.embedding.engine.d.j$a:
    boolean obscureText -> a
    boolean autocorrect -> b
    boolean enableSuggestions -> c
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization textCapitalization -> d
    io.flutter.embedding.engine.systemchannels.TextInputChannel$InputType inputType -> e
    java.lang.Integer inputAction -> f
    java.lang.String actionLabel -> g
    io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration fromJson(org.json.JSONObject) -> a
    java.lang.Integer inputActionFromTextInputAction(java.lang.String) -> a
    void <init>(boolean,boolean,boolean,io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization,io.flutter.embedding.engine.systemchannels.TextInputChannel$InputType,java.lang.Integer,java.lang.String) -> <init>
io.flutter.embedding.engine.systemchannels.TextInputChannel$InputType -> io.flutter.embedding.engine.d.j$b:
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType type -> a
    boolean isSigned -> b
    boolean isDecimal -> c
    io.flutter.embedding.engine.systemchannels.TextInputChannel$InputType fromJson(org.json.JSONObject) -> a
    void <init>(io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType,boolean,boolean) -> <init>
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization -> io.flutter.embedding.engine.d.j$c:
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization CHARACTERS -> a
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization WORDS -> b
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization SENTENCES -> c
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization NONE -> d
    java.lang.String encodedName -> e
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization[] $VALUES -> f
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization[] values() -> values
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization valueOf(java.lang.String) -> valueOf
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization fromValue(java.lang.String) -> a
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    void <clinit>() -> <clinit>
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState -> io.flutter.embedding.engine.d.j$d:
    java.lang.String text -> a
    int selectionStart -> b
    int selectionEnd -> c
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState fromJson(org.json.JSONObject) -> a
    void <init>(java.lang.String,int,int) -> <init>
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputMethodHandler -> io.flutter.embedding.engine.d.j$e:
    void show() -> a
    void hide() -> b
    void setClient(int,io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration) -> a
    void setPlatformViewClient(int) -> a
    void setEditingState(io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState) -> a
    void clearClient() -> c
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType -> io.flutter.embedding.engine.d.j$f:
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType TEXT -> a
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType DATETIME -> b
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType NUMBER -> c
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType PHONE -> d
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType MULTILINE -> e
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType EMAIL_ADDRESS -> f
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType URL -> g
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType VISIBLE_PASSWORD -> h
    java.lang.String encodedName -> i
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType[] $VALUES -> j
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType[] values() -> values
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType valueOf(java.lang.String) -> valueOf
    io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType fromValue(java.lang.String) -> a
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    void <clinit>() -> <clinit>
io.flutter.plugin.common.ActivityLifecycleListener -> io.flutter.plugin.a.a:
    void onPostResume() -> a
io.flutter.plugin.common.BasicMessageChannel -> io.flutter.plugin.a.b:
    io.flutter.plugin.common.BinaryMessenger messenger -> a
    java.lang.String name -> b
    io.flutter.plugin.common.MessageCodec codec -> c
    void <init>(io.flutter.plugin.common.BinaryMessenger,java.lang.String,io.flutter.plugin.common.MessageCodec) -> <init>
    void send(java.lang.Object) -> a
    void send(java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply) -> a
    void setMessageHandler(io.flutter.plugin.common.BasicMessageChannel$MessageHandler) -> a
    io.flutter.plugin.common.MessageCodec access$200(io.flutter.plugin.common.BasicMessageChannel) -> a
    java.lang.String access$300(io.flutter.plugin.common.BasicMessageChannel) -> b
io.flutter.plugin.common.BasicMessageChannel$1 -> io.flutter.plugin.a.b$1:
io.flutter.plugin.common.BasicMessageChannel$IncomingMessageHandler -> io.flutter.plugin.a.b$a:
    io.flutter.plugin.common.BasicMessageChannel$MessageHandler handler -> b
    io.flutter.plugin.common.BasicMessageChannel this$0 -> a
    void <init>(io.flutter.plugin.common.BasicMessageChannel,io.flutter.plugin.common.BasicMessageChannel$MessageHandler) -> <init>
    void onMessage(java.nio.ByteBuffer,io.flutter.plugin.common.BinaryMessenger$BinaryReply) -> a
    void <init>(io.flutter.plugin.common.BasicMessageChannel,io.flutter.plugin.common.BasicMessageChannel$MessageHandler,io.flutter.plugin.common.BasicMessageChannel$1) -> <init>
io.flutter.plugin.common.BasicMessageChannel$IncomingMessageHandler$1 -> io.flutter.plugin.a.b$a$1:
    io.flutter.plugin.common.BinaryMessenger$BinaryReply val$callback -> a
    io.flutter.plugin.common.BasicMessageChannel$IncomingMessageHandler this$1 -> b
    void <init>(io.flutter.plugin.common.BasicMessageChannel$IncomingMessageHandler,io.flutter.plugin.common.BinaryMessenger$BinaryReply) -> <init>
    void reply(java.lang.Object) -> a
io.flutter.plugin.common.BasicMessageChannel$IncomingReplyHandler -> io.flutter.plugin.a.b$b:
    io.flutter.plugin.common.BasicMessageChannel$Reply callback -> b
    io.flutter.plugin.common.BasicMessageChannel this$0 -> a
    void <init>(io.flutter.plugin.common.BasicMessageChannel,io.flutter.plugin.common.BasicMessageChannel$Reply) -> <init>
    void reply(java.nio.ByteBuffer) -> a
    void <init>(io.flutter.plugin.common.BasicMessageChannel,io.flutter.plugin.common.BasicMessageChannel$Reply,io.flutter.plugin.common.BasicMessageChannel$1) -> <init>
io.flutter.plugin.common.BasicMessageChannel$MessageHandler -> io.flutter.plugin.a.b$c:
    void onMessage(java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply) -> a
io.flutter.plugin.common.BasicMessageChannel$Reply -> io.flutter.plugin.a.b$d:
    void reply(java.lang.Object) -> a
io.flutter.plugin.common.BinaryMessenger -> io.flutter.plugin.a.c:
    void send(java.lang.String,java.nio.ByteBuffer) -> a
    void send(java.lang.String,java.nio.ByteBuffer,io.flutter.plugin.common.BinaryMessenger$BinaryReply) -> a
    void setMessageHandler(java.lang.String,io.flutter.plugin.common.BinaryMessenger$BinaryMessageHandler) -> a
io.flutter.plugin.common.BinaryMessenger$BinaryMessageHandler -> io.flutter.plugin.a.c$a:
    void onMessage(java.nio.ByteBuffer,io.flutter.plugin.common.BinaryMessenger$BinaryReply) -> a
io.flutter.plugin.common.BinaryMessenger$BinaryReply -> io.flutter.plugin.a.c$b:
    void reply(java.nio.ByteBuffer) -> a
io.flutter.plugin.common.EventChannel -> io.flutter.plugin.a.d:
    io.flutter.plugin.common.BinaryMessenger messenger -> a
    java.lang.String name -> b
    io.flutter.plugin.common.MethodCodec codec -> c
    void <init>(io.flutter.plugin.common.BinaryMessenger,java.lang.String) -> <init>
    void <init>(io.flutter.plugin.common.BinaryMessenger,java.lang.String,io.flutter.plugin.common.MethodCodec) -> <init>
    void setStreamHandler(io.flutter.plugin.common.EventChannel$StreamHandler) -> a
    io.flutter.plugin.common.MethodCodec access$000(io.flutter.plugin.common.EventChannel) -> a
    java.lang.String access$200(io.flutter.plugin.common.EventChannel) -> b
    io.flutter.plugin.common.BinaryMessenger access$400(io.flutter.plugin.common.EventChannel) -> c
io.flutter.plugin.common.EventChannel$1 -> io.flutter.plugin.a.d$1:
io.flutter.plugin.common.EventChannel$EventSink -> io.flutter.plugin.a.d$a:
    void success(java.lang.Object) -> success
    void error(java.lang.String,java.lang.String,java.lang.Object) -> error
    void endOfStream() -> endOfStream
io.flutter.plugin.common.EventChannel$IncomingStreamRequestHandler -> io.flutter.plugin.a.d$b:
    io.flutter.plugin.common.EventChannel$StreamHandler handler -> b
    java.util.concurrent.atomic.AtomicReference activeSink -> c
    io.flutter.plugin.common.EventChannel this$0 -> a
    void <init>(io.flutter.plugin.common.EventChannel,io.flutter.plugin.common.EventChannel$StreamHandler) -> <init>
    void onMessage(java.nio.ByteBuffer,io.flutter.plugin.common.BinaryMessenger$BinaryReply) -> a
    void onListen(java.lang.Object,io.flutter.plugin.common.BinaryMessenger$BinaryReply) -> a
    void onCancel(java.lang.Object,io.flutter.plugin.common.BinaryMessenger$BinaryReply) -> b
    java.util.concurrent.atomic.AtomicReference access$300(io.flutter.plugin.common.EventChannel$IncomingStreamRequestHandler) -> a
io.flutter.plugin.common.EventChannel$IncomingStreamRequestHandler$EventSinkImplementation -> io.flutter.plugin.a.d$b$a:
    java.util.concurrent.atomic.AtomicBoolean hasEnded -> a
    io.flutter.plugin.common.EventChannel$IncomingStreamRequestHandler this$1 -> b
    void <init>(io.flutter.plugin.common.EventChannel$IncomingStreamRequestHandler) -> <init>
    void success(java.lang.Object) -> success
    void error(java.lang.String,java.lang.String,java.lang.Object) -> error
    void endOfStream() -> endOfStream
    void <init>(io.flutter.plugin.common.EventChannel$IncomingStreamRequestHandler,io.flutter.plugin.common.EventChannel$1) -> <init>
io.flutter.plugin.common.EventChannel$StreamHandler -> io.flutter.plugin.a.d$c:
    void onListen(java.lang.Object,io.flutter.plugin.common.EventChannel$EventSink) -> onListen
    void onCancel(java.lang.Object) -> onCancel
io.flutter.plugin.common.FlutterException -> io.flutter.plugin.a.e:
    java.lang.String code -> a
    java.lang.Object details -> b
    void <init>(java.lang.String,java.lang.String,java.lang.Object) -> <init>
io.flutter.plugin.common.JSONMessageCodec -> io.flutter.plugin.a.f:
    io.flutter.plugin.common.JSONMessageCodec INSTANCE -> a
    void <init>() -> <init>
    java.nio.ByteBuffer encodeMessage(java.lang.Object) -> a
    java.lang.Object decodeMessage(java.nio.ByteBuffer) -> a
    void <clinit>() -> <clinit>
io.flutter.plugin.common.JSONMethodCodec -> io.flutter.plugin.a.g:
    io.flutter.plugin.common.JSONMethodCodec INSTANCE -> a
    void <init>() -> <init>
    java.nio.ByteBuffer encodeMethodCall(io.flutter.plugin.common.MethodCall) -> a
    io.flutter.plugin.common.MethodCall decodeMethodCall(java.nio.ByteBuffer) -> a
    java.nio.ByteBuffer encodeSuccessEnvelope(java.lang.Object) -> a
    java.nio.ByteBuffer encodeErrorEnvelope(java.lang.String,java.lang.String,java.lang.Object) -> a
    java.lang.Object decodeEnvelope(java.nio.ByteBuffer) -> b
    java.lang.Object unwrapNull(java.lang.Object) -> b
    void <clinit>() -> <clinit>
io.flutter.plugin.common.JSONUtil -> io.flutter.plugin.a.h:
    java.lang.Object wrap(java.lang.Object) -> a
io.flutter.plugin.common.MessageCodec -> io.flutter.plugin.a.i:
    java.nio.ByteBuffer encodeMessage(java.lang.Object) -> a
    java.lang.Object decodeMessage(java.nio.ByteBuffer) -> a
io.flutter.plugin.common.MethodCall -> io.flutter.plugin.a.j:
    java.lang.String method -> a
    java.lang.Object arguments -> b
    void <init>(java.lang.String,java.lang.Object) -> <init>
    java.lang.Object arguments() -> a
    java.lang.Object argument(java.lang.String) -> a
    boolean hasArgument(java.lang.String) -> b
io.flutter.plugin.common.MethodChannel -> io.flutter.plugin.a.k:
    io.flutter.plugin.common.BinaryMessenger messenger -> a
    java.lang.String name -> b
    io.flutter.plugin.common.MethodCodec codec -> c
    void <init>(io.flutter.plugin.common.BinaryMessenger,java.lang.String) -> <init>
    void <init>(io.flutter.plugin.common.BinaryMessenger,java.lang.String,io.flutter.plugin.common.MethodCodec) -> <init>
    void invokeMethod(java.lang.String,java.lang.Object) -> a
    void invokeMethod(java.lang.String,java.lang.Object,io.flutter.plugin.common.MethodChannel$Result) -> a
    void setMethodCallHandler(io.flutter.plugin.common.MethodChannel$MethodCallHandler) -> a
    io.flutter.plugin.common.MethodCodec access$000(io.flutter.plugin.common.MethodChannel) -> a
    java.lang.String access$100(io.flutter.plugin.common.MethodChannel) -> b
io.flutter.plugin.common.MethodChannel$IncomingMethodCallHandler -> io.flutter.plugin.a.k$a:
    io.flutter.plugin.common.MethodChannel$MethodCallHandler handler -> b
    io.flutter.plugin.common.MethodChannel this$0 -> a
    void <init>(io.flutter.plugin.common.MethodChannel,io.flutter.plugin.common.MethodChannel$MethodCallHandler) -> <init>
    void onMessage(java.nio.ByteBuffer,io.flutter.plugin.common.BinaryMessenger$BinaryReply) -> a
io.flutter.plugin.common.MethodChannel$IncomingMethodCallHandler$1 -> io.flutter.plugin.a.k$a$1:
    io.flutter.plugin.common.BinaryMessenger$BinaryReply val$reply -> a
    io.flutter.plugin.common.MethodChannel$IncomingMethodCallHandler this$1 -> b
    void <init>(io.flutter.plugin.common.MethodChannel$IncomingMethodCallHandler,io.flutter.plugin.common.BinaryMessenger$BinaryReply) -> <init>
    void success(java.lang.Object) -> success
    void error(java.lang.String,java.lang.String,java.lang.Object) -> error
    void notImplemented() -> notImplemented
io.flutter.plugin.common.MethodChannel$IncomingResultHandler -> io.flutter.plugin.a.k$b:
    io.flutter.plugin.common.MethodChannel$Result callback -> b
    io.flutter.plugin.common.MethodChannel this$0 -> a
    void <init>(io.flutter.plugin.common.MethodChannel,io.flutter.plugin.common.MethodChannel$Result) -> <init>
    void reply(java.nio.ByteBuffer) -> a
io.flutter.plugin.common.MethodChannel$MethodCallHandler -> io.flutter.plugin.a.k$c:
    void onMethodCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result) -> onMethodCall
io.flutter.plugin.common.MethodChannel$Result -> io.flutter.plugin.a.k$d:
    void success(java.lang.Object) -> success
    void error(java.lang.String,java.lang.String,java.lang.Object) -> error
    void notImplemented() -> notImplemented
io.flutter.plugin.common.MethodCodec -> io.flutter.plugin.a.l:
    java.nio.ByteBuffer encodeMethodCall(io.flutter.plugin.common.MethodCall) -> a
    io.flutter.plugin.common.MethodCall decodeMethodCall(java.nio.ByteBuffer) -> a
    java.nio.ByteBuffer encodeSuccessEnvelope(java.lang.Object) -> a
    java.nio.ByteBuffer encodeErrorEnvelope(java.lang.String,java.lang.String,java.lang.Object) -> a
    java.lang.Object decodeEnvelope(java.nio.ByteBuffer) -> b
io.flutter.plugin.common.PluginRegistry -> io.flutter.plugin.a.m:
    io.flutter.plugin.common.PluginRegistry$Registrar registrarFor(java.lang.String) -> b
    boolean hasPlugin(java.lang.String) -> a
io.flutter.plugin.common.PluginRegistry$ActivityResultListener -> io.flutter.plugin.a.m$a:
    boolean onActivityResult(int,int,android.content.Intent) -> a
io.flutter.plugin.common.PluginRegistry$NewIntentListener -> io.flutter.plugin.a.m$b:
    boolean onNewIntent(android.content.Intent) -> a
io.flutter.plugin.common.PluginRegistry$Registrar -> io.flutter.plugin.a.m$c:
    android.app.Activity activity() -> a
    android.content.Context context() -> b
    io.flutter.plugin.common.BinaryMessenger messenger() -> c
    io.flutter.view.TextureRegistry textures() -> d
io.flutter.plugin.common.PluginRegistry$RequestPermissionsResultListener -> io.flutter.plugin.a.m$d:
    boolean onRequestPermissionsResult(int,java.lang.String[],int[]) -> a
io.flutter.plugin.common.PluginRegistry$UserLeaveHintListener -> io.flutter.plugin.a.m$e:
    void onUserLeaveHint() -> d
io.flutter.plugin.common.PluginRegistry$ViewDestroyListener -> io.flutter.plugin.a.m$f:
    boolean onViewDestroy(io.flutter.view.FlutterNativeView) -> a
io.flutter.plugin.common.StandardMessageCodec -> io.flutter.plugin.a.n:
    io.flutter.plugin.common.StandardMessageCodec INSTANCE -> a
    boolean LITTLE_ENDIAN -> b
    java.nio.charset.Charset UTF8 -> c
    void <init>() -> <init>
    java.nio.ByteBuffer encodeMessage(java.lang.Object) -> a
    java.lang.Object decodeMessage(java.nio.ByteBuffer) -> a
    void writeSize(java.io.ByteArrayOutputStream,int) -> a
    void writeChar(java.io.ByteArrayOutputStream,int) -> b
    void writeInt(java.io.ByteArrayOutputStream,int) -> c
    void writeLong(java.io.ByteArrayOutputStream,long) -> a
    void writeDouble(java.io.ByteArrayOutputStream,double) -> a
    void writeBytes(java.io.ByteArrayOutputStream,byte[]) -> a
    void writeAlignment(java.io.ByteArrayOutputStream,int) -> d
    void writeValue(java.io.ByteArrayOutputStream,java.lang.Object) -> a
    int readSize(java.nio.ByteBuffer) -> b
    byte[] readBytes(java.nio.ByteBuffer) -> c
    void readAlignment(java.nio.ByteBuffer,int) -> a
    java.lang.Object readValue(java.nio.ByteBuffer) -> d
    java.lang.Object readValueOfType(byte,java.nio.ByteBuffer) -> a
    void <clinit>() -> <clinit>
io.flutter.plugin.common.StandardMessageCodec$ExposedByteArrayOutputStream -> io.flutter.plugin.a.n$a:
    void <init>() -> <init>
    byte[] buffer() -> a
io.flutter.plugin.common.StandardMethodCodec -> io.flutter.plugin.a.o:
    io.flutter.plugin.common.StandardMethodCodec INSTANCE -> a
    io.flutter.plugin.common.StandardMessageCodec messageCodec -> b
    void <init>(io.flutter.plugin.common.StandardMessageCodec) -> <init>
    java.nio.ByteBuffer encodeMethodCall(io.flutter.plugin.common.MethodCall) -> a
    io.flutter.plugin.common.MethodCall decodeMethodCall(java.nio.ByteBuffer) -> a
    java.nio.ByteBuffer encodeSuccessEnvelope(java.lang.Object) -> a
    java.nio.ByteBuffer encodeErrorEnvelope(java.lang.String,java.lang.String,java.lang.Object) -> a
    java.lang.Object decodeEnvelope(java.nio.ByteBuffer) -> b
    void <clinit>() -> <clinit>
io.flutter.plugin.common.StringCodec -> io.flutter.plugin.a.p:
    java.nio.charset.Charset UTF8 -> b
    io.flutter.plugin.common.StringCodec INSTANCE -> a
    void <init>() -> <init>
    java.nio.ByteBuffer encodeMessage(java.lang.String) -> a
    java.lang.String decodeMessage(java.nio.ByteBuffer) -> b
    java.lang.Object decodeMessage(java.nio.ByteBuffer) -> a
    java.nio.ByteBuffer encodeMessage(java.lang.Object) -> a
    void <clinit>() -> <clinit>
io.flutter.plugin.editing.InputConnectionAdaptor -> io.flutter.plugin.b.a:
    android.view.View mFlutterView -> a
    int mClient -> b
    io.flutter.embedding.engine.systemchannels.TextInputChannel textInputChannel -> c
    android.text.Editable mEditable -> d
    int mBatchCount -> e
    android.view.inputmethod.InputMethodManager mImm -> f
    android.text.Layout mLayout -> g
    void <init>(android.view.View,int,io.flutter.embedding.engine.systemchannels.TextInputChannel,android.text.Editable) -> <init>
    void updateEditingState() -> a
    android.text.Editable getEditable() -> getEditable
    boolean beginBatchEdit() -> beginBatchEdit
    boolean endBatchEdit() -> endBatchEdit
    boolean commitText(java.lang.CharSequence,int) -> commitText
    boolean deleteSurroundingText(int,int) -> deleteSurroundingText
    boolean setComposingRegion(int,int) -> setComposingRegion
    boolean setComposingText(java.lang.CharSequence,int) -> setComposingText
    boolean setSelection(int,int) -> setSelection
    int clampIndexToEditable(int,android.text.Editable) -> a
    boolean sendKeyEvent(android.view.KeyEvent) -> sendKeyEvent
    boolean performEditorAction(int) -> performEditorAction
io.flutter.plugin.editing.TextInputPlugin -> io.flutter.plugin.b.b:
    android.view.View mView -> a
    android.view.inputmethod.InputMethodManager mImm -> b
    io.flutter.embedding.engine.systemchannels.TextInputChannel textInputChannel -> c
    io.flutter.plugin.editing.TextInputPlugin$InputTarget inputTarget -> d
    io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration configuration -> e
    android.text.Editable mEditable -> f
    boolean mRestartInputPending -> g
    android.view.inputmethod.InputConnection lastInputConnection -> h
    io.flutter.plugin.platform.PlatformViewsController platformViewsController -> i
    boolean restartAlwaysRequired -> j
    boolean isInputConnectionLocked -> k
    void <init>(android.view.View,io.flutter.embedding.engine.dart.DartExecutor,io.flutter.plugin.platform.PlatformViewsController) -> <init>
    android.view.inputmethod.InputMethodManager getInputMethodManager() -> a
    void lockPlatformViewInputConnection() -> b
    void unlockPlatformViewInputConnection() -> c
    int inputTypeFromTextInputType(io.flutter.embedding.engine.systemchannels.TextInputChannel$InputType,boolean,boolean,boolean,io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization) -> a
    android.view.inputmethod.InputConnection createInputConnection(android.view.View,android.view.inputmethod.EditorInfo) -> a
    android.view.inputmethod.InputConnection getLastInputConnection() -> d
    void clearPlatformViewClient(int) -> a
    void showTextInput(android.view.View) -> a
    void hideTextInput(android.view.View) -> b
    void setTextInputClient(int,io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration) -> a
    void setPlatformViewTextInputClient(int) -> b
    void applyStateToSelection(io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState) -> a
    void setTextInputEditingState(android.view.View,io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState) -> a
    boolean isRestartAlwaysRequired() -> e
    void clearTextInputClient() -> f
    android.view.View access$000(io.flutter.plugin.editing.TextInputPlugin) -> a
    void access$100(io.flutter.plugin.editing.TextInputPlugin,android.view.View) -> a
    void access$200(io.flutter.plugin.editing.TextInputPlugin,android.view.View) -> b
    void access$300(io.flutter.plugin.editing.TextInputPlugin,int) -> a
    void access$400(io.flutter.plugin.editing.TextInputPlugin) -> b
io.flutter.plugin.editing.TextInputPlugin$1 -> io.flutter.plugin.b.b$1:
    io.flutter.plugin.editing.TextInputPlugin this$0 -> a
    void <init>(io.flutter.plugin.editing.TextInputPlugin) -> <init>
    void show() -> a
    void hide() -> b
    void setClient(int,io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration) -> a
    void setPlatformViewClient(int) -> a
    void setEditingState(io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState) -> a
    void clearClient() -> c
io.flutter.plugin.editing.TextInputPlugin$InputTarget -> io.flutter.plugin.b.b$a:
    io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type type -> a
    int id -> b
    void <init>(io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type,int) -> <init>
io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type -> io.flutter.plugin.b.b$a$a:
    io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type NO_TARGET -> a
    io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type FRAMEWORK_CLIENT -> b
    io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type PLATFORM_VIEW -> c
    io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type[] $VALUES -> d
    io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type[] values() -> values
    io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
io.flutter.plugin.platform.AccessibilityEventsDelegate -> io.flutter.plugin.platform.a:
    io.flutter.view.AccessibilityBridge accessibilityBridge -> a
    void <init>() -> <init>
    boolean requestSendAccessibilityEvent(android.view.View,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void setAccessibilityBridge(io.flutter.view.AccessibilityBridge) -> a
io.flutter.plugin.platform.PlatformPlugin -> io.flutter.plugin.platform.b:
    android.app.Activity activity -> a
    io.flutter.embedding.engine.systemchannels.PlatformChannel platformChannel -> b
    io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemChromeStyle currentTheme -> c
    int mEnabledOverlays -> d
    io.flutter.embedding.engine.systemchannels.PlatformChannel$PlatformMessageHandler mPlatformMessageHandler -> e
    void <init>(android.app.Activity,io.flutter.embedding.engine.systemchannels.PlatformChannel) -> <init>
    void playSystemSound(io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType) -> a
    void vibrateHapticFeedback(io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType) -> a
    void setSystemChromePreferredOrientations(int) -> a
    void setSystemChromeApplicationSwitcherDescription(io.flutter.embedding.engine.systemchannels.PlatformChannel$AppSwitcherDescription) -> a
    void setSystemChromeEnabledSystemUIOverlays(java.util.List) -> a
    void updateSystemUiOverlays() -> a
    void restoreSystemChromeSystemUIOverlays() -> b
    void setSystemChromeSystemUIOverlayStyle(io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemChromeStyle) -> a
    void popSystemNavigator() -> c
    java.lang.CharSequence getClipboardData(io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat) -> a
    void setClipboardData(java.lang.String) -> a
    java.util.List getSystemGestureExclusionRects() -> d
    void setSystemGestureExclusionRects(java.util.ArrayList) -> a
    void access$000(io.flutter.plugin.platform.PlatformPlugin,io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType) -> a
    void access$100(io.flutter.plugin.platform.PlatformPlugin,io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType) -> a
    void access$200(io.flutter.plugin.platform.PlatformPlugin,int) -> a
    void access$300(io.flutter.plugin.platform.PlatformPlugin,io.flutter.embedding.engine.systemchannels.PlatformChannel$AppSwitcherDescription) -> a
    void access$400(io.flutter.plugin.platform.PlatformPlugin,java.util.List) -> a
    void access$500(io.flutter.plugin.platform.PlatformPlugin) -> a
    void access$600(io.flutter.plugin.platform.PlatformPlugin,io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemChromeStyle) -> a
    void access$700(io.flutter.plugin.platform.PlatformPlugin) -> b
    java.lang.CharSequence access$800(io.flutter.plugin.platform.PlatformPlugin,io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat) -> a
    void access$900(io.flutter.plugin.platform.PlatformPlugin,java.lang.String) -> a
    java.util.List access$1000(io.flutter.plugin.platform.PlatformPlugin) -> c
    void access$1100(io.flutter.plugin.platform.PlatformPlugin,java.util.ArrayList) -> a
io.flutter.plugin.platform.PlatformPlugin$1 -> io.flutter.plugin.platform.b$1:
    io.flutter.plugin.platform.PlatformPlugin this$0 -> a
    void <init>(io.flutter.plugin.platform.PlatformPlugin) -> <init>
    void playSystemSound(io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType) -> a
    void vibrateHapticFeedback(io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType) -> a
    void setPreferredOrientations(int) -> a
    void setApplicationSwitcherDescription(io.flutter.embedding.engine.systemchannels.PlatformChannel$AppSwitcherDescription) -> a
    void showSystemOverlays(java.util.List) -> a
    void restoreSystemUiOverlays() -> a
    void setSystemUiOverlayStyle(io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemChromeStyle) -> a
    void popSystemNavigator() -> b
    java.lang.CharSequence getClipboardData(io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat) -> a
    void setClipboardData(java.lang.String) -> a
    java.util.List getSystemGestureExclusionRects() -> c
    void setSystemGestureExclusionRects(java.util.ArrayList) -> a
io.flutter.plugin.platform.PlatformPlugin$2 -> io.flutter.plugin.platform.b$2:
    int[] $SwitchMap$io$flutter$embedding$engine$systemchannels$PlatformChannel$HapticFeedbackType -> a
    int[] $SwitchMap$io$flutter$embedding$engine$systemchannels$PlatformChannel$SystemUiOverlay -> b
    int[] $SwitchMap$io$flutter$embedding$engine$systemchannels$PlatformChannel$Brightness -> c
    void <clinit>() -> <clinit>
io.flutter.plugin.platform.PlatformView -> io.flutter.plugin.platform.c:
    android.view.View getView() -> a
    void onFlutterViewAttached(android.view.View) -> a
    void dispose() -> b
    void onInputConnectionLocked() -> c
    void onInputConnectionUnlocked() -> d
io.flutter.plugin.platform.PlatformViewFactory -> io.flutter.plugin.platform.d:
    io.flutter.plugin.common.MessageCodec createArgsCodec -> a
    io.flutter.plugin.platform.PlatformView create(android.content.Context,int,java.lang.Object) -> a
    io.flutter.plugin.common.MessageCodec getCreateArgsCodec() -> a
io.flutter.plugin.platform.PlatformViewRegistryImpl -> io.flutter.plugin.platform.e:
    java.util.Map viewFactories -> a
    void <init>() -> <init>
    io.flutter.plugin.platform.PlatformViewFactory getFactory(java.lang.String) -> a
io.flutter.plugin.platform.PlatformViewsAccessibilityDelegate -> io.flutter.plugin.platform.f:
    android.view.View getPlatformViewById(java.lang.Integer) -> a
    void attachAccessibilityBridge(io.flutter.view.AccessibilityBridge) -> a
    void detachAccessibiltyBridge() -> a
io.flutter.plugin.platform.PlatformViewsController -> io.flutter.plugin.platform.g:
    io.flutter.plugin.platform.PlatformViewRegistryImpl registry -> b
    android.content.Context context -> c
    android.view.View flutterView -> d
    io.flutter.view.TextureRegistry textureRegistry -> e
    io.flutter.plugin.editing.TextInputPlugin textInputPlugin -> f
    io.flutter.embedding.engine.systemchannels.PlatformViewsChannel platformViewsChannel -> g
    io.flutter.plugin.platform.AccessibilityEventsDelegate accessibilityEventsDelegate -> h
    java.util.HashMap vdControllers -> a
    java.util.HashMap contextToPlatformView -> i
    io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewsHandler channelHandler -> j
    void <init>() -> <init>
    void attach(android.content.Context,io.flutter.view.TextureRegistry,io.flutter.embedding.engine.dart.DartExecutor) -> a
    void detach() -> b
    void attachAccessibilityBridge(io.flutter.view.AccessibilityBridge) -> a
    void detachAccessibiltyBridge() -> a
    void attachTextInputPlugin(io.flutter.plugin.editing.TextInputPlugin) -> a
    boolean checkInputConnectionProxy(android.view.View) -> a
    void onFlutterViewDestroyed() -> c
    void onPreEngineRestart() -> d
    android.view.View getPlatformViewById(java.lang.Integer) -> a
    void lockInputConnection(io.flutter.plugin.platform.VirtualDisplayController) -> a
    void unlockInputConnection(io.flutter.plugin.platform.VirtualDisplayController) -> b
    boolean validateDirection(int) -> b
    java.util.List parsePointerPropertiesList(java.lang.Object) -> b
    android.view.MotionEvent$PointerProperties parsePointerProperties(java.lang.Object) -> c
    java.util.List parsePointerCoordsList(java.lang.Object,float) -> b
    android.view.MotionEvent$PointerCoords parsePointerCoords(java.lang.Object,float) -> c
    void validateVirtualDisplayDimensions(int,int) -> a
    int toPhysicalPixels(double) -> a
    void flushAllViews() -> e
    boolean access$000(int) -> a
    io.flutter.plugin.platform.PlatformViewRegistryImpl access$100(io.flutter.plugin.platform.PlatformViewsController) -> a
    int access$200(io.flutter.plugin.platform.PlatformViewsController,double) -> a
    void access$300(io.flutter.plugin.platform.PlatformViewsController,int,int) -> a
    io.flutter.view.TextureRegistry access$400(io.flutter.plugin.platform.PlatformViewsController) -> b
    android.content.Context access$500(io.flutter.plugin.platform.PlatformViewsController) -> c
    io.flutter.plugin.platform.AccessibilityEventsDelegate access$600(io.flutter.plugin.platform.PlatformViewsController) -> d
    android.view.View access$700(io.flutter.plugin.platform.PlatformViewsController) -> e
    java.util.HashMap access$800(io.flutter.plugin.platform.PlatformViewsController) -> f
    io.flutter.plugin.editing.TextInputPlugin access$900(io.flutter.plugin.platform.PlatformViewsController) -> g
    void access$1000(io.flutter.plugin.platform.PlatformViewsController,io.flutter.plugin.platform.VirtualDisplayController) -> a
    void access$1100(io.flutter.plugin.platform.PlatformViewsController,io.flutter.plugin.platform.VirtualDisplayController) -> b
    java.util.List access$1200(java.lang.Object) -> a
    java.util.List access$1300(java.lang.Object,float) -> a
    io.flutter.embedding.engine.systemchannels.PlatformViewsChannel access$1400(io.flutter.plugin.platform.PlatformViewsController) -> h
io.flutter.plugin.platform.PlatformViewsController$1 -> io.flutter.plugin.platform.g$1:
    io.flutter.plugin.platform.PlatformViewsController this$0 -> a
    void <init>(io.flutter.plugin.platform.PlatformViewsController) -> <init>
    long createPlatformView(io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest) -> a
    void disposePlatformView(int) -> a
    void resizePlatformView(io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewResizeRequest,java.lang.Runnable) -> a
    void onTouch(io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewTouch) -> a
    void setDirection(int,int) -> a
    void clearFocus(int) -> b
    void ensureValidAndroidVersion() -> a
    void lambda$createPlatformView$0$PlatformViewsController$1(io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest,android.view.View,boolean) -> a
io.flutter.plugin.platform.PlatformViewsController$1$$Lambda$0 -> io.flutter.plugin.platform.h:
    io.flutter.plugin.platform.PlatformViewsController$1 arg$1 -> a
    io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest arg$2 -> b
    void <init>(io.flutter.plugin.platform.PlatformViewsController$1,io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest) -> <init>
    void onFocusChange(android.view.View,boolean) -> onFocusChange
io.flutter.plugin.platform.PlatformViewsController$1$1 -> io.flutter.plugin.platform.g$1$1:
    io.flutter.plugin.platform.VirtualDisplayController val$vdController -> a
    java.lang.Runnable val$onComplete -> b
    io.flutter.plugin.platform.PlatformViewsController$1 this$1 -> c
    void <init>(io.flutter.plugin.platform.PlatformViewsController$1,io.flutter.plugin.platform.VirtualDisplayController,java.lang.Runnable) -> <init>
    void run() -> run
io.flutter.plugin.platform.SingleViewPresentation -> io.flutter.plugin.platform.SingleViewPresentation:
    io.flutter.plugin.platform.PlatformViewFactory viewFactory -> viewFactory
    io.flutter.plugin.platform.AccessibilityEventsDelegate accessibilityEventsDelegate -> accessibilityEventsDelegate
    android.view.View$OnFocusChangeListener focusChangeListener -> focusChangeListener
    int viewId -> viewId
    java.lang.Object createParams -> createParams
    io.flutter.plugin.platform.SingleViewPresentation$AccessibilityDelegatingFrameLayout rootView -> rootView
    android.widget.FrameLayout container -> container
    io.flutter.plugin.platform.SingleViewPresentation$PresentationState state -> state
    boolean startFocused -> startFocused
    void <init>(android.content.Context,android.view.Display,io.flutter.plugin.platform.PlatformViewFactory,io.flutter.plugin.platform.AccessibilityEventsDelegate,int,java.lang.Object,android.view.View$OnFocusChangeListener) -> <init>
    void <init>(android.content.Context,android.view.Display,io.flutter.plugin.platform.AccessibilityEventsDelegate,io.flutter.plugin.platform.SingleViewPresentation$PresentationState,android.view.View$OnFocusChangeListener,boolean) -> <init>
    void onCreate(android.os.Bundle) -> onCreate
    io.flutter.plugin.platform.SingleViewPresentation$PresentationState detachState() -> detachState
    io.flutter.plugin.platform.PlatformView getView() -> getView
io.flutter.plugin.platform.SingleViewPresentation$AccessibilityDelegatingFrameLayout -> io.flutter.plugin.platform.SingleViewPresentation$a:
    io.flutter.plugin.platform.AccessibilityEventsDelegate accessibilityEventsDelegate -> a
    android.view.View embeddedView -> b
    void <init>(android.content.Context,io.flutter.plugin.platform.AccessibilityEventsDelegate,android.view.View) -> <init>
    boolean requestSendAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> requestSendAccessibilityEvent
io.flutter.plugin.platform.SingleViewPresentation$FakeWindowViewGroup -> io.flutter.plugin.platform.SingleViewPresentation$b:
    android.graphics.Rect viewBounds -> a
    android.graphics.Rect childRect -> b
    void <init>(android.content.Context) -> <init>
    void onLayout(boolean,int,int,int,int) -> onLayout
    void onMeasure(int,int) -> onMeasure
    int atMost(int) -> a
io.flutter.plugin.platform.SingleViewPresentation$ImmContext -> io.flutter.plugin.platform.SingleViewPresentation$c:
    android.view.inputmethod.InputMethodManager inputMethodManager -> a
    void <init>(android.content.Context) -> <init>
    void <init>(android.content.Context,android.view.inputmethod.InputMethodManager) -> <init>
    java.lang.Object getSystemService(java.lang.String) -> getSystemService
    android.content.Context createDisplayContext(android.view.Display) -> createDisplayContext
io.flutter.plugin.platform.SingleViewPresentation$PresentationContext -> io.flutter.plugin.platform.SingleViewPresentation$d:
    io.flutter.plugin.platform.SingleViewPresentation$WindowManagerHandler windowManagerHandler -> a
    android.view.WindowManager windowManager -> b
    void <init>(android.content.Context,io.flutter.plugin.platform.SingleViewPresentation$WindowManagerHandler) -> <init>
    java.lang.Object getSystemService(java.lang.String) -> getSystemService
    android.view.WindowManager getWindowManager() -> a
io.flutter.plugin.platform.SingleViewPresentation$PresentationState -> io.flutter.plugin.platform.SingleViewPresentation$e:
    io.flutter.plugin.platform.PlatformView platformView -> a
    io.flutter.plugin.platform.SingleViewPresentation$WindowManagerHandler windowManagerHandler -> b
    io.flutter.plugin.platform.SingleViewPresentation$FakeWindowViewGroup fakeWindowViewGroup -> c
    void <init>() -> <init>
    io.flutter.plugin.platform.SingleViewPresentation$FakeWindowViewGroup access$000(io.flutter.plugin.platform.SingleViewPresentation$PresentationState) -> a
    io.flutter.plugin.platform.SingleViewPresentation$FakeWindowViewGroup access$002(io.flutter.plugin.platform.SingleViewPresentation$PresentationState,io.flutter.plugin.platform.SingleViewPresentation$FakeWindowViewGroup) -> a
    io.flutter.plugin.platform.SingleViewPresentation$WindowManagerHandler access$100(io.flutter.plugin.platform.SingleViewPresentation$PresentationState) -> b
    io.flutter.plugin.platform.SingleViewPresentation$WindowManagerHandler access$102(io.flutter.plugin.platform.SingleViewPresentation$PresentationState,io.flutter.plugin.platform.SingleViewPresentation$WindowManagerHandler) -> a
    io.flutter.plugin.platform.PlatformView access$200(io.flutter.plugin.platform.SingleViewPresentation$PresentationState) -> c
    io.flutter.plugin.platform.PlatformView access$202(io.flutter.plugin.platform.SingleViewPresentation$PresentationState,io.flutter.plugin.platform.PlatformView) -> a
io.flutter.plugin.platform.SingleViewPresentation$WindowManagerHandler -> io.flutter.plugin.platform.SingleViewPresentation$f:
    android.view.WindowManager delegate -> b
    io.flutter.plugin.platform.SingleViewPresentation$FakeWindowViewGroup fakeWindowRootView -> a
    void <init>(android.view.WindowManager,io.flutter.plugin.platform.SingleViewPresentation$FakeWindowViewGroup) -> <init>
    android.view.WindowManager getWindowManager() -> a
    java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[]) -> invoke
    void addView(java.lang.Object[]) -> a
    void removeView(java.lang.Object[]) -> b
    void removeViewImmediate(java.lang.Object[]) -> c
    void updateViewLayout(java.lang.Object[]) -> d
io.flutter.plugin.platform.VirtualDisplayController -> io.flutter.plugin.platform.i:
    android.content.Context context -> a
    io.flutter.plugin.platform.AccessibilityEventsDelegate accessibilityEventsDelegate -> b
    int densityDpi -> c
    io.flutter.view.TextureRegistry$SurfaceTextureEntry textureEntry -> d
    android.view.View$OnFocusChangeListener focusChangeListener -> e
    android.hardware.display.VirtualDisplay virtualDisplay -> f
    io.flutter.plugin.platform.SingleViewPresentation presentation -> g
    android.view.Surface surface -> h
    io.flutter.plugin.platform.VirtualDisplayController create(android.content.Context,io.flutter.plugin.platform.AccessibilityEventsDelegate,io.flutter.plugin.platform.PlatformViewFactory,io.flutter.view.TextureRegistry$SurfaceTextureEntry,int,int,int,java.lang.Object,android.view.View$OnFocusChangeListener) -> a
    void <init>(android.content.Context,io.flutter.plugin.platform.AccessibilityEventsDelegate,android.hardware.display.VirtualDisplay,io.flutter.plugin.platform.PlatformViewFactory,android.view.Surface,io.flutter.view.TextureRegistry$SurfaceTextureEntry,android.view.View$OnFocusChangeListener,int,java.lang.Object) -> <init>
    void resize(int,int,java.lang.Runnable) -> a
    void dispose() -> a
    void onFlutterViewAttached(android.view.View) -> a
    void onInputConnectionLocked() -> b
    void onInputConnectionUnlocked() -> c
    android.view.View getView() -> d
io.flutter.plugin.platform.VirtualDisplayController$1 -> io.flutter.plugin.platform.i$1:
    android.view.View val$embeddedView -> a
    java.lang.Runnable val$onNewSizeFrameAvailable -> b
    io.flutter.plugin.platform.VirtualDisplayController this$0 -> c
    void <init>(io.flutter.plugin.platform.VirtualDisplayController,android.view.View,java.lang.Runnable) -> <init>
    void onViewAttachedToWindow(android.view.View) -> onViewAttachedToWindow
    void onViewDetachedFromWindow(android.view.View) -> onViewDetachedFromWindow
io.flutter.plugin.platform.VirtualDisplayController$1$1 -> io.flutter.plugin.platform.i$1$1:
    io.flutter.plugin.platform.VirtualDisplayController$1 this$1 -> a
    void <init>(io.flutter.plugin.platform.VirtualDisplayController$1) -> <init>
    void run() -> run
io.flutter.plugin.platform.VirtualDisplayController$OneTimeOnDrawListener -> io.flutter.plugin.platform.i$a:
    android.view.View mView -> a
    java.lang.Runnable mOnDrawRunnable -> b
    void schedule(android.view.View,java.lang.Runnable) -> a
    void <init>(android.view.View,java.lang.Runnable) -> <init>
    void onDraw() -> onDraw
io.flutter.plugin.platform.VirtualDisplayController$OneTimeOnDrawListener$1 -> io.flutter.plugin.platform.i$a$1:
    io.flutter.plugin.platform.VirtualDisplayController$OneTimeOnDrawListener this$0 -> a
    void <init>(io.flutter.plugin.platform.VirtualDisplayController$OneTimeOnDrawListener) -> <init>
    void run() -> run
io.flutter.plugins.GeneratedPluginRegistrant -> io.flutter.a.a:
    void <init>() -> <init>
    void registerWith(io.flutter.plugin.common.PluginRegistry) -> a
    boolean alreadyRegisteredWith(io.flutter.plugin.common.PluginRegistry) -> b
io.flutter.plugins.pathprovider.PathProviderPlugin -> io.flutter.a.a.a:
    android.content.Context context -> a
    io.flutter.plugin.common.MethodChannel channel -> b
    void <init>() -> <init>
    void registerWith(io.flutter.plugin.common.PluginRegistry$Registrar) -> a
    void onMethodCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result) -> onMethodCall
    java.lang.String getPathProviderTemporaryDirectory() -> a
    java.lang.String getApplicationSupportDirectory() -> b
    java.lang.String getPathProviderApplicationDocumentsDirectory() -> c
    java.lang.String getPathProviderStorageDirectory() -> d
    java.util.List getPathProviderExternalCacheDirectories() -> e
    java.util.List getPathProviderExternalStorageDirectories(java.lang.String) -> a
io.flutter.plugins.pathprovider.StorageDirectoryMapper -> io.flutter.a.a.b:
    java.lang.String androidType(java.lang.Integer) -> a
io.flutter.plugins.sharedpreferences.MethodCallHandlerImpl -> io.flutter.a.b.a:
    android.content.SharedPreferences preferences -> a
    void <init>(android.content.Context) -> <init>
    void onMethodCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result) -> onMethodCall
    void commitAsync(android.content.SharedPreferences$Editor,io.flutter.plugin.common.MethodChannel$Result) -> a
    java.util.List decodeList(java.lang.String) -> a
    java.lang.String encodeList(java.util.List) -> a
    java.util.Map getAllPrefs() -> a
io.flutter.plugins.sharedpreferences.MethodCallHandlerImpl$1 -> io.flutter.a.b.a$1:
    android.content.SharedPreferences$Editor val$editor -> a
    io.flutter.plugin.common.MethodChannel$Result val$result -> b
    io.flutter.plugins.sharedpreferences.MethodCallHandlerImpl this$0 -> c
    void <init>(io.flutter.plugins.sharedpreferences.MethodCallHandlerImpl,android.content.SharedPreferences$Editor,io.flutter.plugin.common.MethodChannel$Result) -> <init>
    java.lang.Boolean doInBackground(java.lang.Void[]) -> a
    void onPostExecute(java.lang.Boolean) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin -> io.flutter.a.b.b:
    io.flutter.plugin.common.MethodChannel channel -> a
    void <init>() -> <init>
    void registerWith(io.flutter.plugin.common.PluginRegistry$Registrar) -> a
    void setupChannel(io.flutter.plugin.common.BinaryMessenger,android.content.Context) -> a
io.flutter.util.PathUtils -> io.flutter.b.a:
    java.lang.String getFilesDir(android.content.Context) -> a
    java.lang.String getDataDirectory(android.content.Context) -> b
    java.lang.String getCacheDirectory(android.content.Context) -> c
io.flutter.util.Preconditions -> io.flutter.b.b:
    java.lang.Object checkNotNull(java.lang.Object) -> a
io.flutter.util.Predicate -> io.flutter.b.c:
    boolean test(java.lang.Object) -> a
io.flutter.view.AccessibilityBridge -> io.flutter.view.a:
    int FIRST_RESOURCE_ID -> a
    android.view.View rootAccessibilityView -> b
    io.flutter.embedding.engine.systemchannels.AccessibilityChannel accessibilityChannel -> c
    android.view.accessibility.AccessibilityManager accessibilityManager -> d
    io.flutter.view.AccessibilityViewEmbedder accessibilityViewEmbedder -> e
    io.flutter.plugin.platform.PlatformViewsAccessibilityDelegate platformViewsAccessibilityDelegate -> f
    android.content.ContentResolver contentResolver -> g
    java.util.Map flutterSemanticsTree -> h
    java.util.Map customAccessibilityActions -> i
    io.flutter.view.AccessibilityBridge$SemanticsNode accessibilityFocusedSemanticsNode -> j
    java.lang.Integer embeddedAccessibilityFocusedNodeId -> k
    java.lang.Integer embeddedInputFocusedNodeId -> l
    int accessibilityFeatureFlags -> m
    io.flutter.view.AccessibilityBridge$SemanticsNode inputFocusedSemanticsNode -> n
    io.flutter.view.AccessibilityBridge$SemanticsNode lastInputFocusedSemanticsNode -> o
    io.flutter.view.AccessibilityBridge$SemanticsNode hoveredObject -> p
    java.util.List flutterNavigationStack -> q
    int previousRouteId -> r
    java.lang.Integer lastLeftFrameInset -> s
    io.flutter.view.AccessibilityBridge$OnAccessibilityChangeListener onAccessibilityChangeListener -> t
    io.flutter.embedding.engine.systemchannels.AccessibilityChannel$AccessibilityMessageHandler accessibilityMessageHandler -> u
    android.view.accessibility.AccessibilityManager$AccessibilityStateChangeListener accessibilityStateChangeListener -> v
    android.view.accessibility.AccessibilityManager$TouchExplorationStateChangeListener touchExplorationStateChangeListener -> w
    android.database.ContentObserver animationScaleObserver -> x
    void <init>(android.view.View,io.flutter.embedding.engine.systemchannels.AccessibilityChannel,android.view.accessibility.AccessibilityManager,android.content.ContentResolver,io.flutter.plugin.platform.PlatformViewsAccessibilityDelegate) -> <init>
    void release() -> a
    boolean isAccessibilityEnabled() -> b
    boolean isTouchExplorationEnabled() -> c
    void setOnAccessibilityChangeListener(io.flutter.view.AccessibilityBridge$OnAccessibilityChangeListener) -> a
    void sendLatestAccessibilityFlagsToFlutter() -> e
    boolean shouldSetCollectionInfo(io.flutter.view.AccessibilityBridge$SemanticsNode) -> b
    android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo(int) -> createAccessibilityNodeInfo
    boolean performAction(int,int,android.os.Bundle) -> performAction
    boolean performCursorMoveAction(io.flutter.view.AccessibilityBridge$SemanticsNode,int,android.os.Bundle,boolean) -> a
    android.view.accessibility.AccessibilityNodeInfo findFocus(int) -> findFocus
    io.flutter.view.AccessibilityBridge$SemanticsNode getRootSemanticsNode() -> f
    io.flutter.view.AccessibilityBridge$SemanticsNode getOrCreateSemanticsNode(int) -> a
    io.flutter.view.AccessibilityBridge$CustomAccessibilityAction getOrCreateAccessibilityAction(int) -> b
    boolean onAccessibilityHoverEvent(android.view.MotionEvent) -> a
    void onTouchExplorationExit() -> g
    void handleTouchExploration(float,float) -> a
    void updateCustomAccessibilityActions(java.nio.ByteBuffer,java.lang.String[]) -> a
    void updateSemantics(java.nio.ByteBuffer,java.lang.String[]) -> b
    android.view.accessibility.AccessibilityEvent createTextChangedEvent(int,java.lang.String,java.lang.String) -> a
    void sendAccessibilityEvent(int,int) -> a
    void sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent) -> a
    void sendWindowChangeEvent(io.flutter.view.AccessibilityBridge$SemanticsNode) -> c
    void sendWindowContentChangeEvent(int) -> c
    android.view.accessibility.AccessibilityEvent obtainAccessibilityEvent(int,int) -> b
    void willRemoveSemanticsNode(io.flutter.view.AccessibilityBridge$SemanticsNode) -> d
    void reset() -> d
    boolean externalViewRequestSendAccessibilityEvent(android.view.View,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    boolean lambda$shouldSetCollectionInfo$1$AccessibilityBridge(io.flutter.view.AccessibilityBridge$SemanticsNode) -> a
    boolean lambda$shouldSetCollectionInfo$0$AccessibilityBridge(io.flutter.view.AccessibilityBridge$SemanticsNode,io.flutter.view.AccessibilityBridge$SemanticsNode) -> a
    android.view.View access$000(io.flutter.view.AccessibilityBridge) -> a
    void access$100(io.flutter.view.AccessibilityBridge,int,int) -> a
    android.view.accessibility.AccessibilityEvent access$200(io.flutter.view.AccessibilityBridge,int,int) -> b
    void access$300(io.flutter.view.AccessibilityBridge,android.view.accessibility.AccessibilityEvent) -> a
    io.flutter.embedding.engine.systemchannels.AccessibilityChannel$AccessibilityMessageHandler access$400(io.flutter.view.AccessibilityBridge) -> b
    io.flutter.embedding.engine.systemchannels.AccessibilityChannel access$500(io.flutter.view.AccessibilityBridge) -> c
    io.flutter.view.AccessibilityBridge$OnAccessibilityChangeListener access$600(io.flutter.view.AccessibilityBridge) -> d
    android.view.accessibility.AccessibilityManager access$700(io.flutter.view.AccessibilityBridge) -> e
    android.content.ContentResolver access$800(io.flutter.view.AccessibilityBridge) -> f
    int access$900(io.flutter.view.AccessibilityBridge) -> g
    int access$902(io.flutter.view.AccessibilityBridge,int) -> a
    void access$1000(io.flutter.view.AccessibilityBridge) -> h
    void access$1100(io.flutter.view.AccessibilityBridge) -> i
    io.flutter.view.AccessibilityBridge$SemanticsNode access$6000(io.flutter.view.AccessibilityBridge,int) -> b
    io.flutter.view.AccessibilityBridge$CustomAccessibilityAction access$6100(io.flutter.view.AccessibilityBridge,int) -> c
    void <clinit>() -> <clinit>
io.flutter.view.AccessibilityBridge$$Lambda$0 -> io.flutter.view.b:
    io.flutter.view.AccessibilityBridge$SemanticsNode arg$1 -> a
    void <init>(io.flutter.view.AccessibilityBridge$SemanticsNode) -> <init>
    boolean test(java.lang.Object) -> a
io.flutter.view.AccessibilityBridge$$Lambda$1 -> io.flutter.view.c:
    io.flutter.util.Predicate $instance -> a
    void <init>() -> <init>
    boolean test(java.lang.Object) -> a
    void <clinit>() -> <clinit>
io.flutter.view.AccessibilityBridge$1 -> io.flutter.view.a$1:
    io.flutter.view.AccessibilityBridge this$0 -> a
    void <init>(io.flutter.view.AccessibilityBridge) -> <init>
    void announce(java.lang.String) -> a
    void onTap(int) -> a
    void onLongPress(int) -> b
    void onTooltip(java.lang.String) -> b
    void updateCustomAccessibilityActions(java.nio.ByteBuffer,java.lang.String[]) -> a
    void updateSemantics(java.nio.ByteBuffer,java.lang.String[]) -> b
io.flutter.view.AccessibilityBridge$2 -> io.flutter.view.a$2:
    io.flutter.view.AccessibilityBridge this$0 -> a
    void <init>(io.flutter.view.AccessibilityBridge) -> <init>
    void onAccessibilityStateChanged(boolean) -> onAccessibilityStateChanged
io.flutter.view.AccessibilityBridge$3 -> io.flutter.view.a$3:
    io.flutter.view.AccessibilityBridge this$0 -> a
    void <init>(io.flutter.view.AccessibilityBridge,android.os.Handler) -> <init>
    void onChange(boolean) -> onChange
    void onChange(boolean,android.net.Uri) -> onChange
io.flutter.view.AccessibilityBridge$4 -> io.flutter.view.a$4:
    android.view.accessibility.AccessibilityManager val$accessibilityManager -> a
    io.flutter.view.AccessibilityBridge this$0 -> b
    void <init>(io.flutter.view.AccessibilityBridge,android.view.accessibility.AccessibilityManager) -> <init>
    void onTouchExplorationStateChanged(boolean) -> onTouchExplorationStateChanged
io.flutter.view.AccessibilityBridge$AccessibilityFeature -> io.flutter.view.a$a:
    io.flutter.view.AccessibilityBridge$AccessibilityFeature ACCESSIBLE_NAVIGATION -> a
    io.flutter.view.AccessibilityBridge$AccessibilityFeature INVERT_COLORS -> b
    io.flutter.view.AccessibilityBridge$AccessibilityFeature DISABLE_ANIMATIONS -> c
    int value -> d
    io.flutter.view.AccessibilityBridge$AccessibilityFeature[] $VALUES -> e
    io.flutter.view.AccessibilityBridge$AccessibilityFeature[] values() -> values
    io.flutter.view.AccessibilityBridge$AccessibilityFeature valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    void <clinit>() -> <clinit>
io.flutter.view.AccessibilityBridge$Action -> io.flutter.view.a$b:
    io.flutter.view.AccessibilityBridge$Action TAP -> a
    io.flutter.view.AccessibilityBridge$Action LONG_PRESS -> b
    io.flutter.view.AccessibilityBridge$Action SCROLL_LEFT -> c
    io.flutter.view.AccessibilityBridge$Action SCROLL_RIGHT -> d
    io.flutter.view.AccessibilityBridge$Action SCROLL_UP -> e
    io.flutter.view.AccessibilityBridge$Action SCROLL_DOWN -> f
    io.flutter.view.AccessibilityBridge$Action INCREASE -> g
    io.flutter.view.AccessibilityBridge$Action DECREASE -> h
    io.flutter.view.AccessibilityBridge$Action SHOW_ON_SCREEN -> i
    io.flutter.view.AccessibilityBridge$Action MOVE_CURSOR_FORWARD_BY_CHARACTER -> j
    io.flutter.view.AccessibilityBridge$Action MOVE_CURSOR_BACKWARD_BY_CHARACTER -> k
    io.flutter.view.AccessibilityBridge$Action SET_SELECTION -> l
    io.flutter.view.AccessibilityBridge$Action COPY -> m
    io.flutter.view.AccessibilityBridge$Action CUT -> n
    io.flutter.view.AccessibilityBridge$Action PASTE -> o
    io.flutter.view.AccessibilityBridge$Action DID_GAIN_ACCESSIBILITY_FOCUS -> p
    io.flutter.view.AccessibilityBridge$Action DID_LOSE_ACCESSIBILITY_FOCUS -> q
    io.flutter.view.AccessibilityBridge$Action CUSTOM_ACTION -> r
    io.flutter.view.AccessibilityBridge$Action DISMISS -> s
    io.flutter.view.AccessibilityBridge$Action MOVE_CURSOR_FORWARD_BY_WORD -> t
    io.flutter.view.AccessibilityBridge$Action MOVE_CURSOR_BACKWARD_BY_WORD -> u
    int value -> v
    io.flutter.view.AccessibilityBridge$Action[] $VALUES -> w
    io.flutter.view.AccessibilityBridge$Action[] values() -> values
    io.flutter.view.AccessibilityBridge$Action valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    void <clinit>() -> <clinit>
io.flutter.view.AccessibilityBridge$CustomAccessibilityAction -> io.flutter.view.a$c:
    int resourceId -> a
    int id -> b
    int overrideId -> c
    java.lang.String label -> d
    java.lang.String hint -> e
    void <init>() -> <init>
    java.lang.String access$2700(io.flutter.view.AccessibilityBridge$CustomAccessibilityAction) -> a
    int access$3100(io.flutter.view.AccessibilityBridge$CustomAccessibilityAction) -> b
    java.lang.String access$3200(io.flutter.view.AccessibilityBridge$CustomAccessibilityAction) -> c
    int access$3600(io.flutter.view.AccessibilityBridge$CustomAccessibilityAction) -> d
    int access$3602(io.flutter.view.AccessibilityBridge$CustomAccessibilityAction,int) -> a
    int access$3102(io.flutter.view.AccessibilityBridge$CustomAccessibilityAction,int) -> b
    int access$3802(io.flutter.view.AccessibilityBridge$CustomAccessibilityAction,int) -> c
    java.lang.String access$3202(io.flutter.view.AccessibilityBridge$CustomAccessibilityAction,java.lang.String) -> a
    java.lang.String access$2702(io.flutter.view.AccessibilityBridge$CustomAccessibilityAction,java.lang.String) -> b
    int access$3800(io.flutter.view.AccessibilityBridge$CustomAccessibilityAction) -> e
io.flutter.view.AccessibilityBridge$Flag -> io.flutter.view.a$d:
    io.flutter.view.AccessibilityBridge$Flag HAS_CHECKED_STATE -> a
    io.flutter.view.AccessibilityBridge$Flag IS_CHECKED -> b
    io.flutter.view.AccessibilityBridge$Flag IS_SELECTED -> c
    io.flutter.view.AccessibilityBridge$Flag IS_BUTTON -> d
    io.flutter.view.AccessibilityBridge$Flag IS_TEXT_FIELD -> e
    io.flutter.view.AccessibilityBridge$Flag IS_FOCUSED -> f
    io.flutter.view.AccessibilityBridge$Flag HAS_ENABLED_STATE -> g
    io.flutter.view.AccessibilityBridge$Flag IS_ENABLED -> h
    io.flutter.view.AccessibilityBridge$Flag IS_IN_MUTUALLY_EXCLUSIVE_GROUP -> i
    io.flutter.view.AccessibilityBridge$Flag IS_HEADER -> j
    io.flutter.view.AccessibilityBridge$Flag IS_OBSCURED -> k
    io.flutter.view.AccessibilityBridge$Flag SCOPES_ROUTE -> l
    io.flutter.view.AccessibilityBridge$Flag NAMES_ROUTE -> m
    io.flutter.view.AccessibilityBridge$Flag IS_HIDDEN -> n
    io.flutter.view.AccessibilityBridge$Flag IS_IMAGE -> o
    io.flutter.view.AccessibilityBridge$Flag IS_LIVE_REGION -> p
    io.flutter.view.AccessibilityBridge$Flag HAS_TOGGLED_STATE -> q
    io.flutter.view.AccessibilityBridge$Flag IS_TOGGLED -> r
    io.flutter.view.AccessibilityBridge$Flag HAS_IMPLICIT_SCROLLING -> s
    io.flutter.view.AccessibilityBridge$Flag IS_READ_ONLY -> t
    io.flutter.view.AccessibilityBridge$Flag IS_FOCUSABLE -> u
    io.flutter.view.AccessibilityBridge$Flag IS_LINK -> v
    int value -> w
    io.flutter.view.AccessibilityBridge$Flag[] $VALUES -> x
    io.flutter.view.AccessibilityBridge$Flag[] values() -> values
    io.flutter.view.AccessibilityBridge$Flag valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    void <clinit>() -> <clinit>
io.flutter.view.AccessibilityBridge$OnAccessibilityChangeListener -> io.flutter.view.a$e:
    void onAccessibilityChanged(boolean,boolean) -> a
io.flutter.view.AccessibilityBridge$SemanticsNode -> io.flutter.view.a$f:
    io.flutter.view.AccessibilityBridge accessibilityBridge -> a
    int id -> b
    int flags -> c
    int actions -> d
    int maxValueLength -> e
    int currentValueLength -> f
    int textSelectionBase -> g
    int textSelectionExtent -> h
    int platformViewId -> i
    int scrollChildren -> j
    int scrollIndex -> k
    float scrollPosition -> l
    float scrollExtentMax -> m
    float scrollExtentMin -> n
    java.lang.String label -> o
    java.lang.String value -> p
    java.lang.String increasedValue -> q
    java.lang.String decreasedValue -> r
    java.lang.String hint -> s
    io.flutter.view.AccessibilityBridge$TextDirection textDirection -> t
    boolean hadPreviousConfig -> u
    int previousFlags -> v
    int previousActions -> w
    int previousTextSelectionBase -> x
    int previousTextSelectionExtent -> y
    float previousScrollPosition -> z
    float previousScrollExtentMax -> A
    float previousScrollExtentMin -> B
    java.lang.String previousValue -> C
    java.lang.String previousLabel -> D
    float left -> E
    float top -> F
    float right -> G
    float bottom -> H
    float[] transform -> I
    io.flutter.view.AccessibilityBridge$SemanticsNode parent -> J
    java.util.List childrenInTraversalOrder -> K
    java.util.List childrenInHitTestOrder -> L
    java.util.List customAccessibilityActions -> M
    io.flutter.view.AccessibilityBridge$CustomAccessibilityAction onTapOverride -> N
    io.flutter.view.AccessibilityBridge$CustomAccessibilityAction onLongPressOverride -> O
    boolean inverseTransformDirty -> P
    float[] inverseTransform -> Q
    boolean globalGeometryDirty -> R
    float[] globalTransform -> S
    android.graphics.Rect globalRect -> T
    boolean nullableHasAncestor(io.flutter.view.AccessibilityBridge$SemanticsNode,io.flutter.util.Predicate) -> b
    void <init>(io.flutter.view.AccessibilityBridge) -> <init>
    io.flutter.view.AccessibilityBridge$SemanticsNode getAncestor(io.flutter.util.Predicate) -> a
    boolean hasAction(io.flutter.view.AccessibilityBridge$Action) -> a
    boolean hadAction(io.flutter.view.AccessibilityBridge$Action) -> b
    boolean hasFlag(io.flutter.view.AccessibilityBridge$Flag) -> a
    boolean hadFlag(io.flutter.view.AccessibilityBridge$Flag) -> b
    boolean didScroll() -> a
    boolean didChangeLabel() -> b
    void updateWith(java.nio.ByteBuffer,java.lang.String[]) -> a
    void ensureInverseTransform() -> c
    android.graphics.Rect getGlobalRect() -> d
    io.flutter.view.AccessibilityBridge$SemanticsNode hitTest(float[]) -> a
    boolean isFocusable() -> e
    void collectRoutes(java.util.List) -> a
    java.lang.String getRouteName() -> f
    void updateRecursively(float[],java.util.Set,boolean) -> a
    void transformPoint(float[],float[],float[]) -> a
    float min(float,float,float,float) -> a
    float max(float,float,float,float) -> b
    java.lang.String getValueLabelHint() -> g
    int access$1200(io.flutter.view.AccessibilityBridge$SemanticsNode) -> a
    boolean access$1300(io.flutter.view.AccessibilityBridge$SemanticsNode,io.flutter.util.Predicate) -> a
    int access$1400(io.flutter.view.AccessibilityBridge$SemanticsNode) -> b
    android.graphics.Rect access$1500(io.flutter.view.AccessibilityBridge$SemanticsNode) -> c
    int access$1600(io.flutter.view.AccessibilityBridge$SemanticsNode) -> d
    boolean access$1700(io.flutter.view.AccessibilityBridge$SemanticsNode) -> e
    boolean access$1800(io.flutter.view.AccessibilityBridge$SemanticsNode,io.flutter.view.AccessibilityBridge$Flag) -> a
    int access$1900(io.flutter.view.AccessibilityBridge$SemanticsNode) -> f
    int access$2000(io.flutter.view.AccessibilityBridge$SemanticsNode) -> g
    boolean access$2100(io.flutter.view.AccessibilityBridge$SemanticsNode,io.flutter.view.AccessibilityBridge$Action) -> a
    int access$2200(io.flutter.view.AccessibilityBridge$SemanticsNode) -> h
    java.lang.String access$2300(io.flutter.view.AccessibilityBridge$SemanticsNode) -> i
    int access$2400(io.flutter.view.AccessibilityBridge$SemanticsNode) -> j
    io.flutter.view.AccessibilityBridge$SemanticsNode access$2500(io.flutter.view.AccessibilityBridge$SemanticsNode) -> k
    io.flutter.view.AccessibilityBridge$CustomAccessibilityAction access$2600(io.flutter.view.AccessibilityBridge$SemanticsNode) -> l
    io.flutter.view.AccessibilityBridge$CustomAccessibilityAction access$2800(io.flutter.view.AccessibilityBridge$SemanticsNode) -> m
    java.lang.String access$2900(io.flutter.view.AccessibilityBridge$SemanticsNode) -> n
    java.util.List access$3000(io.flutter.view.AccessibilityBridge$SemanticsNode) -> o
    java.util.List access$3300(io.flutter.view.AccessibilityBridge$SemanticsNode) -> p
    java.lang.String access$2302(io.flutter.view.AccessibilityBridge$SemanticsNode,java.lang.String) -> a
    java.lang.String access$3400(io.flutter.view.AccessibilityBridge$SemanticsNode) -> q
    java.lang.String access$3500(io.flutter.view.AccessibilityBridge$SemanticsNode) -> r
    int access$1602(io.flutter.view.AccessibilityBridge$SemanticsNode,int) -> a
    io.flutter.view.AccessibilityBridge$SemanticsNode access$3700(io.flutter.view.AccessibilityBridge$SemanticsNode,float[]) -> a
    void access$3900(io.flutter.view.AccessibilityBridge$SemanticsNode,java.nio.ByteBuffer,java.lang.String[]) -> a
    boolean access$4000(io.flutter.view.AccessibilityBridge$SemanticsNode) -> s
    boolean access$4102(io.flutter.view.AccessibilityBridge$SemanticsNode,boolean) -> a
    boolean access$4202(io.flutter.view.AccessibilityBridge$SemanticsNode,boolean) -> b
    void access$4300(io.flutter.view.AccessibilityBridge$SemanticsNode,float[],java.util.Set,boolean) -> a
    void access$4400(io.flutter.view.AccessibilityBridge$SemanticsNode,java.util.List) -> a
    boolean access$4500(io.flutter.view.AccessibilityBridge$SemanticsNode) -> t
    float access$4600(io.flutter.view.AccessibilityBridge$SemanticsNode) -> u
    float access$4700(io.flutter.view.AccessibilityBridge$SemanticsNode) -> v
    float access$4800(io.flutter.view.AccessibilityBridge$SemanticsNode) -> w
    boolean access$4900(io.flutter.view.AccessibilityBridge$SemanticsNode,io.flutter.view.AccessibilityBridge$Action) -> b
    int access$5000(io.flutter.view.AccessibilityBridge$SemanticsNode) -> x
    java.util.List access$5100(io.flutter.view.AccessibilityBridge$SemanticsNode) -> y
    java.lang.String access$5200(io.flutter.view.AccessibilityBridge$SemanticsNode) -> z
    java.lang.String access$5300(io.flutter.view.AccessibilityBridge$SemanticsNode) -> A
    boolean access$5400(io.flutter.view.AccessibilityBridge$SemanticsNode,io.flutter.view.AccessibilityBridge$Flag) -> b
    boolean access$5500(io.flutter.view.AccessibilityBridge$SemanticsNode) -> B
    java.lang.String access$5600(io.flutter.view.AccessibilityBridge$SemanticsNode) -> C
    int access$5700(io.flutter.view.AccessibilityBridge$SemanticsNode) -> D
    int access$5800(io.flutter.view.AccessibilityBridge$SemanticsNode) -> E
    java.lang.String access$5900(io.flutter.view.AccessibilityBridge$SemanticsNode) -> F
    io.flutter.view.AccessibilityBridge$SemanticsNode access$2502(io.flutter.view.AccessibilityBridge$SemanticsNode,io.flutter.view.AccessibilityBridge$SemanticsNode) -> a
io.flutter.view.AccessibilityBridge$TextDirection -> io.flutter.view.a$g:
    io.flutter.view.AccessibilityBridge$TextDirection UNKNOWN -> a
    io.flutter.view.AccessibilityBridge$TextDirection LTR -> b
    io.flutter.view.AccessibilityBridge$TextDirection RTL -> c
    io.flutter.view.AccessibilityBridge$TextDirection[] $VALUES -> d
    io.flutter.view.AccessibilityBridge$TextDirection[] values() -> values
    io.flutter.view.AccessibilityBridge$TextDirection valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    io.flutter.view.AccessibilityBridge$TextDirection fromInt(int) -> a
    void <clinit>() -> <clinit>
io.flutter.view.AccessibilityViewEmbedder -> io.flutter.view.AccessibilityViewEmbedder:
    java.lang.String TAG -> TAG
    io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors reflectionAccessors -> reflectionAccessors
    android.view.View rootAccessibilityView -> rootAccessibilityView
    android.util.SparseArray flutterIdToOrigin -> flutterIdToOrigin
    java.util.Map originToFlutterId -> originToFlutterId
    java.util.Map embeddedViewToDisplayBounds -> embeddedViewToDisplayBounds
    int nextFlutterId -> nextFlutterId
    void <init>(android.view.View,int) -> <init>
    android.view.accessibility.AccessibilityNodeInfo getRootNode(android.view.View,int,android.graphics.Rect) -> getRootNode
    android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo(int) -> createAccessibilityNodeInfo
    android.view.accessibility.AccessibilityNodeInfo convertToFlutterNode(android.view.accessibility.AccessibilityNodeInfo,int,android.view.View) -> convertToFlutterNode
    void setFlutterNodeParent(android.view.accessibility.AccessibilityNodeInfo,android.view.View,android.view.accessibility.AccessibilityNodeInfo) -> setFlutterNodeParent
    void addChildrenToFlutterNode(android.view.accessibility.AccessibilityNodeInfo,android.view.View,android.view.accessibility.AccessibilityNodeInfo) -> addChildrenToFlutterNode
    void cacheVirtualIdMappings(android.view.View,int,int) -> cacheVirtualIdMappings
    void setFlutterNodesTranslateBounds(android.view.accessibility.AccessibilityNodeInfo,android.graphics.Rect,android.view.accessibility.AccessibilityNodeInfo) -> setFlutterNodesTranslateBounds
    void copyAccessibilityFields(android.view.accessibility.AccessibilityNodeInfo,android.view.accessibility.AccessibilityNodeInfo) -> copyAccessibilityFields
    boolean requestSendAccessibilityEvent(android.view.View,android.view.View,android.view.accessibility.AccessibilityEvent) -> requestSendAccessibilityEvent
    boolean performAction(int,int,android.os.Bundle) -> performAction
    java.lang.Integer getRecordFlutterId(android.view.View,android.view.accessibility.AccessibilityRecord) -> getRecordFlutterId
    boolean onAccessibilityHoverEvent(int,android.view.MotionEvent) -> onAccessibilityHoverEvent
io.flutter.view.AccessibilityViewEmbedder$1 -> io.flutter.view.AccessibilityViewEmbedder$1:
io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors -> io.flutter.view.AccessibilityViewEmbedder$a:
    java.lang.reflect.Method getSourceNodeId -> a
    java.lang.reflect.Method getParentNodeId -> b
    java.lang.reflect.Method getRecordSourceNodeId -> c
    java.lang.reflect.Method getChildId -> d
    java.lang.reflect.Field childNodeIdsField -> e
    java.lang.reflect.Method longArrayGetIndex -> f
    void <init>() -> <init>
    int getVirtualNodeId(long) -> b
    java.lang.Long getSourceNodeId(android.view.accessibility.AccessibilityNodeInfo) -> a
    java.lang.Long getChildId(android.view.accessibility.AccessibilityNodeInfo,int) -> a
    java.lang.Long getParentNodeId(android.view.accessibility.AccessibilityNodeInfo) -> b
    java.lang.Long yoinkParentIdFromParcel(android.view.accessibility.AccessibilityNodeInfo) -> c
    boolean isBitSet(long,int) -> a
    java.lang.Long getRecordSourceNodeId(android.view.accessibility.AccessibilityRecord) -> a
    void <init>(io.flutter.view.AccessibilityViewEmbedder$1) -> <init>
    java.lang.Long access$100(io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors,android.view.accessibility.AccessibilityNodeInfo) -> a
    int access$200(long) -> a
    java.lang.Long access$300(io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors,android.view.accessibility.AccessibilityNodeInfo) -> b
    java.lang.Long access$500(io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors,android.view.accessibility.AccessibilityNodeInfo,int) -> a
    java.lang.Long access$600(io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors,android.view.accessibility.AccessibilityRecord) -> a
io.flutter.view.AccessibilityViewEmbedder$ViewAndId -> io.flutter.view.AccessibilityViewEmbedder$b:
    android.view.View view -> a
    int id -> b
    void <init>(android.view.View,int) -> <init>
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void <init>(android.view.View,int,io.flutter.view.AccessibilityViewEmbedder$1) -> <init>
io.flutter.view.FlutterCallbackInformation -> io.flutter.view.FlutterCallbackInformation:
    java.lang.String callbackName -> callbackName
    java.lang.String callbackClassName -> callbackClassName
    java.lang.String callbackLibraryPath -> callbackLibraryPath
    io.flutter.view.FlutterCallbackInformation lookupCallbackInformation(long) -> lookupCallbackInformation
    void <init>(java.lang.String,java.lang.String,java.lang.String) -> <init>
io.flutter.view.FlutterMain -> io.flutter.view.d:
    boolean isRunningInRobolectricTest -> a
    void startInitialization(android.content.Context) -> a
    void ensureInitializationComplete(android.content.Context,java.lang.String[]) -> a
    java.lang.String findAppBundlePath() -> a
    void <clinit>() -> <clinit>
io.flutter.view.FlutterNativeView -> io.flutter.view.e:
    io.flutter.app.FlutterPluginRegistry mPluginRegistry -> a
    io.flutter.embedding.engine.dart.DartExecutor dartExecutor -> b
    io.flutter.view.FlutterView mFlutterView -> c
    io.flutter.embedding.engine.FlutterJNI mFlutterJNI -> d
    android.content.Context mContext -> e
    boolean applicationIsRunning -> f
    io.flutter.embedding.engine.renderer.FlutterUiDisplayListener flutterUiDisplayListener -> g
    void <init>(android.content.Context) -> <init>
    void <init>(android.content.Context,boolean) -> <init>
    void detachFromFlutterView() -> a
    void destroy() -> b
    io.flutter.embedding.engine.dart.DartExecutor getDartExecutor() -> c
    io.flutter.app.FlutterPluginRegistry getPluginRegistry() -> d
    void attachViewAndActivity(io.flutter.view.FlutterView,android.app.Activity) -> a
    boolean isAttached() -> e
    void assertAttached() -> f
    void runFromBundle(io.flutter.view.FlutterRunArguments) -> a
    boolean isApplicationRunning() -> g
    void send(java.lang.String,java.nio.ByteBuffer) -> a
    void send(java.lang.String,java.nio.ByteBuffer,io.flutter.plugin.common.BinaryMessenger$BinaryReply) -> a
    void setMessageHandler(java.lang.String,io.flutter.plugin.common.BinaryMessenger$BinaryMessageHandler) -> a
    io.flutter.embedding.engine.FlutterJNI getFlutterJNI() -> h
    void attach(io.flutter.view.FlutterNativeView,boolean) -> a
    io.flutter.view.FlutterView access$000(io.flutter.view.FlutterNativeView) -> a
    io.flutter.app.FlutterPluginRegistry access$200(io.flutter.view.FlutterNativeView) -> b
io.flutter.view.FlutterNativeView$1 -> io.flutter.view.e$1:
    io.flutter.view.FlutterNativeView this$0 -> a
    void <init>(io.flutter.view.FlutterNativeView) -> <init>
    void onFlutterUiDisplayed() -> a
    void onFlutterUiNoLongerDisplayed() -> b
io.flutter.view.FlutterNativeView$EngineLifecycleListenerImpl -> io.flutter.view.e$a:
    io.flutter.view.FlutterNativeView this$0 -> a
    void <init>(io.flutter.view.FlutterNativeView) -> <init>
    void onPreEngineRestart() -> a
    void <init>(io.flutter.view.FlutterNativeView,io.flutter.view.FlutterNativeView$1) -> <init>
io.flutter.view.FlutterRunArguments -> io.flutter.view.f:
    java.lang.String bundlePath -> a
    java.lang.String entrypoint -> b
    java.lang.String libraryPath -> c
    void <init>() -> <init>
io.flutter.view.FlutterView -> io.flutter.view.g:
    io.flutter.embedding.engine.dart.DartExecutor dartExecutor -> a
    io.flutter.embedding.engine.renderer.FlutterRenderer flutterRenderer -> b
    io.flutter.embedding.engine.systemchannels.NavigationChannel navigationChannel -> c
    io.flutter.embedding.engine.systemchannels.KeyEventChannel keyEventChannel -> d
    io.flutter.embedding.engine.systemchannels.LifecycleChannel lifecycleChannel -> e
    io.flutter.embedding.engine.systemchannels.LocalizationChannel localizationChannel -> f
    io.flutter.embedding.engine.systemchannels.PlatformChannel platformChannel -> g
    io.flutter.embedding.engine.systemchannels.SettingsChannel settingsChannel -> h
    io.flutter.embedding.engine.systemchannels.SystemChannel systemChannel -> i
    android.view.inputmethod.InputMethodManager mImm -> j
    io.flutter.plugin.editing.TextInputPlugin mTextInputPlugin -> k
    io.flutter.embedding.android.AndroidKeyProcessor androidKeyProcessor -> l
    io.flutter.embedding.android.AndroidTouchProcessor androidTouchProcessor -> m
    io.flutter.view.AccessibilityBridge mAccessibilityNodeProvider -> n
    android.view.SurfaceHolder$Callback mSurfaceCallback -> o
    io.flutter.view.FlutterView$ViewportMetrics mMetrics -> p
    java.util.List mActivityLifecycleListeners -> q
    java.util.List mFirstFrameListeners -> r
    java.util.concurrent.atomic.AtomicLong nextTextureId -> s
    io.flutter.view.FlutterNativeView mNativeView -> t
    boolean mIsSoftwareRenderingEnabled -> u
    boolean didRenderFirstFrame -> v
    io.flutter.view.AccessibilityBridge$OnAccessibilityChangeListener onAccessibilityChangeListener -> w
    void <init>(android.content.Context,android.util.AttributeSet,io.flutter.view.FlutterNativeView) -> <init>
    android.app.Activity getActivity(android.content.Context) -> a
    io.flutter.embedding.engine.dart.DartExecutor getDartExecutor() -> getDartExecutor
    boolean onKeyUp(int,android.view.KeyEvent) -> onKeyUp
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    io.flutter.view.FlutterNativeView getFlutterNativeView() -> getFlutterNativeView
    io.flutter.app.FlutterPluginRegistry getPluginRegistry() -> getPluginRegistry
    void addActivityLifecycleListener(io.flutter.plugin.common.ActivityLifecycleListener) -> a
    void onStart() -> b
    void onPause() -> c
    void onPostResume() -> d
    void onStop() -> e
    void onMemoryPressure() -> f
    void addFirstFrameListener(io.flutter.view.FlutterView$FirstFrameListener) -> a
    void removeFirstFrameListener(io.flutter.view.FlutterView$FirstFrameListener) -> b
    void setInitialRoute(java.lang.String) -> setInitialRoute
    void popRoute() -> g
    void sendUserPlatformSettingsToDart() -> n
    void sendLocalesToDart(android.content.res.Configuration) -> a
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    float getDevicePixelRatio() -> getDevicePixelRatio
    io.flutter.view.FlutterNativeView detach() -> h
    void destroy() -> i
    android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo) -> onCreateInputConnection
    boolean checkInputConnectionProxy(android.view.View) -> checkInputConnectionProxy
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    boolean onHoverEvent(android.view.MotionEvent) -> onHoverEvent
    boolean onGenericMotionEvent(android.view.MotionEvent) -> onGenericMotionEvent
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    io.flutter.view.FlutterView$ZeroSides calculateShouldZeroSides() -> j
    int calculateBottomKeyboardInset(android.view.WindowInsets) -> a
    android.view.WindowInsets onApplyWindowInsets(android.view.WindowInsets) -> onApplyWindowInsets
    boolean fitSystemWindows(android.graphics.Rect) -> fitSystemWindows
    boolean isAttached() -> o
    void assertAttached() -> k
    void preRun() -> p
    void resetAccessibilityTree() -> l
    void postRun() -> q
    void runFromBundle(io.flutter.view.FlutterRunArguments) -> a
    android.graphics.Bitmap getBitmap() -> getBitmap
    void updateViewportMetrics() -> r
    void onFirstFrame() -> m
    void onAttachedToWindow() -> onAttachedToWindow
    void onDetachedFromWindow() -> onDetachedFromWindow
    void resetWillNotDraw(boolean,boolean) -> a
    android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider() -> getAccessibilityNodeProvider
    void send(java.lang.String,java.nio.ByteBuffer) -> a
    void send(java.lang.String,java.nio.ByteBuffer,io.flutter.plugin.common.BinaryMessenger$BinaryReply) -> a
    void setMessageHandler(java.lang.String,io.flutter.plugin.common.BinaryMessenger$BinaryMessageHandler) -> a
    io.flutter.view.TextureRegistry$SurfaceTextureEntry createSurfaceTexture() -> a
    void access$000(io.flutter.view.FlutterView,boolean,boolean) -> a
    io.flutter.view.FlutterNativeView access$100(io.flutter.view.FlutterView) -> a
io.flutter.view.FlutterView$1 -> io.flutter.view.g$1:
    io.flutter.view.FlutterView this$0 -> a
    void <init>(io.flutter.view.FlutterView) -> <init>
    void onAccessibilityChanged(boolean,boolean) -> a
io.flutter.view.FlutterView$2 -> io.flutter.view.g$2:
    io.flutter.view.FlutterView this$0 -> a
    void <init>(io.flutter.view.FlutterView) -> <init>
    void surfaceCreated(android.view.SurfaceHolder) -> surfaceCreated
    void surfaceChanged(android.view.SurfaceHolder,int,int,int) -> surfaceChanged
    void surfaceDestroyed(android.view.SurfaceHolder) -> surfaceDestroyed
io.flutter.view.FlutterView$3 -> io.flutter.view.g$3:
    io.flutter.plugin.platform.PlatformPlugin val$platformPlugin -> a
    io.flutter.view.FlutterView this$0 -> b
    void <init>(io.flutter.view.FlutterView,io.flutter.plugin.platform.PlatformPlugin) -> <init>
    void onPostResume() -> a
io.flutter.view.FlutterView$FirstFrameListener -> io.flutter.view.g$a:
    void onFirstFrame() -> a
io.flutter.view.FlutterView$Provider -> io.flutter.view.g$b:
io.flutter.view.FlutterView$SurfaceTextureRegistryEntry -> io.flutter.view.g$c:
    long id -> b
    android.graphics.SurfaceTexture surfaceTexture -> c
    boolean released -> d
    android.graphics.SurfaceTexture$OnFrameAvailableListener onFrameListener -> e
    io.flutter.view.FlutterView this$0 -> a
    void <init>(io.flutter.view.FlutterView,long,android.graphics.SurfaceTexture) -> <init>
    android.graphics.SurfaceTexture surfaceTexture() -> a
    long id() -> b
    void release() -> c
    boolean access$200(io.flutter.view.FlutterView$SurfaceTextureRegistryEntry) -> a
    long access$300(io.flutter.view.FlutterView$SurfaceTextureRegistryEntry) -> b
io.flutter.view.FlutterView$SurfaceTextureRegistryEntry$1 -> io.flutter.view.g$c$1:
    io.flutter.view.FlutterView$SurfaceTextureRegistryEntry this$1 -> a
    void <init>(io.flutter.view.FlutterView$SurfaceTextureRegistryEntry) -> <init>
    void onFrameAvailable(android.graphics.SurfaceTexture) -> onFrameAvailable
io.flutter.view.FlutterView$ViewportMetrics -> io.flutter.view.g$d:
    float devicePixelRatio -> a
    int physicalWidth -> b
    int physicalHeight -> c
    int physicalPaddingTop -> d
    int physicalPaddingRight -> e
    int physicalPaddingBottom -> f
    int physicalPaddingLeft -> g
    int physicalViewInsetTop -> h
    int physicalViewInsetRight -> i
    int physicalViewInsetBottom -> j
    int physicalViewInsetLeft -> k
    int systemGestureInsetTop -> l
    int systemGestureInsetRight -> m
    int systemGestureInsetBottom -> n
    int systemGestureInsetLeft -> o
    void <init>() -> <init>
io.flutter.view.FlutterView$ZeroSides -> io.flutter.view.g$e:
    io.flutter.view.FlutterView$ZeroSides NONE -> a
    io.flutter.view.FlutterView$ZeroSides LEFT -> b
    io.flutter.view.FlutterView$ZeroSides RIGHT -> c
    io.flutter.view.FlutterView$ZeroSides BOTH -> d
    io.flutter.view.FlutterView$ZeroSides[] $VALUES -> e
    io.flutter.view.FlutterView$ZeroSides[] values() -> values
    io.flutter.view.FlutterView$ZeroSides valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
io.flutter.view.TextureRegistry -> io.flutter.view.h:
    io.flutter.view.TextureRegistry$SurfaceTextureEntry createSurfaceTexture() -> a
io.flutter.view.TextureRegistry$SurfaceTextureEntry -> io.flutter.view.h$a:
    android.graphics.SurfaceTexture surfaceTexture() -> a
    long id() -> b
    void release() -> c
io.flutter.view.VsyncWaiter -> io.flutter.view.i:
    io.flutter.view.VsyncWaiter instance -> a
    android.view.WindowManager windowManager -> b
    io.flutter.embedding.engine.FlutterJNI$AsyncWaitForVsyncDelegate asyncWaitForVsyncDelegate -> c
    io.flutter.view.VsyncWaiter getInstance(android.view.WindowManager) -> a
    void <init>(android.view.WindowManager) -> <init>
    void init() -> a
    android.view.WindowManager access$000(io.flutter.view.VsyncWaiter) -> a
io.flutter.view.VsyncWaiter$1 -> io.flutter.view.i$1:
    io.flutter.view.VsyncWaiter this$0 -> a
    void <init>(io.flutter.view.VsyncWaiter) -> <init>
    void asyncWaitForVsync(long) -> a
io.flutter.view.VsyncWaiter$1$1 -> io.flutter.view.i$1$1:
    long val$cookie -> a
    io.flutter.view.VsyncWaiter$1 this$1 -> b
    void <init>(io.flutter.view.VsyncWaiter$1,long) -> <init>
    void doFrame(long) -> doFrame
org.webrtc.AndroidVideoDecoder -> org.webrtc.AndroidVideoDecoder:
    java.lang.String TAG -> TAG
    java.lang.String MEDIA_FORMAT_KEY_STRIDE -> MEDIA_FORMAT_KEY_STRIDE
    java.lang.String MEDIA_FORMAT_KEY_SLICE_HEIGHT -> MEDIA_FORMAT_KEY_SLICE_HEIGHT
    java.lang.String MEDIA_FORMAT_KEY_CROP_LEFT -> MEDIA_FORMAT_KEY_CROP_LEFT
    java.lang.String MEDIA_FORMAT_KEY_CROP_RIGHT -> MEDIA_FORMAT_KEY_CROP_RIGHT
    java.lang.String MEDIA_FORMAT_KEY_CROP_TOP -> MEDIA_FORMAT_KEY_CROP_TOP
    java.lang.String MEDIA_FORMAT_KEY_CROP_BOTTOM -> MEDIA_FORMAT_KEY_CROP_BOTTOM
    int MEDIA_CODEC_RELEASE_TIMEOUT_MS -> MEDIA_CODEC_RELEASE_TIMEOUT_MS
    int DEQUEUE_INPUT_TIMEOUT_US -> DEQUEUE_INPUT_TIMEOUT_US
    int DEQUEUE_OUTPUT_BUFFER_TIMEOUT_US -> DEQUEUE_OUTPUT_BUFFER_TIMEOUT_US
    org.webrtc.MediaCodecWrapperFactory mediaCodecWrapperFactory -> mediaCodecWrapperFactory
    java.lang.String codecName -> codecName
    org.webrtc.VideoCodecType codecType -> codecType
    java.util.concurrent.BlockingDeque frameInfos -> frameInfos
    int colorFormat -> colorFormat
    java.lang.Thread outputThread -> outputThread
    org.webrtc.ThreadUtils$ThreadChecker outputThreadChecker -> outputThreadChecker
    org.webrtc.ThreadUtils$ThreadChecker decoderThreadChecker -> decoderThreadChecker
    boolean running -> running
    java.lang.Exception shutdownException -> shutdownException
    java.lang.Object dimensionLock -> dimensionLock
    int width -> width
    int height -> height
    int stride -> stride
    int sliceHeight -> sliceHeight
    boolean hasDecodedFirstFrame -> hasDecodedFirstFrame
    boolean keyFrameRequired -> keyFrameRequired
    org.webrtc.EglBase$Context sharedContext -> sharedContext
    org.webrtc.SurfaceTextureHelper surfaceTextureHelper -> surfaceTextureHelper
    android.view.Surface surface -> surface
    java.lang.Object renderedTextureMetadataLock -> renderedTextureMetadataLock
    org.webrtc.AndroidVideoDecoder$DecodedTextureMetadata renderedTextureMetadata -> renderedTextureMetadata
    org.webrtc.VideoDecoder$Callback callback -> callback
    org.webrtc.MediaCodecWrapper codec -> codec
    void <init>(org.webrtc.MediaCodecWrapperFactory,java.lang.String,org.webrtc.VideoCodecType,int,org.webrtc.EglBase$Context) -> <init>
    org.webrtc.VideoCodecStatus initDecode(org.webrtc.VideoDecoder$Settings,org.webrtc.VideoDecoder$Callback) -> initDecode
    org.webrtc.VideoCodecStatus initDecodeInternal(int,int) -> initDecodeInternal
    org.webrtc.VideoCodecStatus decode(org.webrtc.EncodedImage,org.webrtc.VideoDecoder$DecodeInfo) -> decode
    boolean getPrefersLateDecoding() -> getPrefersLateDecoding
    java.lang.String getImplementationName() -> getImplementationName
    org.webrtc.VideoCodecStatus release() -> release
    org.webrtc.VideoCodecStatus releaseInternal() -> releaseInternal
    org.webrtc.VideoCodecStatus reinitDecode(int,int) -> reinitDecode
    java.lang.Thread createOutputThread() -> createOutputThread
    void deliverDecodedFrame() -> deliverDecodedFrame
    void deliverTextureFrame(int,android.media.MediaCodec$BufferInfo,int,java.lang.Integer) -> deliverTextureFrame
    void onFrame(org.webrtc.VideoFrame) -> onFrame
    void deliverByteFrame(int,android.media.MediaCodec$BufferInfo,int,java.lang.Integer) -> deliverByteFrame
    org.webrtc.VideoFrame$Buffer copyNV12ToI420Buffer(java.nio.ByteBuffer,int,int,int,int) -> copyNV12ToI420Buffer
    org.webrtc.VideoFrame$Buffer copyI420Buffer(java.nio.ByteBuffer,int,int,int,int) -> copyI420Buffer
    void reformat(android.media.MediaFormat) -> reformat
    void releaseCodecOnOutputThread() -> releaseCodecOnOutputThread
    void stopOnOutputThread(java.lang.Exception) -> stopOnOutputThread
    boolean isSupportedColorFormat(int) -> isSupportedColorFormat
    org.webrtc.SurfaceTextureHelper createSurfaceTextureHelper() -> createSurfaceTextureHelper
    void releaseSurface() -> releaseSurface
    org.webrtc.VideoFrame$I420Buffer allocateI420Buffer(int,int) -> allocateI420Buffer
    void copyPlane(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int,int) -> copyPlane
    org.webrtc.ThreadUtils$ThreadChecker access$002(org.webrtc.AndroidVideoDecoder,org.webrtc.ThreadUtils$ThreadChecker) -> access$002
    boolean access$100(org.webrtc.AndroidVideoDecoder) -> access$100
    void access$200(org.webrtc.AndroidVideoDecoder) -> access$200
    long createNativeVideoDecoder() -> createNativeVideoDecoder
org.webrtc.AndroidVideoDecoder$1 -> org.webrtc.AndroidVideoDecoder$1:
    org.webrtc.AndroidVideoDecoder this$0 -> this$0
    void <init>(org.webrtc.AndroidVideoDecoder,java.lang.String) -> <init>
    void run() -> run
org.webrtc.AndroidVideoDecoder$DecodedTextureMetadata -> org.webrtc.AndroidVideoDecoder$DecodedTextureMetadata:
    long presentationTimestampUs -> presentationTimestampUs
    java.lang.Integer decodeTimeMs -> decodeTimeMs
    void <init>(long,java.lang.Integer) -> <init>
org.webrtc.AndroidVideoDecoder$FrameInfo -> org.webrtc.AndroidVideoDecoder$FrameInfo:
    long decodeStartTimeMs -> decodeStartTimeMs
    int rotation -> rotation
    void <init>(long,int) -> <init>
org.webrtc.AudioDecoderFactoryFactory -> org.webrtc.AudioDecoderFactoryFactory:
    long createNativeAudioDecoderFactory() -> createNativeAudioDecoderFactory
org.webrtc.AudioEncoderFactoryFactory -> org.webrtc.AudioEncoderFactoryFactory:
    long createNativeAudioEncoderFactory() -> createNativeAudioEncoderFactory
org.webrtc.AudioProcessingFactory -> org.webrtc.AudioProcessingFactory:
    long createNative() -> createNative
org.webrtc.AudioSource -> org.webrtc.AudioSource:
    void <init>(long) -> <init>
    long getNativeAudioSource() -> getNativeAudioSource
org.webrtc.AudioTrack -> org.webrtc.AudioTrack:
    void <init>(long) -> <init>
    void setVolume(double) -> setVolume
    long getNativeAudioTrack() -> getNativeAudioTrack
    void nativeSetVolume(long,double) -> nativeSetVolume
org.webrtc.BaseBitrateAdjuster -> org.webrtc.BaseBitrateAdjuster:
    int targetBitrateBps -> targetBitrateBps
    int targetFps -> targetFps
    void <init>() -> <init>
    void setTargets(int,int) -> setTargets
    void reportEncodedFrame(int) -> reportEncodedFrame
    int getAdjustedBitrateBps() -> getAdjustedBitrateBps
    int getCodecConfigFramerate() -> getCodecConfigFramerate
org.webrtc.BitrateAdjuster -> org.webrtc.BitrateAdjuster:
    void setTargets(int,int) -> setTargets
    void reportEncodedFrame(int) -> reportEncodedFrame
    int getAdjustedBitrateBps() -> getAdjustedBitrateBps
    int getCodecConfigFramerate() -> getCodecConfigFramerate
org.webrtc.BuiltinAudioDecoderFactoryFactory -> org.webrtc.BuiltinAudioDecoderFactoryFactory:
    void <init>() -> <init>
    long createNativeAudioDecoderFactory() -> createNativeAudioDecoderFactory
    long nativeCreateBuiltinAudioDecoderFactory() -> nativeCreateBuiltinAudioDecoderFactory
org.webrtc.BuiltinAudioEncoderFactoryFactory -> org.webrtc.BuiltinAudioEncoderFactoryFactory:
    void <init>() -> <init>
    long createNativeAudioEncoderFactory() -> createNativeAudioEncoderFactory
    long nativeCreateBuiltinAudioEncoderFactory() -> nativeCreateBuiltinAudioEncoderFactory
org.webrtc.CallSessionFileRotatingLogSink -> org.webrtc.CallSessionFileRotatingLogSink:
    long nativeSink -> nativeSink
    byte[] getLogData(java.lang.String) -> getLogData
    void <init>(java.lang.String,int,org.webrtc.Logging$Severity) -> <init>
    void dispose() -> dispose
    long nativeAddSink(java.lang.String,int,int) -> nativeAddSink
    void nativeDeleteSink(long) -> nativeDeleteSink
    byte[] nativeGetLogData(java.lang.String) -> nativeGetLogData
org.webrtc.CalledByNative -> org.webrtc.CalledByNative:
    java.lang.String value() -> value
org.webrtc.CalledByNativeUnchecked -> org.webrtc.CalledByNativeUnchecked:
    java.lang.String value() -> value
org.webrtc.Camera1Capturer -> org.webrtc.Camera1Capturer:
    boolean captureToTexture -> captureToTexture
    void <init>(java.lang.String,org.webrtc.CameraVideoCapturer$CameraEventsHandler,boolean) -> <init>
    void createCameraSession(org.webrtc.CameraSession$CreateSessionCallback,org.webrtc.CameraSession$Events,android.content.Context,org.webrtc.SurfaceTextureHelper,java.lang.String,int,int,int) -> createCameraSession
    void printStackTrace() -> printStackTrace
    boolean isScreencast() -> isScreencast
    void switchCamera(org.webrtc.CameraVideoCapturer$CameraSwitchHandler) -> switchCamera
    void dispose() -> dispose
    void changeCaptureFormat(int,int,int) -> changeCaptureFormat
    void stopCapture() -> stopCapture
    void startCapture(int,int,int) -> startCapture
    void initialize(org.webrtc.SurfaceTextureHelper,android.content.Context,org.webrtc.CapturerObserver) -> initialize
org.webrtc.Camera1Enumerator -> org.webrtc.Camera1Enumerator:
    java.lang.String TAG -> TAG
    java.util.List cachedSupportedFormats -> cachedSupportedFormats
    boolean captureToTexture -> captureToTexture
    void <init>() -> <init>
    void <init>(boolean) -> <init>
    java.lang.String[] getDeviceNames() -> getDeviceNames
    boolean isFrontFacing(java.lang.String) -> isFrontFacing
    boolean isBackFacing(java.lang.String) -> isBackFacing
    java.util.List getSupportedFormats(java.lang.String) -> getSupportedFormats
    org.webrtc.CameraVideoCapturer createCapturer(java.lang.String,org.webrtc.CameraVideoCapturer$CameraEventsHandler) -> createCapturer
    android.hardware.Camera$CameraInfo getCameraInfo(int) -> getCameraInfo
    java.util.List getSupportedFormats(int) -> getSupportedFormats
    java.util.List enumerateFormats(int) -> enumerateFormats
    java.util.List convertSizes(java.util.List) -> convertSizes
    java.util.List convertFramerates(java.util.List) -> convertFramerates
    int getCameraIndex(java.lang.String) -> getCameraIndex
    java.lang.String getDeviceName(int) -> getDeviceName
org.webrtc.Camera1Session -> org.webrtc.Camera1Session:
    java.lang.String TAG -> TAG
    int NUMBER_OF_CAPTURE_BUFFERS -> NUMBER_OF_CAPTURE_BUFFERS
    org.webrtc.Histogram camera1StartTimeMsHistogram -> camera1StartTimeMsHistogram
    org.webrtc.Histogram camera1StopTimeMsHistogram -> camera1StopTimeMsHistogram
    org.webrtc.Histogram camera1ResolutionHistogram -> camera1ResolutionHistogram
    android.os.Handler cameraThreadHandler -> cameraThreadHandler
    org.webrtc.CameraSession$Events events -> events
    boolean captureToTexture -> captureToTexture
    android.content.Context applicationContext -> applicationContext
    org.webrtc.SurfaceTextureHelper surfaceTextureHelper -> surfaceTextureHelper
    int cameraId -> cameraId
    android.hardware.Camera camera -> camera
    android.hardware.Camera$CameraInfo info -> info
    org.webrtc.CameraEnumerationAndroid$CaptureFormat captureFormat -> captureFormat
    long constructionTimeNs -> constructionTimeNs
    org.webrtc.Camera1Session$SessionState state -> state
    boolean firstFrameReported -> firstFrameReported
    void create(org.webrtc.CameraSession$CreateSessionCallback,org.webrtc.CameraSession$Events,boolean,android.content.Context,org.webrtc.SurfaceTextureHelper,int,int,int,int) -> create
    void updateCameraParameters(android.hardware.Camera,android.hardware.Camera$Parameters,org.webrtc.CameraEnumerationAndroid$CaptureFormat,org.webrtc.Size,boolean) -> updateCameraParameters
    org.webrtc.CameraEnumerationAndroid$CaptureFormat findClosestCaptureFormat(android.hardware.Camera$Parameters,int,int,int) -> findClosestCaptureFormat
    org.webrtc.Size findClosestPictureSize(android.hardware.Camera$Parameters,int,int) -> findClosestPictureSize
    void <init>(org.webrtc.CameraSession$Events,boolean,android.content.Context,org.webrtc.SurfaceTextureHelper,int,android.hardware.Camera,android.hardware.Camera$CameraInfo,org.webrtc.CameraEnumerationAndroid$CaptureFormat,long) -> <init>
    void stop() -> stop
    void startCapturing() -> startCapturing
    void stopInternal() -> stopInternal
    void listenForTextureFrames() -> listenForTextureFrames
    void listenForBytebufferFrames() -> listenForBytebufferFrames
    int getFrameOrientation() -> getFrameOrientation
    void checkIsOnCameraThread() -> checkIsOnCameraThread
    void lambda$listenForTextureFrames$0$Camera1Session(org.webrtc.VideoFrame) -> lambda$listenForTextureFrames$0$Camera1Session
    void access$000(org.webrtc.Camera1Session) -> access$000
    org.webrtc.CameraSession$Events access$100(org.webrtc.Camera1Session) -> access$100
    void access$200(org.webrtc.Camera1Session) -> access$200
    android.hardware.Camera access$300(org.webrtc.Camera1Session) -> access$300
    org.webrtc.Camera1Session$SessionState access$400(org.webrtc.Camera1Session) -> access$400
    boolean access$500(org.webrtc.Camera1Session) -> access$500
    long access$600(org.webrtc.Camera1Session) -> access$600
    org.webrtc.Histogram access$700() -> access$700
    boolean access$502(org.webrtc.Camera1Session,boolean) -> access$502
    org.webrtc.CameraEnumerationAndroid$CaptureFormat access$800(org.webrtc.Camera1Session) -> access$800
    int access$900(org.webrtc.Camera1Session) -> access$900
    android.os.Handler access$1000(org.webrtc.Camera1Session) -> access$1000
    void <clinit>() -> <clinit>
org.webrtc.Camera1Session$$Lambda$0 -> org.webrtc.Camera1Session$$Lambda$0:
    org.webrtc.Camera1Session arg$1 -> arg$1
    void <init>(org.webrtc.Camera1Session) -> <init>
    void onFrame(org.webrtc.VideoFrame) -> onFrame
org.webrtc.Camera1Session$1 -> org.webrtc.Camera1Session$1:
    org.webrtc.Camera1Session this$0 -> this$0
    void <init>(org.webrtc.Camera1Session) -> <init>
    void onError(int,android.hardware.Camera) -> onError
org.webrtc.Camera1Session$2 -> org.webrtc.Camera1Session$2:
    org.webrtc.Camera1Session this$0 -> this$0
    void <init>(org.webrtc.Camera1Session) -> <init>
    void onPreviewFrame(byte[],android.hardware.Camera) -> onPreviewFrame
    void lambda$onPreviewFrame$1$Camera1Session$2(byte[]) -> lambda$onPreviewFrame$1$Camera1Session$2
    void lambda$onPreviewFrame$0$Camera1Session$2(byte[]) -> lambda$onPreviewFrame$0$Camera1Session$2
org.webrtc.Camera1Session$2$$Lambda$0 -> org.webrtc.Camera1Session$2$$Lambda$0:
    org.webrtc.Camera1Session$2 arg$1 -> arg$1
    byte[] arg$2 -> arg$2
    void <init>(org.webrtc.Camera1Session$2,byte[]) -> <init>
    void run() -> run
org.webrtc.Camera1Session$2$$Lambda$1 -> org.webrtc.Camera1Session$2$$Lambda$1:
    org.webrtc.Camera1Session$2 arg$1 -> arg$1
    byte[] arg$2 -> arg$2
    void <init>(org.webrtc.Camera1Session$2,byte[]) -> <init>
    void run() -> run
org.webrtc.Camera1Session$SessionState -> org.webrtc.Camera1Session$SessionState:
    org.webrtc.Camera1Session$SessionState RUNNING -> RUNNING
    org.webrtc.Camera1Session$SessionState STOPPED -> STOPPED
    org.webrtc.Camera1Session$SessionState[] $VALUES -> $VALUES
    org.webrtc.Camera1Session$SessionState[] values() -> values
    org.webrtc.Camera1Session$SessionState valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.webrtc.Camera2Capturer -> org.webrtc.Camera2Capturer:
    android.content.Context context -> context
    android.hardware.camera2.CameraManager cameraManager -> cameraManager
    void <init>(android.content.Context,java.lang.String,org.webrtc.CameraVideoCapturer$CameraEventsHandler) -> <init>
    void createCameraSession(org.webrtc.CameraSession$CreateSessionCallback,org.webrtc.CameraSession$Events,android.content.Context,org.webrtc.SurfaceTextureHelper,java.lang.String,int,int,int) -> createCameraSession
    void printStackTrace() -> printStackTrace
    boolean isScreencast() -> isScreencast
    void switchCamera(org.webrtc.CameraVideoCapturer$CameraSwitchHandler) -> switchCamera
    void dispose() -> dispose
    void changeCaptureFormat(int,int,int) -> changeCaptureFormat
    void stopCapture() -> stopCapture
    void startCapture(int,int,int) -> startCapture
    void initialize(org.webrtc.SurfaceTextureHelper,android.content.Context,org.webrtc.CapturerObserver) -> initialize
org.webrtc.Camera2Enumerator -> org.webrtc.Camera2Enumerator:
    java.lang.String TAG -> TAG
    double NANO_SECONDS_PER_SECOND -> NANO_SECONDS_PER_SECOND
    java.util.Map cachedSupportedFormats -> cachedSupportedFormats
    android.content.Context context -> context
    android.hardware.camera2.CameraManager cameraManager -> cameraManager
    void <init>(android.content.Context) -> <init>
    java.lang.String[] getDeviceNames() -> getDeviceNames
    boolean isFrontFacing(java.lang.String) -> isFrontFacing
    boolean isBackFacing(java.lang.String) -> isBackFacing
    java.util.List getSupportedFormats(java.lang.String) -> getSupportedFormats
    org.webrtc.CameraVideoCapturer createCapturer(java.lang.String,org.webrtc.CameraVideoCapturer$CameraEventsHandler) -> createCapturer
    android.hardware.camera2.CameraCharacteristics getCameraCharacteristics(java.lang.String) -> getCameraCharacteristics
    boolean isSupported(android.content.Context) -> isSupported
    int getFpsUnitFactor(android.util.Range[]) -> getFpsUnitFactor
    java.util.List getSupportedSizes(android.hardware.camera2.CameraCharacteristics) -> getSupportedSizes
    java.util.List getSupportedFormats(android.content.Context,java.lang.String) -> getSupportedFormats
    java.util.List getSupportedFormats(android.hardware.camera2.CameraManager,java.lang.String) -> getSupportedFormats
    java.util.List convertSizes(android.util.Size[]) -> convertSizes
    java.util.List convertFramerates(android.util.Range[],int) -> convertFramerates
    void <clinit>() -> <clinit>
org.webrtc.Camera2Session -> org.webrtc.Camera2Session:
    java.lang.String TAG -> TAG
    org.webrtc.Histogram camera2StartTimeMsHistogram -> camera2StartTimeMsHistogram
    org.webrtc.Histogram camera2StopTimeMsHistogram -> camera2StopTimeMsHistogram
    org.webrtc.Histogram camera2ResolutionHistogram -> camera2ResolutionHistogram
    android.os.Handler cameraThreadHandler -> cameraThreadHandler
    org.webrtc.CameraSession$CreateSessionCallback callback -> callback
    org.webrtc.CameraSession$Events events -> events
    android.content.Context applicationContext -> applicationContext
    android.hardware.camera2.CameraManager cameraManager -> cameraManager
    org.webrtc.SurfaceTextureHelper surfaceTextureHelper -> surfaceTextureHelper
    java.lang.String cameraId -> cameraId
    int width -> width
    int height -> height
    int framerate -> framerate
    android.hardware.camera2.CameraCharacteristics cameraCharacteristics -> cameraCharacteristics
    int cameraOrientation -> cameraOrientation
    boolean isCameraFrontFacing -> isCameraFrontFacing
    int fpsUnitFactor -> fpsUnitFactor
    org.webrtc.CameraEnumerationAndroid$CaptureFormat captureFormat -> captureFormat
    android.hardware.camera2.CameraDevice cameraDevice -> cameraDevice
    android.view.Surface surface -> surface
    android.hardware.camera2.CameraCaptureSession captureSession -> captureSession
    org.webrtc.Camera2Session$SessionState state -> state
    boolean firstFrameReported -> firstFrameReported
    long constructionTimeNs -> constructionTimeNs
    void create(org.webrtc.CameraSession$CreateSessionCallback,org.webrtc.CameraSession$Events,android.content.Context,android.hardware.camera2.CameraManager,org.webrtc.SurfaceTextureHelper,java.lang.String,int,int,int) -> create
    void <init>(org.webrtc.CameraSession$CreateSessionCallback,org.webrtc.CameraSession$Events,android.content.Context,android.hardware.camera2.CameraManager,org.webrtc.SurfaceTextureHelper,java.lang.String,int,int,int) -> <init>
    void start() -> start
    void findCaptureFormat() -> findCaptureFormat
    void openCamera() -> openCamera
    void stop() -> stop
    void stopInternal() -> stopInternal
    void reportError(java.lang.String) -> reportError
    int getFrameOrientation() -> getFrameOrientation
    void checkIsOnCameraThread() -> checkIsOnCameraThread
    void access$000(org.webrtc.Camera2Session) -> access$000
    android.hardware.camera2.CameraCaptureSession access$100(org.webrtc.Camera2Session) -> access$100
    org.webrtc.Camera2Session$SessionState access$200(org.webrtc.Camera2Session) -> access$200
    org.webrtc.Camera2Session$SessionState access$202(org.webrtc.Camera2Session,org.webrtc.Camera2Session$SessionState) -> access$202
    void access$300(org.webrtc.Camera2Session) -> access$300
    org.webrtc.CameraSession$CreateSessionCallback access$400(org.webrtc.Camera2Session) -> access$400
    org.webrtc.CameraSession$Events access$500(org.webrtc.Camera2Session) -> access$500
    void access$600(org.webrtc.Camera2Session,java.lang.String) -> access$600
    android.hardware.camera2.CameraDevice access$702(org.webrtc.Camera2Session,android.hardware.camera2.CameraDevice) -> access$702
    org.webrtc.CameraEnumerationAndroid$CaptureFormat access$800(org.webrtc.Camera2Session) -> access$800
    org.webrtc.SurfaceTextureHelper access$900(org.webrtc.Camera2Session) -> access$900
    android.view.Surface access$1002(org.webrtc.Camera2Session,android.view.Surface) -> access$1002
    android.view.Surface access$1000(org.webrtc.Camera2Session) -> access$1000
    android.os.Handler access$1200(org.webrtc.Camera2Session) -> access$1200
    android.hardware.camera2.CameraCaptureSession access$102(org.webrtc.Camera2Session,android.hardware.camera2.CameraCaptureSession) -> access$102
    android.hardware.camera2.CameraDevice access$700(org.webrtc.Camera2Session) -> access$700
    int access$1300(org.webrtc.Camera2Session) -> access$1300
    android.hardware.camera2.CameraCharacteristics access$1500(org.webrtc.Camera2Session) -> access$1500
    boolean access$1600(org.webrtc.Camera2Session) -> access$1600
    boolean access$1602(org.webrtc.Camera2Session,boolean) -> access$1602
    long access$1700(org.webrtc.Camera2Session) -> access$1700
    org.webrtc.Histogram access$1800() -> access$1800
    boolean access$1900(org.webrtc.Camera2Session) -> access$1900
    int access$2000(org.webrtc.Camera2Session) -> access$2000
    int access$2100(org.webrtc.Camera2Session) -> access$2100
    void <clinit>() -> <clinit>
org.webrtc.Camera2Session$1 -> org.webrtc.Camera2Session$1:
org.webrtc.Camera2Session$CameraCaptureCallback -> org.webrtc.Camera2Session$CameraCaptureCallback:
    void <init>() -> <init>
    void onCaptureFailed(android.hardware.camera2.CameraCaptureSession,android.hardware.camera2.CaptureRequest,android.hardware.camera2.CaptureFailure) -> onCaptureFailed
    void <init>(org.webrtc.Camera2Session$1) -> <init>
org.webrtc.Camera2Session$CameraStateCallback -> org.webrtc.Camera2Session$CameraStateCallback:
    org.webrtc.Camera2Session this$0 -> this$0
    void <init>(org.webrtc.Camera2Session) -> <init>
    java.lang.String getErrorDescription(int) -> getErrorDescription
    void onDisconnected(android.hardware.camera2.CameraDevice) -> onDisconnected
    void onError(android.hardware.camera2.CameraDevice,int) -> onError
    void onOpened(android.hardware.camera2.CameraDevice) -> onOpened
    void onClosed(android.hardware.camera2.CameraDevice) -> onClosed
    void <init>(org.webrtc.Camera2Session,org.webrtc.Camera2Session$1) -> <init>
org.webrtc.Camera2Session$CaptureSessionCallback -> org.webrtc.Camera2Session$CaptureSessionCallback:
    org.webrtc.Camera2Session this$0 -> this$0
    void <init>(org.webrtc.Camera2Session) -> <init>
    void onConfigureFailed(android.hardware.camera2.CameraCaptureSession) -> onConfigureFailed
    void onConfigured(android.hardware.camera2.CameraCaptureSession) -> onConfigured
    void chooseStabilizationMode(android.hardware.camera2.CaptureRequest$Builder) -> chooseStabilizationMode
    void chooseFocusMode(android.hardware.camera2.CaptureRequest$Builder) -> chooseFocusMode
    void lambda$onConfigured$0$Camera2Session$CaptureSessionCallback(org.webrtc.VideoFrame) -> lambda$onConfigured$0$Camera2Session$CaptureSessionCallback
    void <init>(org.webrtc.Camera2Session,org.webrtc.Camera2Session$1) -> <init>
org.webrtc.Camera2Session$CaptureSessionCallback$$Lambda$0 -> org.webrtc.Camera2Session$CaptureSessionCallback$$Lambda$0:
    org.webrtc.Camera2Session$CaptureSessionCallback arg$1 -> arg$1
    void <init>(org.webrtc.Camera2Session$CaptureSessionCallback) -> <init>
    void onFrame(org.webrtc.VideoFrame) -> onFrame
org.webrtc.Camera2Session$SessionState -> org.webrtc.Camera2Session$SessionState:
    org.webrtc.Camera2Session$SessionState RUNNING -> RUNNING
    org.webrtc.Camera2Session$SessionState STOPPED -> STOPPED
    org.webrtc.Camera2Session$SessionState[] $VALUES -> $VALUES
    org.webrtc.Camera2Session$SessionState[] values() -> values
    org.webrtc.Camera2Session$SessionState valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.webrtc.CameraCapturer -> org.webrtc.CameraCapturer:
    java.lang.String TAG -> TAG
    int MAX_OPEN_CAMERA_ATTEMPTS -> MAX_OPEN_CAMERA_ATTEMPTS
    int OPEN_CAMERA_DELAY_MS -> OPEN_CAMERA_DELAY_MS
    int OPEN_CAMERA_TIMEOUT -> OPEN_CAMERA_TIMEOUT
    org.webrtc.CameraEnumerator cameraEnumerator -> cameraEnumerator
    org.webrtc.CameraVideoCapturer$CameraEventsHandler eventsHandler -> eventsHandler
    android.os.Handler uiThreadHandler -> uiThreadHandler
    org.webrtc.CameraSession$CreateSessionCallback createSessionCallback -> createSessionCallback
    org.webrtc.CameraSession$Events cameraSessionEventsHandler -> cameraSessionEventsHandler
    java.lang.Runnable openCameraTimeoutRunnable -> openCameraTimeoutRunnable
    android.os.Handler cameraThreadHandler -> cameraThreadHandler
    android.content.Context applicationContext -> applicationContext
    org.webrtc.CapturerObserver capturerObserver -> capturerObserver
    org.webrtc.SurfaceTextureHelper surfaceHelper -> surfaceHelper
    java.lang.Object stateLock -> stateLock
    boolean sessionOpening -> sessionOpening
    org.webrtc.CameraSession currentSession -> currentSession
    java.lang.String cameraName -> cameraName
    int width -> width
    int height -> height
    int framerate -> framerate
    int openAttemptsRemaining -> openAttemptsRemaining
    org.webrtc.CameraCapturer$SwitchState switchState -> switchState
    org.webrtc.CameraVideoCapturer$CameraSwitchHandler switchEventsHandler -> switchEventsHandler
    org.webrtc.CameraVideoCapturer$CameraStatistics cameraStatistics -> cameraStatistics
    boolean firstFrameObserved -> firstFrameObserved
    void <init>(java.lang.String,org.webrtc.CameraVideoCapturer$CameraEventsHandler,org.webrtc.CameraEnumerator) -> <init>
    void initialize(org.webrtc.SurfaceTextureHelper,android.content.Context,org.webrtc.CapturerObserver) -> initialize
    void startCapture(int,int,int) -> startCapture
    void createSessionInternal(int) -> createSessionInternal
    void stopCapture() -> stopCapture
    void changeCaptureFormat(int,int,int) -> changeCaptureFormat
    void dispose() -> dispose
    void switchCamera(org.webrtc.CameraVideoCapturer$CameraSwitchHandler) -> switchCamera
    boolean isScreencast() -> isScreencast
    void printStackTrace() -> printStackTrace
    void reportCameraSwitchError(java.lang.String,org.webrtc.CameraVideoCapturer$CameraSwitchHandler) -> reportCameraSwitchError
    void switchCameraInternal(org.webrtc.CameraVideoCapturer$CameraSwitchHandler) -> switchCameraInternal
    void checkIsOnCameraThread() -> checkIsOnCameraThread
    java.lang.String getCameraName() -> getCameraName
    void createCameraSession(org.webrtc.CameraSession$CreateSessionCallback,org.webrtc.CameraSession$Events,android.content.Context,org.webrtc.SurfaceTextureHelper,java.lang.String,int,int,int) -> createCameraSession
    void access$000(org.webrtc.CameraCapturer) -> access$000
    org.webrtc.CameraCapturer$SwitchState access$100(org.webrtc.CameraCapturer) -> access$100
    java.lang.Runnable access$200(org.webrtc.CameraCapturer) -> access$200
    android.os.Handler access$300(org.webrtc.CameraCapturer) -> access$300
    java.lang.Object access$400(org.webrtc.CameraCapturer) -> access$400
    org.webrtc.CapturerObserver access$500(org.webrtc.CameraCapturer) -> access$500
    boolean access$602(org.webrtc.CameraCapturer,boolean) -> access$602
    org.webrtc.CameraSession access$702(org.webrtc.CameraCapturer,org.webrtc.CameraSession) -> access$702
    org.webrtc.CameraVideoCapturer$CameraStatistics access$802(org.webrtc.CameraCapturer,org.webrtc.CameraVideoCapturer$CameraStatistics) -> access$802
    org.webrtc.SurfaceTextureHelper access$900(org.webrtc.CameraCapturer) -> access$900
    org.webrtc.CameraVideoCapturer$CameraEventsHandler access$1000(org.webrtc.CameraCapturer) -> access$1000
    boolean access$1102(org.webrtc.CameraCapturer,boolean) -> access$1102
    org.webrtc.CameraCapturer$SwitchState access$102(org.webrtc.CameraCapturer,org.webrtc.CameraCapturer$SwitchState) -> access$102
    org.webrtc.CameraVideoCapturer$CameraSwitchHandler access$1200(org.webrtc.CameraCapturer) -> access$1200
    java.lang.String access$1300(org.webrtc.CameraCapturer) -> access$1300
    org.webrtc.CameraEnumerator access$1400(org.webrtc.CameraCapturer) -> access$1400
    org.webrtc.CameraVideoCapturer$CameraSwitchHandler access$1202(org.webrtc.CameraCapturer,org.webrtc.CameraVideoCapturer$CameraSwitchHandler) -> access$1202
    void access$1500(org.webrtc.CameraCapturer,org.webrtc.CameraVideoCapturer$CameraSwitchHandler) -> access$1500
    int access$1610(org.webrtc.CameraCapturer) -> access$1610
    int access$1600(org.webrtc.CameraCapturer) -> access$1600
    void access$1700(org.webrtc.CameraCapturer,int) -> access$1700
    org.webrtc.CameraSession access$700(org.webrtc.CameraCapturer) -> access$700
    boolean access$1100(org.webrtc.CameraCapturer) -> access$1100
    org.webrtc.CameraVideoCapturer$CameraStatistics access$800(org.webrtc.CameraCapturer) -> access$800
    org.webrtc.CameraSession$CreateSessionCallback access$1800(org.webrtc.CameraCapturer) -> access$1800
    org.webrtc.CameraSession$Events access$1900(org.webrtc.CameraCapturer) -> access$1900
    android.content.Context access$2000(org.webrtc.CameraCapturer) -> access$2000
    int access$2100(org.webrtc.CameraCapturer) -> access$2100
    int access$2200(org.webrtc.CameraCapturer) -> access$2200
    int access$2300(org.webrtc.CameraCapturer) -> access$2300
    void addMediaRecorderToCamera(android.media.MediaRecorder,org.webrtc.CameraVideoCapturer$MediaRecorderHandler) -> addMediaRecorderToCamera
    void removeMediaRecorderFromCamera(org.webrtc.CameraVideoCapturer$MediaRecorderHandler) -> removeMediaRecorderFromCamera
org.webrtc.CameraCapturer$1 -> org.webrtc.CameraCapturer$1:
    org.webrtc.CameraCapturer this$0 -> this$0
    void <init>(org.webrtc.CameraCapturer) -> <init>
    void onDone(org.webrtc.CameraSession) -> onDone
    void onFailure(org.webrtc.CameraSession$FailureType,java.lang.String) -> onFailure
org.webrtc.CameraCapturer$2 -> org.webrtc.CameraCapturer$2:
    org.webrtc.CameraCapturer this$0 -> this$0
    void <init>(org.webrtc.CameraCapturer) -> <init>
    void onCameraOpening() -> onCameraOpening
    void onCameraError(org.webrtc.CameraSession,java.lang.String) -> onCameraError
    void onCameraDisconnected(org.webrtc.CameraSession) -> onCameraDisconnected
    void onCameraClosed(org.webrtc.CameraSession) -> onCameraClosed
    void onFrameCaptured(org.webrtc.CameraSession,org.webrtc.VideoFrame) -> onFrameCaptured
org.webrtc.CameraCapturer$3 -> org.webrtc.CameraCapturer$3:
    org.webrtc.CameraCapturer this$0 -> this$0
    void <init>(org.webrtc.CameraCapturer) -> <init>
    void run() -> run
org.webrtc.CameraCapturer$4 -> org.webrtc.CameraCapturer$4:
    org.webrtc.CameraCapturer this$0 -> this$0
    void <init>(org.webrtc.CameraCapturer) -> <init>
    void onCameraError(java.lang.String) -> onCameraError
    void onCameraDisconnected() -> onCameraDisconnected
    void onCameraFreezed(java.lang.String) -> onCameraFreezed
    void onCameraOpening(java.lang.String) -> onCameraOpening
    void onFirstFrameAvailable() -> onFirstFrameAvailable
    void onCameraClosed() -> onCameraClosed
org.webrtc.CameraCapturer$5 -> org.webrtc.CameraCapturer$5:
    org.webrtc.CameraCapturer this$0 -> this$0
    void <init>(org.webrtc.CameraCapturer) -> <init>
    void run() -> run
org.webrtc.CameraCapturer$6 -> org.webrtc.CameraCapturer$6:
    org.webrtc.CameraSession val$oldSession -> val$oldSession
    org.webrtc.CameraCapturer this$0 -> this$0
    void <init>(org.webrtc.CameraCapturer,org.webrtc.CameraSession) -> <init>
    void run() -> run
org.webrtc.CameraCapturer$7 -> org.webrtc.CameraCapturer$7:
    org.webrtc.CameraVideoCapturer$CameraSwitchHandler val$switchEventsHandler -> val$switchEventsHandler
    org.webrtc.CameraCapturer this$0 -> this$0
    void <init>(org.webrtc.CameraCapturer,org.webrtc.CameraVideoCapturer$CameraSwitchHandler) -> <init>
    void run() -> run
org.webrtc.CameraCapturer$8 -> org.webrtc.CameraCapturer$8:
    org.webrtc.CameraSession val$oldSession -> val$oldSession
    org.webrtc.CameraCapturer this$0 -> this$0
    void <init>(org.webrtc.CameraCapturer,org.webrtc.CameraSession) -> <init>
    void run() -> run
org.webrtc.CameraCapturer$SwitchState -> org.webrtc.CameraCapturer$SwitchState:
    org.webrtc.CameraCapturer$SwitchState IDLE -> IDLE
    org.webrtc.CameraCapturer$SwitchState PENDING -> PENDING
    org.webrtc.CameraCapturer$SwitchState IN_PROGRESS -> IN_PROGRESS
    org.webrtc.CameraCapturer$SwitchState[] $VALUES -> $VALUES
    org.webrtc.CameraCapturer$SwitchState[] values() -> values
    org.webrtc.CameraCapturer$SwitchState valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.webrtc.CameraEnumerationAndroid -> org.webrtc.CameraEnumerationAndroid:
    java.lang.String TAG -> TAG
    java.util.ArrayList COMMON_RESOLUTIONS -> COMMON_RESOLUTIONS
    void <init>() -> <init>
    org.webrtc.CameraEnumerationAndroid$CaptureFormat$FramerateRange getClosestSupportedFramerateRange(java.util.List,int) -> getClosestSupportedFramerateRange
    org.webrtc.Size getClosestSupportedSize(java.util.List,int,int) -> getClosestSupportedSize
    void reportCameraResolution(org.webrtc.Histogram,org.webrtc.Size) -> reportCameraResolution
    void <clinit>() -> <clinit>
org.webrtc.CameraEnumerationAndroid$1 -> org.webrtc.CameraEnumerationAndroid$1:
    int MAX_FPS_DIFF_THRESHOLD -> MAX_FPS_DIFF_THRESHOLD
    int MAX_FPS_LOW_DIFF_WEIGHT -> MAX_FPS_LOW_DIFF_WEIGHT
    int MAX_FPS_HIGH_DIFF_WEIGHT -> MAX_FPS_HIGH_DIFF_WEIGHT
    int MIN_FPS_THRESHOLD -> MIN_FPS_THRESHOLD
    int MIN_FPS_LOW_VALUE_WEIGHT -> MIN_FPS_LOW_VALUE_WEIGHT
    int MIN_FPS_HIGH_VALUE_WEIGHT -> MIN_FPS_HIGH_VALUE_WEIGHT
    int val$requestedFps -> val$requestedFps
    void <init>(int) -> <init>
    int progressivePenalty(int,int,int,int) -> progressivePenalty
    int diff(org.webrtc.CameraEnumerationAndroid$CaptureFormat$FramerateRange) -> diff
    int diff(java.lang.Object) -> diff
org.webrtc.CameraEnumerationAndroid$2 -> org.webrtc.CameraEnumerationAndroid$2:
    int val$requestedWidth -> val$requestedWidth
    int val$requestedHeight -> val$requestedHeight
    void <init>(int,int) -> <init>
    int diff(org.webrtc.Size) -> diff
    int diff(java.lang.Object) -> diff
org.webrtc.CameraEnumerationAndroid$CaptureFormat -> org.webrtc.CameraEnumerationAndroid$CaptureFormat:
    int width -> width
    int height -> height
    org.webrtc.CameraEnumerationAndroid$CaptureFormat$FramerateRange framerate -> framerate
    int imageFormat -> imageFormat
    void <init>(int,int,int,int) -> <init>
    void <init>(int,int,org.webrtc.CameraEnumerationAndroid$CaptureFormat$FramerateRange) -> <init>
    int frameSize() -> frameSize
    int frameSize(int,int,int) -> frameSize
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.webrtc.CameraEnumerationAndroid$CaptureFormat$FramerateRange -> org.webrtc.CameraEnumerationAndroid$CaptureFormat$FramerateRange:
    int min -> min
    int max -> max
    void <init>(int,int) -> <init>
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.webrtc.CameraEnumerationAndroid$ClosestComparator -> org.webrtc.CameraEnumerationAndroid$ClosestComparator:
    void <init>() -> <init>
    int diff(java.lang.Object) -> diff
    int compare(java.lang.Object,java.lang.Object) -> compare
    void <init>(org.webrtc.CameraEnumerationAndroid$1) -> <init>
org.webrtc.CameraEnumerator -> org.webrtc.CameraEnumerator:
    java.lang.String[] getDeviceNames() -> getDeviceNames
    boolean isFrontFacing(java.lang.String) -> isFrontFacing
    boolean isBackFacing(java.lang.String) -> isBackFacing
    java.util.List getSupportedFormats(java.lang.String) -> getSupportedFormats
    org.webrtc.CameraVideoCapturer createCapturer(java.lang.String,org.webrtc.CameraVideoCapturer$CameraEventsHandler) -> createCapturer
org.webrtc.CameraSession -> org.webrtc.CameraSession:
    void stop() -> stop
org.webrtc.CameraSession$$CC -> org.webrtc.CameraSession$$CC:
    int getDeviceOrientation$$STATIC$$(android.content.Context) -> getDeviceOrientation$$STATIC$$
    org.webrtc.VideoFrame$TextureBuffer createTextureBufferWithModifiedTransformMatrix$$STATIC$$(org.webrtc.TextureBufferImpl,boolean,int) -> createTextureBufferWithModifiedTransformMatrix$$STATIC$$
org.webrtc.CameraSession$CreateSessionCallback -> org.webrtc.CameraSession$CreateSessionCallback:
    void onDone(org.webrtc.CameraSession) -> onDone
    void onFailure(org.webrtc.CameraSession$FailureType,java.lang.String) -> onFailure
org.webrtc.CameraSession$Events -> org.webrtc.CameraSession$Events:
    void onCameraOpening() -> onCameraOpening
    void onCameraError(org.webrtc.CameraSession,java.lang.String) -> onCameraError
    void onCameraDisconnected(org.webrtc.CameraSession) -> onCameraDisconnected
    void onCameraClosed(org.webrtc.CameraSession) -> onCameraClosed
    void onFrameCaptured(org.webrtc.CameraSession,org.webrtc.VideoFrame) -> onFrameCaptured
org.webrtc.CameraSession$FailureType -> org.webrtc.CameraSession$FailureType:
    org.webrtc.CameraSession$FailureType ERROR -> ERROR
    org.webrtc.CameraSession$FailureType DISCONNECTED -> DISCONNECTED
    org.webrtc.CameraSession$FailureType[] $VALUES -> $VALUES
    org.webrtc.CameraSession$FailureType[] values() -> values
    org.webrtc.CameraSession$FailureType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.webrtc.CameraVideoCapturer -> org.webrtc.CameraVideoCapturer:
    void switchCamera(org.webrtc.CameraVideoCapturer$CameraSwitchHandler) -> switchCamera
    void addMediaRecorderToCamera(android.media.MediaRecorder,org.webrtc.CameraVideoCapturer$MediaRecorderHandler) -> addMediaRecorderToCamera
    void removeMediaRecorderFromCamera(org.webrtc.CameraVideoCapturer$MediaRecorderHandler) -> removeMediaRecorderFromCamera
org.webrtc.CameraVideoCapturer$$CC -> org.webrtc.CameraVideoCapturer$$CC:
    void addMediaRecorderToCamera(org.webrtc.CameraVideoCapturer,android.media.MediaRecorder,org.webrtc.CameraVideoCapturer$MediaRecorderHandler) -> addMediaRecorderToCamera
    void removeMediaRecorderFromCamera(org.webrtc.CameraVideoCapturer,org.webrtc.CameraVideoCapturer$MediaRecorderHandler) -> removeMediaRecorderFromCamera
org.webrtc.CameraVideoCapturer$CameraEventsHandler -> org.webrtc.CameraVideoCapturer$CameraEventsHandler:
    void onCameraError(java.lang.String) -> onCameraError
    void onCameraDisconnected() -> onCameraDisconnected
    void onCameraFreezed(java.lang.String) -> onCameraFreezed
    void onCameraOpening(java.lang.String) -> onCameraOpening
    void onFirstFrameAvailable() -> onFirstFrameAvailable
    void onCameraClosed() -> onCameraClosed
org.webrtc.CameraVideoCapturer$CameraStatistics -> org.webrtc.CameraVideoCapturer$CameraStatistics:
    java.lang.String TAG -> TAG
    int CAMERA_OBSERVER_PERIOD_MS -> CAMERA_OBSERVER_PERIOD_MS
    int CAMERA_FREEZE_REPORT_TIMOUT_MS -> CAMERA_FREEZE_REPORT_TIMOUT_MS
    org.webrtc.SurfaceTextureHelper surfaceTextureHelper -> surfaceTextureHelper
    org.webrtc.CameraVideoCapturer$CameraEventsHandler eventsHandler -> eventsHandler
    int frameCount -> frameCount
    int freezePeriodCount -> freezePeriodCount
    java.lang.Runnable cameraObserver -> cameraObserver
    void <init>(org.webrtc.SurfaceTextureHelper,org.webrtc.CameraVideoCapturer$CameraEventsHandler) -> <init>
    void checkThread() -> checkThread
    void addFrame() -> addFrame
    void release() -> release
    int access$000(org.webrtc.CameraVideoCapturer$CameraStatistics) -> access$000
    int access$104(org.webrtc.CameraVideoCapturer$CameraStatistics) -> access$104
    int access$100(org.webrtc.CameraVideoCapturer$CameraStatistics) -> access$100
    org.webrtc.CameraVideoCapturer$CameraEventsHandler access$200(org.webrtc.CameraVideoCapturer$CameraStatistics) -> access$200
    org.webrtc.SurfaceTextureHelper access$300(org.webrtc.CameraVideoCapturer$CameraStatistics) -> access$300
    int access$102(org.webrtc.CameraVideoCapturer$CameraStatistics,int) -> access$102
    int access$002(org.webrtc.CameraVideoCapturer$CameraStatistics,int) -> access$002
org.webrtc.CameraVideoCapturer$CameraStatistics$1 -> org.webrtc.CameraVideoCapturer$CameraStatistics$1:
    org.webrtc.CameraVideoCapturer$CameraStatistics this$0 -> this$0
    void <init>(org.webrtc.CameraVideoCapturer$CameraStatistics) -> <init>
    void run() -> run
org.webrtc.CameraVideoCapturer$CameraSwitchHandler -> org.webrtc.CameraVideoCapturer$CameraSwitchHandler:
    void onCameraSwitchDone(boolean) -> onCameraSwitchDone
    void onCameraSwitchError(java.lang.String) -> onCameraSwitchError
org.webrtc.CameraVideoCapturer$MediaRecorderHandler -> org.webrtc.CameraVideoCapturer$MediaRecorderHandler:
    void onMediaRecorderSuccess() -> onMediaRecorderSuccess
    void onMediaRecorderError(java.lang.String) -> onMediaRecorderError
org.webrtc.CapturerObserver -> org.webrtc.CapturerObserver:
    void onCapturerStarted(boolean) -> onCapturerStarted
    void onCapturerStopped() -> onCapturerStopped
    void onFrameCaptured(org.webrtc.VideoFrame) -> onFrameCaptured
org.webrtc.ContextUtils -> org.webrtc.ContextUtils:
    java.lang.String TAG -> TAG
    android.content.Context applicationContext -> applicationContext
    void <init>() -> <init>
    void initialize(android.content.Context) -> initialize
    android.content.Context getApplicationContext() -> getApplicationContext
org.webrtc.CryptoOptions -> org.webrtc.CryptoOptions:
    org.webrtc.CryptoOptions$Srtp srtp -> srtp
    org.webrtc.CryptoOptions$SFrame sframe -> sframe
    void <init>(boolean,boolean,boolean,boolean) -> <init>
    org.webrtc.CryptoOptions$Builder builder() -> builder
    org.webrtc.CryptoOptions$Srtp getSrtp() -> getSrtp
    org.webrtc.CryptoOptions$SFrame getSFrame() -> getSFrame
    void <init>(boolean,boolean,boolean,boolean,org.webrtc.CryptoOptions$1) -> <init>
org.webrtc.CryptoOptions$1 -> org.webrtc.CryptoOptions$1:
org.webrtc.CryptoOptions$Builder -> org.webrtc.CryptoOptions$Builder:
    boolean enableGcmCryptoSuites -> enableGcmCryptoSuites
    boolean enableAes128Sha1_32CryptoCipher -> enableAes128Sha1_32CryptoCipher
    boolean enableEncryptedRtpHeaderExtensions -> enableEncryptedRtpHeaderExtensions
    boolean requireFrameEncryption -> requireFrameEncryption
    void <init>() -> <init>
    org.webrtc.CryptoOptions$Builder setEnableGcmCryptoSuites(boolean) -> setEnableGcmCryptoSuites
    org.webrtc.CryptoOptions$Builder setEnableAes128Sha1_32CryptoCipher(boolean) -> setEnableAes128Sha1_32CryptoCipher
    org.webrtc.CryptoOptions$Builder setEnableEncryptedRtpHeaderExtensions(boolean) -> setEnableEncryptedRtpHeaderExtensions
    org.webrtc.CryptoOptions$Builder setRequireFrameEncryption(boolean) -> setRequireFrameEncryption
    org.webrtc.CryptoOptions createCryptoOptions() -> createCryptoOptions
    void <init>(org.webrtc.CryptoOptions$1) -> <init>
org.webrtc.CryptoOptions$SFrame -> org.webrtc.CryptoOptions$SFrame:
    boolean requireFrameEncryption -> requireFrameEncryption
    org.webrtc.CryptoOptions this$0 -> this$0
    void <init>(org.webrtc.CryptoOptions,boolean) -> <init>
    boolean getRequireFrameEncryption() -> getRequireFrameEncryption
    void <init>(org.webrtc.CryptoOptions,boolean,org.webrtc.CryptoOptions$1) -> <init>
org.webrtc.CryptoOptions$Srtp -> org.webrtc.CryptoOptions$Srtp:
    boolean enableGcmCryptoSuites -> enableGcmCryptoSuites
    boolean enableAes128Sha1_32CryptoCipher -> enableAes128Sha1_32CryptoCipher
    boolean enableEncryptedRtpHeaderExtensions -> enableEncryptedRtpHeaderExtensions
    org.webrtc.CryptoOptions this$0 -> this$0
    void <init>(org.webrtc.CryptoOptions,boolean,boolean,boolean) -> <init>
    boolean getEnableGcmCryptoSuites() -> getEnableGcmCryptoSuites
    boolean getEnableAes128Sha1_32CryptoCipher() -> getEnableAes128Sha1_32CryptoCipher
    boolean getEnableEncryptedRtpHeaderExtensions() -> getEnableEncryptedRtpHeaderExtensions
    void <init>(org.webrtc.CryptoOptions,boolean,boolean,boolean,org.webrtc.CryptoOptions$1) -> <init>
org.webrtc.DataChannel -> org.webrtc.DataChannel:
    long nativeDataChannel -> nativeDataChannel
    long nativeObserver -> nativeObserver
    void <init>(long) -> <init>
    void registerObserver(org.webrtc.DataChannel$Observer) -> registerObserver
    void unregisterObserver() -> unregisterObserver
    java.lang.String label() -> label
    int id() -> id
    org.webrtc.DataChannel$State state() -> state
    long bufferedAmount() -> bufferedAmount
    void close() -> close
    boolean send(org.webrtc.DataChannel$Buffer) -> send
    void dispose() -> dispose
    long getNativeDataChannel() -> getNativeDataChannel
    void checkDataChannelExists() -> checkDataChannelExists
    long nativeRegisterObserver(org.webrtc.DataChannel$Observer) -> nativeRegisterObserver
    void nativeUnregisterObserver(long) -> nativeUnregisterObserver
    java.lang.String nativeLabel() -> nativeLabel
    int nativeId() -> nativeId
    org.webrtc.DataChannel$State nativeState() -> nativeState
    long nativeBufferedAmount() -> nativeBufferedAmount
    void nativeClose() -> nativeClose
    boolean nativeSend(byte[],boolean) -> nativeSend
org.webrtc.DataChannel$Buffer -> org.webrtc.DataChannel$Buffer:
    java.nio.ByteBuffer data -> data
    boolean binary -> binary
    void <init>(java.nio.ByteBuffer,boolean) -> <init>
org.webrtc.DataChannel$Init -> org.webrtc.DataChannel$Init:
    boolean ordered -> ordered
    int maxRetransmitTimeMs -> maxRetransmitTimeMs
    int maxRetransmits -> maxRetransmits
    java.lang.String protocol -> protocol
    boolean negotiated -> negotiated
    int id -> id
    void <init>() -> <init>
    boolean getOrdered() -> getOrdered
    int getMaxRetransmitTimeMs() -> getMaxRetransmitTimeMs
    int getMaxRetransmits() -> getMaxRetransmits
    java.lang.String getProtocol() -> getProtocol
    boolean getNegotiated() -> getNegotiated
    int getId() -> getId
org.webrtc.DataChannel$Observer -> org.webrtc.DataChannel$Observer:
    void onBufferedAmountChange(long) -> onBufferedAmountChange
    void onStateChange() -> onStateChange
    void onMessage(org.webrtc.DataChannel$Buffer) -> onMessage
org.webrtc.DataChannel$State -> org.webrtc.DataChannel$State:
    org.webrtc.DataChannel$State CONNECTING -> CONNECTING
    org.webrtc.DataChannel$State OPEN -> OPEN
    org.webrtc.DataChannel$State CLOSING -> CLOSING
    org.webrtc.DataChannel$State CLOSED -> CLOSED
    org.webrtc.DataChannel$State[] $VALUES -> $VALUES
    org.webrtc.DataChannel$State[] values() -> values
    org.webrtc.DataChannel$State valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    org.webrtc.DataChannel$State fromNativeIndex(int) -> fromNativeIndex
    void <clinit>() -> <clinit>
org.webrtc.DefaultVideoDecoderFactory -> org.webrtc.DefaultVideoDecoderFactory:
    org.webrtc.VideoDecoderFactory hardwareVideoDecoderFactory -> hardwareVideoDecoderFactory
    org.webrtc.VideoDecoderFactory softwareVideoDecoderFactory -> softwareVideoDecoderFactory
    org.webrtc.VideoDecoderFactory platformSoftwareVideoDecoderFactory -> platformSoftwareVideoDecoderFactory
    void <init>(org.webrtc.EglBase$Context) -> <init>
    void <init>(org.webrtc.VideoDecoderFactory) -> <init>
    org.webrtc.VideoDecoder createDecoder(org.webrtc.VideoCodecInfo) -> createDecoder
    org.webrtc.VideoCodecInfo[] getSupportedCodecs() -> getSupportedCodecs
    org.webrtc.VideoDecoder createDecoder(java.lang.String) -> createDecoder
org.webrtc.DefaultVideoEncoderFactory -> org.webrtc.DefaultVideoEncoderFactory:
    org.webrtc.VideoEncoderFactory hardwareVideoEncoderFactory -> hardwareVideoEncoderFactory
    org.webrtc.VideoEncoderFactory softwareVideoEncoderFactory -> softwareVideoEncoderFactory
    void <init>(org.webrtc.EglBase$Context,boolean,boolean) -> <init>
    void <init>(org.webrtc.VideoEncoderFactory) -> <init>
    org.webrtc.VideoEncoder createEncoder(org.webrtc.VideoCodecInfo) -> createEncoder
    org.webrtc.VideoCodecInfo[] getSupportedCodecs() -> getSupportedCodecs
org.webrtc.DtmfSender -> org.webrtc.DtmfSender:
    long nativeDtmfSender -> nativeDtmfSender
    void <init>(long) -> <init>
    boolean canInsertDtmf() -> canInsertDtmf
    boolean insertDtmf(java.lang.String,int,int) -> insertDtmf
    java.lang.String tones() -> tones
    int duration() -> duration
    int interToneGap() -> interToneGap
    void dispose() -> dispose
    void checkDtmfSenderExists() -> checkDtmfSenderExists
    boolean nativeCanInsertDtmf(long) -> nativeCanInsertDtmf
    boolean nativeInsertDtmf(long,java.lang.String,int,int) -> nativeInsertDtmf
    java.lang.String nativeTones(long) -> nativeTones
    int nativeDuration(long) -> nativeDuration
    int nativeInterToneGap(long) -> nativeInterToneGap
org.webrtc.DynamicBitrateAdjuster -> org.webrtc.DynamicBitrateAdjuster:
    double BITRATE_ADJUSTMENT_SEC -> BITRATE_ADJUSTMENT_SEC
    double BITRATE_ADJUSTMENT_MAX_SCALE -> BITRATE_ADJUSTMENT_MAX_SCALE
    int BITRATE_ADJUSTMENT_STEPS -> BITRATE_ADJUSTMENT_STEPS
    double BITS_PER_BYTE -> BITS_PER_BYTE
    double deviationBytes -> deviationBytes
    double timeSinceLastAdjustmentMs -> timeSinceLastAdjustmentMs
    int bitrateAdjustmentScaleExp -> bitrateAdjustmentScaleExp
    void <init>() -> <init>
    void setTargets(int,int) -> setTargets
    void reportEncodedFrame(int) -> reportEncodedFrame
    double getBitrateAdjustmentScale() -> getBitrateAdjustmentScale
    int getAdjustedBitrateBps() -> getAdjustedBitrateBps
org.webrtc.EglBase -> org.webrtc.EglBase:
    java.lang.Object lock -> lock
    int EGL_OPENGL_ES2_BIT -> EGL_OPENGL_ES2_BIT
    int EGL_OPENGL_ES3_BIT -> EGL_OPENGL_ES3_BIT
    int EGL_RECORDABLE_ANDROID -> EGL_RECORDABLE_ANDROID
    int[] CONFIG_PLAIN -> CONFIG_PLAIN
    int[] CONFIG_RGBA -> CONFIG_RGBA
    int[] CONFIG_PIXEL_BUFFER -> CONFIG_PIXEL_BUFFER
    int[] CONFIG_PIXEL_RGBA_BUFFER -> CONFIG_PIXEL_RGBA_BUFFER
    int[] CONFIG_RECORDABLE -> CONFIG_RECORDABLE
    void createSurface(android.view.Surface) -> createSurface
    void createSurface(android.graphics.SurfaceTexture) -> createSurface
    void createDummyPbufferSurface() -> createDummyPbufferSurface
    void createPbufferSurface(int,int) -> createPbufferSurface
    org.webrtc.EglBase$Context getEglBaseContext() -> getEglBaseContext
    boolean hasSurface() -> hasSurface
    int surfaceWidth() -> surfaceWidth
    int surfaceHeight() -> surfaceHeight
    void releaseSurface() -> releaseSurface
    void release() -> release
    void makeCurrent() -> makeCurrent
    void detachCurrent() -> detachCurrent
    void swapBuffers() -> swapBuffers
    void swapBuffers(long) -> swapBuffers
    void <clinit>() -> <clinit>
org.webrtc.EglBase$$CC -> org.webrtc.EglBase$$CC:
    org.webrtc.EglBase$ConfigBuilder configBuilder$$STATIC$$() -> configBuilder$$STATIC$$
    int getOpenGlesVersionFromConfig$$STATIC$$(int[]) -> getOpenGlesVersionFromConfig$$STATIC$$
    org.webrtc.EglBase create$$STATIC$$(org.webrtc.EglBase$Context,int[]) -> create$$STATIC$$
    org.webrtc.EglBase create$$STATIC$$() -> create$$STATIC$$
    org.webrtc.EglBase create$$STATIC$$(org.webrtc.EglBase$Context) -> create$$STATIC$$
    org.webrtc.EglBase10 createEgl10$$STATIC$$(int[]) -> createEgl10$$STATIC$$
    org.webrtc.EglBase10 createEgl10$$STATIC$$(org.webrtc.EglBase10$Context,int[]) -> createEgl10$$STATIC$$
    org.webrtc.EglBase10 createEgl10$$STATIC$$(javax.microedition.khronos.egl.EGLContext,int[]) -> createEgl10$$STATIC$$
    org.webrtc.EglBase14 createEgl14$$STATIC$$(int[]) -> createEgl14$$STATIC$$
    org.webrtc.EglBase14 createEgl14$$STATIC$$(org.webrtc.EglBase14$Context,int[]) -> createEgl14$$STATIC$$
    org.webrtc.EglBase14 createEgl14$$STATIC$$(android.opengl.EGLContext,int[]) -> createEgl14$$STATIC$$
    void $$triggerInterfaceInit() -> $$triggerInterfaceInit
org.webrtc.EglBase$ConfigBuilder -> org.webrtc.EglBase$ConfigBuilder:
    int openGlesVersion -> openGlesVersion
    boolean hasAlphaChannel -> hasAlphaChannel
    boolean supportsPixelBuffer -> supportsPixelBuffer
    boolean isRecordable -> isRecordable
    void <init>() -> <init>
    org.webrtc.EglBase$ConfigBuilder setOpenGlesVersion(int) -> setOpenGlesVersion
    org.webrtc.EglBase$ConfigBuilder setHasAlphaChannel(boolean) -> setHasAlphaChannel
    org.webrtc.EglBase$ConfigBuilder setSupportsPixelBuffer(boolean) -> setSupportsPixelBuffer
    org.webrtc.EglBase$ConfigBuilder setIsRecordable(boolean) -> setIsRecordable
    int[] createConfigAttributes() -> createConfigAttributes
org.webrtc.EglBase$Context -> org.webrtc.EglBase$Context:
    long NO_CONTEXT -> NO_CONTEXT
    long getNativeEglContext() -> getNativeEglContext
org.webrtc.EglBase10 -> org.webrtc.EglBase10:
org.webrtc.EglBase10$Context -> org.webrtc.EglBase10$Context:
    javax.microedition.khronos.egl.EGLContext getRawContext() -> getRawContext
org.webrtc.EglBase10Impl -> org.webrtc.EglBase10Impl:
    java.lang.String TAG -> TAG
    int EGL_CONTEXT_CLIENT_VERSION -> EGL_CONTEXT_CLIENT_VERSION
    javax.microedition.khronos.egl.EGL10 egl -> egl
    javax.microedition.khronos.egl.EGLContext eglContext -> eglContext
    javax.microedition.khronos.egl.EGLConfig eglConfig -> eglConfig
    javax.microedition.khronos.egl.EGLDisplay eglDisplay -> eglDisplay
    javax.microedition.khronos.egl.EGLSurface eglSurface -> eglSurface
    void <init>(javax.microedition.khronos.egl.EGLContext,int[]) -> <init>
    void createSurface(android.view.Surface) -> createSurface
    void createSurface(android.graphics.SurfaceTexture) -> createSurface
    void createSurfaceInternal(java.lang.Object) -> createSurfaceInternal
    void createDummyPbufferSurface() -> createDummyPbufferSurface
    void createPbufferSurface(int,int) -> createPbufferSurface
    org.webrtc.EglBase$Context getEglBaseContext() -> getEglBaseContext
    boolean hasSurface() -> hasSurface
    int surfaceWidth() -> surfaceWidth
    int surfaceHeight() -> surfaceHeight
    void releaseSurface() -> releaseSurface
    void checkIsNotReleased() -> checkIsNotReleased
    void release() -> release
    void makeCurrent() -> makeCurrent
    void detachCurrent() -> detachCurrent
    void swapBuffers() -> swapBuffers
    void swapBuffers(long) -> swapBuffers
    javax.microedition.khronos.egl.EGLDisplay getEglDisplay() -> getEglDisplay
    javax.microedition.khronos.egl.EGLConfig getEglConfig(javax.microedition.khronos.egl.EGLDisplay,int[]) -> getEglConfig
    javax.microedition.khronos.egl.EGLContext createEglContext(javax.microedition.khronos.egl.EGLContext,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int) -> createEglContext
org.webrtc.EglBase10Impl$1FakeSurfaceHolder -> org.webrtc.EglBase10Impl$1FakeSurfaceHolder:
    android.view.Surface surface -> surface
    org.webrtc.EglBase10Impl this$0 -> this$0
    void <init>(org.webrtc.EglBase10Impl,android.view.Surface) -> <init>
    void addCallback(android.view.SurfaceHolder$Callback) -> addCallback
    void removeCallback(android.view.SurfaceHolder$Callback) -> removeCallback
    boolean isCreating() -> isCreating
    void setType(int) -> setType
    void setFixedSize(int,int) -> setFixedSize
    void setSizeFromLayout() -> setSizeFromLayout
    void setFormat(int) -> setFormat
    void setKeepScreenOn(boolean) -> setKeepScreenOn
    android.graphics.Canvas lockCanvas() -> lockCanvas
    android.graphics.Canvas lockCanvas(android.graphics.Rect) -> lockCanvas
    void unlockCanvasAndPost(android.graphics.Canvas) -> unlockCanvasAndPost
    android.graphics.Rect getSurfaceFrame() -> getSurfaceFrame
    android.view.Surface getSurface() -> getSurface
org.webrtc.EglBase10Impl$Context -> org.webrtc.EglBase10Impl$Context:
    javax.microedition.khronos.egl.EGLContext eglContext -> eglContext
    javax.microedition.khronos.egl.EGLContext getRawContext() -> getRawContext
    long getNativeEglContext() -> getNativeEglContext
    void <init>(javax.microedition.khronos.egl.EGLContext) -> <init>
org.webrtc.EglBase14 -> org.webrtc.EglBase14:
org.webrtc.EglBase14$Context -> org.webrtc.EglBase14$Context:
    android.opengl.EGLContext getRawContext() -> getRawContext
org.webrtc.EglBase14Impl -> org.webrtc.EglBase14Impl:
    java.lang.String TAG -> TAG
    int EGLExt_SDK_VERSION -> EGLExt_SDK_VERSION
    int CURRENT_SDK_VERSION -> CURRENT_SDK_VERSION
    android.opengl.EGLContext eglContext -> eglContext
    android.opengl.EGLConfig eglConfig -> eglConfig
    android.opengl.EGLDisplay eglDisplay -> eglDisplay
    android.opengl.EGLSurface eglSurface -> eglSurface
    boolean isEGL14Supported() -> isEGL14Supported
    void <init>(android.opengl.EGLContext,int[]) -> <init>
    void createSurface(android.view.Surface) -> createSurface
    void createSurface(android.graphics.SurfaceTexture) -> createSurface
    void createSurfaceInternal(java.lang.Object) -> createSurfaceInternal
    void createDummyPbufferSurface() -> createDummyPbufferSurface
    void createPbufferSurface(int,int) -> createPbufferSurface
    org.webrtc.EglBase14Impl$Context getEglBaseContext() -> getEglBaseContext
    boolean hasSurface() -> hasSurface
    int surfaceWidth() -> surfaceWidth
    int surfaceHeight() -> surfaceHeight
    void releaseSurface() -> releaseSurface
    void checkIsNotReleased() -> checkIsNotReleased
    void release() -> release
    void makeCurrent() -> makeCurrent
    void detachCurrent() -> detachCurrent
    void swapBuffers() -> swapBuffers
    void swapBuffers(long) -> swapBuffers
    android.opengl.EGLDisplay getEglDisplay() -> getEglDisplay
    android.opengl.EGLConfig getEglConfig(android.opengl.EGLDisplay,int[]) -> getEglConfig
    android.opengl.EGLContext createEglContext(android.opengl.EGLContext,android.opengl.EGLDisplay,android.opengl.EGLConfig,int) -> createEglContext
    org.webrtc.EglBase$Context getEglBaseContext() -> getEglBaseContext
    int access$000() -> access$000
    void <clinit>() -> <clinit>
org.webrtc.EglBase14Impl$Context -> org.webrtc.EglBase14Impl$Context:
    android.opengl.EGLContext egl14Context -> egl14Context
    android.opengl.EGLContext getRawContext() -> getRawContext
    long getNativeEglContext() -> getNativeEglContext
    void <init>(android.opengl.EGLContext) -> <init>
org.webrtc.EglRenderer -> org.webrtc.EglRenderer:
    java.lang.String TAG -> TAG
    long LOG_INTERVAL_SEC -> LOG_INTERVAL_SEC
    java.lang.String name -> name
    java.lang.Object handlerLock -> handlerLock
    android.os.Handler renderThreadHandler -> renderThreadHandler
    java.util.ArrayList frameListeners -> frameListeners
    java.lang.Object fpsReductionLock -> fpsReductionLock
    long nextFrameTimeNs -> nextFrameTimeNs
    long minRenderPeriodNs -> minRenderPeriodNs
    org.webrtc.EglBase eglBase -> eglBase
    org.webrtc.VideoFrameDrawer frameDrawer -> frameDrawer
    org.webrtc.RendererCommon$GlDrawer drawer -> drawer
    boolean usePresentationTimeStamp -> usePresentationTimeStamp
    android.graphics.Matrix drawMatrix -> drawMatrix
    java.lang.Object frameLock -> frameLock
    org.webrtc.VideoFrame pendingFrame -> pendingFrame
    java.lang.Object layoutLock -> layoutLock
    float layoutAspectRatio -> layoutAspectRatio
    boolean mirrorHorizontally -> mirrorHorizontally
    boolean mirrorVertically -> mirrorVertically
    java.lang.Object statisticsLock -> statisticsLock
    int framesReceived -> framesReceived
    int framesDropped -> framesDropped
    int framesRendered -> framesRendered
    long statisticsStartTimeNs -> statisticsStartTimeNs
    long renderTimeNs -> renderTimeNs
    long renderSwapBufferTimeNs -> renderSwapBufferTimeNs
    org.webrtc.GlTextureFrameBuffer bitmapTextureFramebuffer -> bitmapTextureFramebuffer
    java.lang.Runnable logStatisticsRunnable -> logStatisticsRunnable
    org.webrtc.EglRenderer$EglSurfaceCreation eglSurfaceCreationRunnable -> eglSurfaceCreationRunnable
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,org.webrtc.VideoFrameDrawer) -> <init>
    void init(org.webrtc.EglBase$Context,int[],org.webrtc.RendererCommon$GlDrawer,boolean) -> init
    void init(org.webrtc.EglBase$Context,int[],org.webrtc.RendererCommon$GlDrawer) -> init
    void createEglSurface(android.view.Surface) -> createEglSurface
    void createEglSurface(android.graphics.SurfaceTexture) -> createEglSurface
    void createEglSurfaceInternal(java.lang.Object) -> createEglSurfaceInternal
    void release() -> release
    void resetStatistics(long) -> resetStatistics
    void printStackTrace() -> printStackTrace
    void setMirror(boolean) -> setMirror
    void setMirrorVertically(boolean) -> setMirrorVertically
    void setLayoutAspectRatio(float) -> setLayoutAspectRatio
    void setFpsReduction(float) -> setFpsReduction
    void disableFpsReduction() -> disableFpsReduction
    void pauseVideo() -> pauseVideo
    void addFrameListener(org.webrtc.EglRenderer$FrameListener,float) -> addFrameListener
    void addFrameListener(org.webrtc.EglRenderer$FrameListener,float,org.webrtc.RendererCommon$GlDrawer) -> addFrameListener
    void addFrameListener(org.webrtc.EglRenderer$FrameListener,float,org.webrtc.RendererCommon$GlDrawer,boolean) -> addFrameListener
    void removeFrameListener(org.webrtc.EglRenderer$FrameListener) -> removeFrameListener
    void onFrame(org.webrtc.VideoFrame) -> onFrame
    void releaseEglSurface(java.lang.Runnable) -> releaseEglSurface
    void postToRenderThread(java.lang.Runnable) -> postToRenderThread
    void clearSurfaceOnRenderThread(float,float,float,float) -> clearSurfaceOnRenderThread
    void clearImage() -> clearImage
    void clearImage(float,float,float,float) -> clearImage
    void renderFrameOnRenderThread() -> renderFrameOnRenderThread
    void notifyCallbacks(org.webrtc.VideoFrame,boolean) -> notifyCallbacks
    java.lang.String averageTimeAsString(long,int) -> averageTimeAsString
    void logStatistics() -> logStatistics
    void logD(java.lang.String) -> logD
    void logW(java.lang.String) -> logW
    void lambda$clearImage$6$EglRenderer(float,float,float,float) -> lambda$clearImage$6$EglRenderer
    void lambda$releaseEglSurface$5$EglRenderer(java.lang.Runnable) -> lambda$releaseEglSurface$5$EglRenderer
    void lambda$removeFrameListener$4$EglRenderer(java.util.concurrent.CountDownLatch,org.webrtc.EglRenderer$FrameListener) -> lambda$removeFrameListener$4$EglRenderer
    void lambda$addFrameListener$3$EglRenderer(org.webrtc.RendererCommon$GlDrawer,org.webrtc.EglRenderer$FrameListener,float,boolean) -> lambda$addFrameListener$3$EglRenderer
    void lambda$release$2$EglRenderer(android.os.Looper) -> lambda$release$2$EglRenderer
    void lambda$release$1$EglRenderer(java.util.concurrent.CountDownLatch) -> lambda$release$1$EglRenderer
    void lambda$init$0$EglRenderer(org.webrtc.EglBase$Context,int[]) -> lambda$init$0$EglRenderer
    org.webrtc.EglBase access$000(org.webrtc.EglRenderer) -> access$000
    void access$100(org.webrtc.EglRenderer) -> access$100
    java.lang.Object access$200(org.webrtc.EglRenderer) -> access$200
    android.os.Handler access$300(org.webrtc.EglRenderer) -> access$300
    java.lang.Runnable access$400(org.webrtc.EglRenderer) -> access$400
    android.os.Handler access$302(org.webrtc.EglRenderer,android.os.Handler) -> access$302
    void bridge$lambda$0$EglRenderer() -> bridge$lambda$0$EglRenderer
org.webrtc.EglRenderer$$Lambda$0 -> org.webrtc.EglRenderer$$Lambda$0:
    org.webrtc.EglRenderer arg$1 -> arg$1
    org.webrtc.EglBase$Context arg$2 -> arg$2
    int[] arg$3 -> arg$3
    void <init>(org.webrtc.EglRenderer,org.webrtc.EglBase$Context,int[]) -> <init>
    void run() -> run
org.webrtc.EglRenderer$$Lambda$1 -> org.webrtc.EglRenderer$$Lambda$1:
    org.webrtc.EglRenderer arg$1 -> arg$1
    java.util.concurrent.CountDownLatch arg$2 -> arg$2
    void <init>(org.webrtc.EglRenderer,java.util.concurrent.CountDownLatch) -> <init>
    void run() -> run
org.webrtc.EglRenderer$$Lambda$2 -> org.webrtc.EglRenderer$$Lambda$2:
    org.webrtc.EglRenderer arg$1 -> arg$1
    android.os.Looper arg$2 -> arg$2
    void <init>(org.webrtc.EglRenderer,android.os.Looper) -> <init>
    void run() -> run
org.webrtc.EglRenderer$$Lambda$3 -> org.webrtc.EglRenderer$$Lambda$3:
    org.webrtc.EglRenderer arg$1 -> arg$1
    org.webrtc.RendererCommon$GlDrawer arg$2 -> arg$2
    org.webrtc.EglRenderer$FrameListener arg$3 -> arg$3
    float arg$4 -> arg$4
    boolean arg$5 -> arg$5
    void <init>(org.webrtc.EglRenderer,org.webrtc.RendererCommon$GlDrawer,org.webrtc.EglRenderer$FrameListener,float,boolean) -> <init>
    void run() -> run
org.webrtc.EglRenderer$$Lambda$4 -> org.webrtc.EglRenderer$$Lambda$4:
    org.webrtc.EglRenderer arg$1 -> arg$1
    java.util.concurrent.CountDownLatch arg$2 -> arg$2
    org.webrtc.EglRenderer$FrameListener arg$3 -> arg$3
    void <init>(org.webrtc.EglRenderer,java.util.concurrent.CountDownLatch,org.webrtc.EglRenderer$FrameListener) -> <init>
    void run() -> run
org.webrtc.EglRenderer$$Lambda$5 -> org.webrtc.EglRenderer$$Lambda$5:
    org.webrtc.EglRenderer arg$1 -> arg$1
    void <init>(org.webrtc.EglRenderer) -> <init>
    void run() -> run
org.webrtc.EglRenderer$$Lambda$6 -> org.webrtc.EglRenderer$$Lambda$6:
    org.webrtc.EglRenderer arg$1 -> arg$1
    java.lang.Runnable arg$2 -> arg$2
    void <init>(org.webrtc.EglRenderer,java.lang.Runnable) -> <init>
    void run() -> run
org.webrtc.EglRenderer$$Lambda$7 -> org.webrtc.EglRenderer$$Lambda$7:
    org.webrtc.EglRenderer arg$1 -> arg$1
    float arg$2 -> arg$2
    float arg$3 -> arg$3
    float arg$4 -> arg$4
    float arg$5 -> arg$5
    void <init>(org.webrtc.EglRenderer,float,float,float,float) -> <init>
    void run() -> run
org.webrtc.EglRenderer$1 -> org.webrtc.EglRenderer$1:
    org.webrtc.EglRenderer this$0 -> this$0
    void <init>(org.webrtc.EglRenderer) -> <init>
    void run() -> run
org.webrtc.EglRenderer$2 -> org.webrtc.EglRenderer$2:
    org.webrtc.EglRenderer this$0 -> this$0
    void <init>(org.webrtc.EglRenderer) -> <init>
    void run() -> run
org.webrtc.EglRenderer$EglSurfaceCreation -> org.webrtc.EglRenderer$EglSurfaceCreation:
    java.lang.Object surface -> surface
    org.webrtc.EglRenderer this$0 -> this$0
    void <init>(org.webrtc.EglRenderer) -> <init>
    void setSurface(java.lang.Object) -> setSurface
    void run() -> run
    void <init>(org.webrtc.EglRenderer,org.webrtc.EglRenderer$1) -> <init>
org.webrtc.EglRenderer$FrameListener -> org.webrtc.EglRenderer$FrameListener:
    void onFrame(android.graphics.Bitmap) -> onFrame
org.webrtc.EglRenderer$FrameListenerAndParams -> org.webrtc.EglRenderer$FrameListenerAndParams:
    org.webrtc.EglRenderer$FrameListener listener -> listener
    float scale -> scale
    org.webrtc.RendererCommon$GlDrawer drawer -> drawer
    boolean applyFpsReduction -> applyFpsReduction
    void <init>(org.webrtc.EglRenderer$FrameListener,float,org.webrtc.RendererCommon$GlDrawer,boolean) -> <init>
org.webrtc.EglRenderer$HandlerWithExceptionCallback -> org.webrtc.EglRenderer$HandlerWithExceptionCallback:
    java.lang.Runnable exceptionCallback -> exceptionCallback
    void <init>(android.os.Looper,java.lang.Runnable) -> <init>
    void dispatchMessage(android.os.Message) -> dispatchMessage
org.webrtc.Empty -> org.webrtc.Empty:
    void <init>() -> <init>
org.webrtc.EncodedImage -> org.webrtc.EncodedImage:
    java.nio.ByteBuffer buffer -> buffer
    int encodedWidth -> encodedWidth
    int encodedHeight -> encodedHeight
    long captureTimeMs -> captureTimeMs
    long captureTimeNs -> captureTimeNs
    org.webrtc.EncodedImage$FrameType frameType -> frameType
    int rotation -> rotation
    boolean completeFrame -> completeFrame
    java.lang.Integer qp -> qp
    void <init>(java.nio.ByteBuffer,int,int,long,org.webrtc.EncodedImage$FrameType,int,boolean,java.lang.Integer) -> <init>
    org.webrtc.EncodedImage$Builder builder() -> builder
    void <init>(java.nio.ByteBuffer,int,int,long,org.webrtc.EncodedImage$FrameType,int,boolean,java.lang.Integer,org.webrtc.EncodedImage$1) -> <init>
org.webrtc.EncodedImage$1 -> org.webrtc.EncodedImage$1:
org.webrtc.EncodedImage$Builder -> org.webrtc.EncodedImage$Builder:
    java.nio.ByteBuffer buffer -> buffer
    int encodedWidth -> encodedWidth
    int encodedHeight -> encodedHeight
    long captureTimeNs -> captureTimeNs
    org.webrtc.EncodedImage$FrameType frameType -> frameType
    int rotation -> rotation
    boolean completeFrame -> completeFrame
    java.lang.Integer qp -> qp
    void <init>() -> <init>
    org.webrtc.EncodedImage$Builder setBuffer(java.nio.ByteBuffer) -> setBuffer
    org.webrtc.EncodedImage$Builder setEncodedWidth(int) -> setEncodedWidth
    org.webrtc.EncodedImage$Builder setEncodedHeight(int) -> setEncodedHeight
    org.webrtc.EncodedImage$Builder setCaptureTimeMs(long) -> setCaptureTimeMs
    org.webrtc.EncodedImage$Builder setCaptureTimeNs(long) -> setCaptureTimeNs
    org.webrtc.EncodedImage$Builder setFrameType(org.webrtc.EncodedImage$FrameType) -> setFrameType
    org.webrtc.EncodedImage$Builder setRotation(int) -> setRotation
    org.webrtc.EncodedImage$Builder setCompleteFrame(boolean) -> setCompleteFrame
    org.webrtc.EncodedImage$Builder setQp(java.lang.Integer) -> setQp
    org.webrtc.EncodedImage createEncodedImage() -> createEncodedImage
    void <init>(org.webrtc.EncodedImage$1) -> <init>
org.webrtc.EncodedImage$FrameType -> org.webrtc.EncodedImage$FrameType:
    org.webrtc.EncodedImage$FrameType EmptyFrame -> EmptyFrame
    org.webrtc.EncodedImage$FrameType VideoFrameKey -> VideoFrameKey
    org.webrtc.EncodedImage$FrameType VideoFrameDelta -> VideoFrameDelta
    int nativeIndex -> nativeIndex
    org.webrtc.EncodedImage$FrameType[] $VALUES -> $VALUES
    org.webrtc.EncodedImage$FrameType[] values() -> values
    org.webrtc.EncodedImage$FrameType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    int getNative() -> getNative
    org.webrtc.EncodedImage$FrameType fromNativeIndex(int) -> fromNativeIndex
    void <clinit>() -> <clinit>
org.webrtc.FecControllerFactoryFactoryInterface -> org.webrtc.FecControllerFactoryFactoryInterface:
    long createNative() -> createNative
org.webrtc.FileVideoCapturer -> org.webrtc.FileVideoCapturer:
    java.lang.String TAG -> TAG
    org.webrtc.FileVideoCapturer$VideoReader videoReader -> videoReader
    org.webrtc.CapturerObserver capturerObserver -> capturerObserver
    java.util.Timer timer -> timer
    java.util.TimerTask tickTask -> tickTask
    void <init>(java.lang.String) -> <init>
    void tick() -> tick
    void initialize(org.webrtc.SurfaceTextureHelper,android.content.Context,org.webrtc.CapturerObserver) -> initialize
    void startCapture(int,int,int) -> startCapture
    void stopCapture() -> stopCapture
    void changeCaptureFormat(int,int,int) -> changeCaptureFormat
    void dispose() -> dispose
    boolean isScreencast() -> isScreencast
org.webrtc.FileVideoCapturer$1 -> org.webrtc.FileVideoCapturer$1:
    org.webrtc.FileVideoCapturer this$0 -> this$0
    void <init>(org.webrtc.FileVideoCapturer) -> <init>
    void run() -> run
org.webrtc.FileVideoCapturer$VideoReader -> org.webrtc.FileVideoCapturer$VideoReader:
    org.webrtc.VideoFrame getNextFrame() -> getNextFrame
    void close() -> close
org.webrtc.FileVideoCapturer$VideoReaderY4M -> org.webrtc.FileVideoCapturer$VideoReaderY4M:
    java.lang.String TAG -> TAG
    java.lang.String Y4M_FRAME_DELIMETER -> Y4M_FRAME_DELIMETER
    int FRAME_DELIMETER_LENGTH -> FRAME_DELIMETER_LENGTH
    int frameWidth -> frameWidth
    int frameHeight -> frameHeight
    long videoStart -> videoStart
    java.io.RandomAccessFile mediaFile -> mediaFile
    java.nio.channels.FileChannel mediaFileChannel -> mediaFileChannel
    void <init>(java.lang.String) -> <init>
    org.webrtc.VideoFrame getNextFrame() -> getNextFrame
    void close() -> close
    void <clinit>() -> <clinit>
org.webrtc.FrameDecryptor -> org.webrtc.FrameDecryptor:
    long getNativeFrameDecryptor() -> getNativeFrameDecryptor
org.webrtc.FrameEncryptor -> org.webrtc.FrameEncryptor:
    long getNativeFrameEncryptor() -> getNativeFrameEncryptor
org.webrtc.FramerateBitrateAdjuster -> org.webrtc.FramerateBitrateAdjuster:
    int INITIAL_FPS -> INITIAL_FPS
    void <init>() -> <init>
    void setTargets(int,int) -> setTargets
    int getCodecConfigFramerate() -> getCodecConfigFramerate
org.webrtc.GlGenericDrawer -> org.webrtc.GlGenericDrawer:
    java.lang.String INPUT_VERTEX_COORDINATE_NAME -> INPUT_VERTEX_COORDINATE_NAME
    java.lang.String INPUT_TEXTURE_COORDINATE_NAME -> INPUT_TEXTURE_COORDINATE_NAME
    java.lang.String TEXTURE_MATRIX_NAME -> TEXTURE_MATRIX_NAME
    java.lang.String DEFAULT_VERTEX_SHADER_STRING -> DEFAULT_VERTEX_SHADER_STRING
    java.nio.FloatBuffer FULL_RECTANGLE_BUFFER -> FULL_RECTANGLE_BUFFER
    java.nio.FloatBuffer FULL_RECTANGLE_TEXTURE_BUFFER -> FULL_RECTANGLE_TEXTURE_BUFFER
    java.lang.String genericFragmentSource -> genericFragmentSource
    java.lang.String vertexShader -> vertexShader
    org.webrtc.GlGenericDrawer$ShaderCallbacks shaderCallbacks -> shaderCallbacks
    org.webrtc.GlGenericDrawer$ShaderType currentShaderType -> currentShaderType
    org.webrtc.GlShader currentShader -> currentShader
    int inPosLocation -> inPosLocation
    int inTcLocation -> inTcLocation
    int texMatrixLocation -> texMatrixLocation
    java.lang.String createFragmentShaderString(java.lang.String,org.webrtc.GlGenericDrawer$ShaderType) -> createFragmentShaderString
    void <init>(java.lang.String,org.webrtc.GlGenericDrawer$ShaderCallbacks) -> <init>
    void <init>(java.lang.String,java.lang.String,org.webrtc.GlGenericDrawer$ShaderCallbacks) -> <init>
    org.webrtc.GlShader createShader(org.webrtc.GlGenericDrawer$ShaderType) -> createShader
    void drawOes(int,float[],int,int,int,int,int,int) -> drawOes
    void drawRgb(int,float[],int,int,int,int,int,int) -> drawRgb
    void drawYuv(int[],float[],int,int,int,int,int,int) -> drawYuv
    void prepareShader(org.webrtc.GlGenericDrawer$ShaderType,float[],int,int,int,int) -> prepareShader
    void release() -> release
    void <clinit>() -> <clinit>
org.webrtc.GlGenericDrawer$ShaderCallbacks -> org.webrtc.GlGenericDrawer$ShaderCallbacks:
    void onNewShader(org.webrtc.GlShader) -> onNewShader
    void onPrepareShader(org.webrtc.GlShader,float[],int,int,int,int) -> onPrepareShader
org.webrtc.GlGenericDrawer$ShaderType -> org.webrtc.GlGenericDrawer$ShaderType:
    org.webrtc.GlGenericDrawer$ShaderType OES -> OES
    org.webrtc.GlGenericDrawer$ShaderType RGB -> RGB
    org.webrtc.GlGenericDrawer$ShaderType YUV -> YUV
    org.webrtc.GlGenericDrawer$ShaderType[] $VALUES -> $VALUES
    org.webrtc.GlGenericDrawer$ShaderType[] values() -> values
    org.webrtc.GlGenericDrawer$ShaderType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.webrtc.GlRectDrawer -> org.webrtc.GlRectDrawer:
    java.lang.String FRAGMENT_SHADER -> FRAGMENT_SHADER
    void <init>() -> <init>
    void release() -> release
    void drawYuv(int[],float[],int,int,int,int,int,int) -> drawYuv
    void drawRgb(int,float[],int,int,int,int,int,int) -> drawRgb
    void drawOes(int,float[],int,int,int,int,int,int) -> drawOes
org.webrtc.GlRectDrawer$1 -> org.webrtc.GlRectDrawer$1:
org.webrtc.GlRectDrawer$ShaderCallbacks -> org.webrtc.GlRectDrawer$ShaderCallbacks:
    void <init>() -> <init>
    void onNewShader(org.webrtc.GlShader) -> onNewShader
    void onPrepareShader(org.webrtc.GlShader,float[],int,int,int,int) -> onPrepareShader
    void <init>(org.webrtc.GlRectDrawer$1) -> <init>
org.webrtc.GlShader -> org.webrtc.GlShader:
    java.lang.String TAG -> TAG
    int program -> program
    int compileShader(int,java.lang.String) -> compileShader
    void <init>(java.lang.String,java.lang.String) -> <init>
    int getAttribLocation(java.lang.String) -> getAttribLocation
    void setVertexAttribArray(java.lang.String,int,java.nio.FloatBuffer) -> setVertexAttribArray
    void setVertexAttribArray(java.lang.String,int,int,java.nio.FloatBuffer) -> setVertexAttribArray
    int getUniformLocation(java.lang.String) -> getUniformLocation
    void useProgram() -> useProgram
    void release() -> release
org.webrtc.GlTextureFrameBuffer -> org.webrtc.GlTextureFrameBuffer:
    int pixelFormat -> pixelFormat
    int frameBufferId -> frameBufferId
    int textureId -> textureId
    int width -> width
    int height -> height
    void <init>(int) -> <init>
    void setSize(int,int) -> setSize
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    int getFrameBufferId() -> getFrameBufferId
    int getTextureId() -> getTextureId
    void release() -> release
org.webrtc.GlUtil -> org.webrtc.GlUtil:
    void <init>() -> <init>
    void checkNoGLES2Error(java.lang.String) -> checkNoGLES2Error
    java.nio.FloatBuffer createFloatBuffer(float[]) -> createFloatBuffer
    int generateTexture(int) -> generateTexture
org.webrtc.H264Utils -> org.webrtc.H264Utils:
    java.lang.String H264_FMTP_PROFILE_LEVEL_ID -> H264_FMTP_PROFILE_LEVEL_ID
    java.lang.String H264_FMTP_LEVEL_ASYMMETRY_ALLOWED -> H264_FMTP_LEVEL_ASYMMETRY_ALLOWED
    java.lang.String H264_FMTP_PACKETIZATION_MODE -> H264_FMTP_PACKETIZATION_MODE
    java.lang.String H264_PROFILE_CONSTRAINED_BASELINE -> H264_PROFILE_CONSTRAINED_BASELINE
    java.lang.String H264_PROFILE_CONSTRAINED_HIGH -> H264_PROFILE_CONSTRAINED_HIGH
    java.lang.String H264_LEVEL_3_1 -> H264_LEVEL_3_1
    java.lang.String H264_CONSTRAINED_HIGH_3_1 -> H264_CONSTRAINED_HIGH_3_1
    java.lang.String H264_CONSTRAINED_BASELINE_3_1 -> H264_CONSTRAINED_BASELINE_3_1
    org.webrtc.VideoCodecInfo DEFAULT_H264_BASELINE_PROFILE_CODEC -> DEFAULT_H264_BASELINE_PROFILE_CODEC
    org.webrtc.VideoCodecInfo DEFAULT_H264_HIGH_PROFILE_CODEC -> DEFAULT_H264_HIGH_PROFILE_CODEC
    void <init>() -> <init>
    java.util.Map getDefaultH264Params(boolean) -> getDefaultH264Params
    boolean isSameH264Profile(java.util.Map,java.util.Map) -> isSameH264Profile
    boolean nativeIsSameH264Profile(java.util.Map,java.util.Map) -> nativeIsSameH264Profile
    void <clinit>() -> <clinit>
org.webrtc.HardwareVideoDecoderFactory -> org.webrtc.HardwareVideoDecoderFactory:
    org.webrtc.Predicate defaultAllowedPredicate -> defaultAllowedPredicate
    void <init>() -> <init>
    void <init>(org.webrtc.EglBase$Context) -> <init>
    void <init>(org.webrtc.EglBase$Context,org.webrtc.Predicate) -> <init>
    org.webrtc.VideoCodecInfo[] getSupportedCodecs() -> getSupportedCodecs
    org.webrtc.VideoDecoder createDecoder(org.webrtc.VideoCodecInfo) -> createDecoder
    void <clinit>() -> <clinit>
org.webrtc.HardwareVideoDecoderFactory$1 -> org.webrtc.HardwareVideoDecoderFactory$1:
    java.lang.String[] prefixBlacklist -> prefixBlacklist
    void <init>() -> <init>
    boolean test(android.media.MediaCodecInfo) -> test
    boolean test(java.lang.Object) -> test
    org.webrtc.Predicate or(org.webrtc.Predicate) -> or
    org.webrtc.Predicate and(org.webrtc.Predicate) -> and
    org.webrtc.Predicate negate() -> negate
org.webrtc.HardwareVideoEncoder -> org.webrtc.HardwareVideoEncoder:
    java.lang.String TAG -> TAG
    int VIDEO_ControlRateConstant -> VIDEO_ControlRateConstant
    java.lang.String KEY_BITRATE_MODE -> KEY_BITRATE_MODE
    int VIDEO_AVC_PROFILE_HIGH -> VIDEO_AVC_PROFILE_HIGH
    int VIDEO_AVC_LEVEL_3 -> VIDEO_AVC_LEVEL_3
    int MAX_VIDEO_FRAMERATE -> MAX_VIDEO_FRAMERATE
    int MAX_ENCODER_Q_SIZE -> MAX_ENCODER_Q_SIZE
    int MEDIA_CODEC_RELEASE_TIMEOUT_MS -> MEDIA_CODEC_RELEASE_TIMEOUT_MS
    int DEQUEUE_OUTPUT_BUFFER_TIMEOUT_US -> DEQUEUE_OUTPUT_BUFFER_TIMEOUT_US
    org.webrtc.MediaCodecWrapperFactory mediaCodecWrapperFactory -> mediaCodecWrapperFactory
    java.lang.String codecName -> codecName
    org.webrtc.VideoCodecType codecType -> codecType
    java.lang.Integer surfaceColorFormat -> surfaceColorFormat
    java.lang.Integer yuvColorFormat -> yuvColorFormat
    org.webrtc.HardwareVideoEncoder$YuvFormat yuvFormat -> yuvFormat
    java.util.Map params -> params
    int keyFrameIntervalSec -> keyFrameIntervalSec
    long forcedKeyFrameNs -> forcedKeyFrameNs
    org.webrtc.BitrateAdjuster bitrateAdjuster -> bitrateAdjuster
    org.webrtc.EglBase14$Context sharedContext -> sharedContext
    org.webrtc.GlRectDrawer textureDrawer -> textureDrawer
    org.webrtc.VideoFrameDrawer videoFrameDrawer -> videoFrameDrawer
    java.util.concurrent.BlockingDeque outputBuilders -> outputBuilders
    org.webrtc.ThreadUtils$ThreadChecker encodeThreadChecker -> encodeThreadChecker
    org.webrtc.ThreadUtils$ThreadChecker outputThreadChecker -> outputThreadChecker
    org.webrtc.VideoEncoder$Callback callback -> callback
    boolean automaticResizeOn -> automaticResizeOn
    org.webrtc.MediaCodecWrapper codec -> codec
    java.lang.Thread outputThread -> outputThread
    org.webrtc.EglBase14 textureEglBase -> textureEglBase
    android.view.Surface textureInputSurface -> textureInputSurface
    int width -> width
    int height -> height
    boolean useSurfaceMode -> useSurfaceMode
    long lastKeyFrameNs -> lastKeyFrameNs
    java.nio.ByteBuffer configBuffer -> configBuffer
    int adjustedBitrate -> adjustedBitrate
    boolean running -> running
    java.lang.Exception shutdownException -> shutdownException
    void <init>(org.webrtc.MediaCodecWrapperFactory,java.lang.String,org.webrtc.VideoCodecType,java.lang.Integer,java.lang.Integer,java.util.Map,int,int,org.webrtc.BitrateAdjuster,org.webrtc.EglBase14$Context) -> <init>
    org.webrtc.VideoCodecStatus initEncode(org.webrtc.VideoEncoder$Settings,org.webrtc.VideoEncoder$Callback) -> initEncode
    org.webrtc.VideoCodecStatus initEncodeInternal() -> initEncodeInternal
    org.webrtc.VideoCodecStatus release() -> release
    org.webrtc.VideoCodecStatus encode(org.webrtc.VideoFrame,org.webrtc.VideoEncoder$EncodeInfo) -> encode
    org.webrtc.VideoCodecStatus encodeTextureBuffer(org.webrtc.VideoFrame) -> encodeTextureBuffer
    org.webrtc.VideoCodecStatus encodeByteBuffer(org.webrtc.VideoFrame,org.webrtc.VideoFrame$Buffer,int) -> encodeByteBuffer
    org.webrtc.VideoCodecStatus setRateAllocation(org.webrtc.VideoEncoder$BitrateAllocation,int) -> setRateAllocation
    org.webrtc.VideoEncoder$ScalingSettings getScalingSettings() -> getScalingSettings
    java.lang.String getImplementationName() -> getImplementationName
    org.webrtc.VideoCodecStatus resetCodec(int,int,boolean) -> resetCodec
    boolean shouldForceKeyFrame(long) -> shouldForceKeyFrame
    void requestKeyFrame(long) -> requestKeyFrame
    java.lang.Thread createOutputThread() -> createOutputThread
    void deliverEncodedImage() -> deliverEncodedImage
    void releaseCodecOnOutputThread() -> releaseCodecOnOutputThread
    org.webrtc.VideoCodecStatus updateBitrate() -> updateBitrate
    boolean canUseSurface() -> canUseSurface
    void fillInputBuffer(java.nio.ByteBuffer,org.webrtc.VideoFrame$Buffer) -> fillInputBuffer
    boolean access$000(org.webrtc.HardwareVideoEncoder) -> access$000
    void access$100(org.webrtc.HardwareVideoEncoder) -> access$100
    long createNativeVideoEncoder() -> createNativeVideoEncoder
    boolean isHardwareEncoder() -> isHardwareEncoder
org.webrtc.HardwareVideoEncoder$1 -> org.webrtc.HardwareVideoEncoder$1:
    org.webrtc.HardwareVideoEncoder this$0 -> this$0
    void <init>(org.webrtc.HardwareVideoEncoder) -> <init>
    void run() -> run
org.webrtc.HardwareVideoEncoder$YuvFormat -> org.webrtc.HardwareVideoEncoder$YuvFormat:
    org.webrtc.HardwareVideoEncoder$YuvFormat I420 -> I420
    org.webrtc.HardwareVideoEncoder$YuvFormat NV12 -> NV12
    org.webrtc.HardwareVideoEncoder$YuvFormat[] $VALUES -> $VALUES
    org.webrtc.HardwareVideoEncoder$YuvFormat[] values() -> values
    org.webrtc.HardwareVideoEncoder$YuvFormat valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void fillBuffer(java.nio.ByteBuffer,org.webrtc.VideoFrame$Buffer) -> fillBuffer
    org.webrtc.HardwareVideoEncoder$YuvFormat valueOf(int) -> valueOf
    void <init>(java.lang.String,int,org.webrtc.HardwareVideoEncoder$1) -> <init>
    void <clinit>() -> <clinit>
org.webrtc.HardwareVideoEncoder$YuvFormat$1 -> org.webrtc.HardwareVideoEncoder$YuvFormat$1:
    void <init>(java.lang.String,int) -> <init>
    void fillBuffer(java.nio.ByteBuffer,org.webrtc.VideoFrame$Buffer) -> fillBuffer
org.webrtc.HardwareVideoEncoder$YuvFormat$2 -> org.webrtc.HardwareVideoEncoder$YuvFormat$2:
    void <init>(java.lang.String,int) -> <init>
    void fillBuffer(java.nio.ByteBuffer,org.webrtc.VideoFrame$Buffer) -> fillBuffer
org.webrtc.HardwareVideoEncoderFactory -> org.webrtc.HardwareVideoEncoderFactory:
    java.lang.String TAG -> TAG
    int QCOM_VP8_KEY_FRAME_INTERVAL_ANDROID_L_MS -> QCOM_VP8_KEY_FRAME_INTERVAL_ANDROID_L_MS
    int QCOM_VP8_KEY_FRAME_INTERVAL_ANDROID_M_MS -> QCOM_VP8_KEY_FRAME_INTERVAL_ANDROID_M_MS
    int QCOM_VP8_KEY_FRAME_INTERVAL_ANDROID_N_MS -> QCOM_VP8_KEY_FRAME_INTERVAL_ANDROID_N_MS
    java.util.List H264_HW_EXCEPTION_MODELS -> H264_HW_EXCEPTION_MODELS
    org.webrtc.EglBase14$Context sharedContext -> sharedContext
    boolean enableIntelVp8Encoder -> enableIntelVp8Encoder
    boolean enableH264HighProfile -> enableH264HighProfile
    org.webrtc.Predicate codecAllowedPredicate -> codecAllowedPredicate
    void <init>(org.webrtc.EglBase$Context,boolean,boolean) -> <init>
    void <init>(org.webrtc.EglBase$Context,boolean,boolean,org.webrtc.Predicate) -> <init>
    void <init>(boolean,boolean) -> <init>
    org.webrtc.VideoEncoder createEncoder(org.webrtc.VideoCodecInfo) -> createEncoder
    org.webrtc.VideoCodecInfo[] getSupportedCodecs() -> getSupportedCodecs
    android.media.MediaCodecInfo findCodecForType(org.webrtc.VideoCodecType) -> findCodecForType
    boolean isSupportedCodec(android.media.MediaCodecInfo,org.webrtc.VideoCodecType) -> isSupportedCodec
    boolean isHardwareSupportedInCurrentSdk(android.media.MediaCodecInfo,org.webrtc.VideoCodecType) -> isHardwareSupportedInCurrentSdk
    boolean isHardwareSupportedInCurrentSdkVp8(android.media.MediaCodecInfo) -> isHardwareSupportedInCurrentSdkVp8
    boolean isHardwareSupportedInCurrentSdkVp9(android.media.MediaCodecInfo) -> isHardwareSupportedInCurrentSdkVp9
    boolean isHardwareSupportedInCurrentSdkH264(android.media.MediaCodecInfo) -> isHardwareSupportedInCurrentSdkH264
    boolean isMediaCodecAllowed(android.media.MediaCodecInfo) -> isMediaCodecAllowed
    int getKeyFrameIntervalSec(org.webrtc.VideoCodecType) -> getKeyFrameIntervalSec
    int getForcedKeyFrameIntervalMs(org.webrtc.VideoCodecType,java.lang.String) -> getForcedKeyFrameIntervalMs
    org.webrtc.BitrateAdjuster createBitrateAdjuster(org.webrtc.VideoCodecType,java.lang.String) -> createBitrateAdjuster
    boolean isH264HighProfileSupported(android.media.MediaCodecInfo) -> isH264HighProfileSupported
    void <clinit>() -> <clinit>
org.webrtc.HardwareVideoEncoderFactory$1 -> org.webrtc.HardwareVideoEncoderFactory$1:
    int[] $SwitchMap$org$webrtc$VideoCodecType -> $SwitchMap$org$webrtc$VideoCodecType
    void <clinit>() -> <clinit>
org.webrtc.Histogram -> org.webrtc.Histogram:
    long handle -> handle
    void <init>(long) -> <init>
    org.webrtc.Histogram createCounts(java.lang.String,int,int,int) -> createCounts
    org.webrtc.Histogram createEnumeration(java.lang.String,int) -> createEnumeration
    void addSample(int) -> addSample
    long nativeCreateCounts(java.lang.String,int,int,int) -> nativeCreateCounts
    long nativeCreateEnumeration(java.lang.String,int) -> nativeCreateEnumeration
    void nativeAddSample(long,int) -> nativeAddSample
org.webrtc.IceCandidate -> org.webrtc.IceCandidate:
    java.lang.String sdpMid -> sdpMid
    int sdpMLineIndex -> sdpMLineIndex
    java.lang.String sdp -> sdp
    java.lang.String serverUrl -> serverUrl
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    void <init>(java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    java.lang.String toString() -> toString
    java.lang.String getSdpMid() -> getSdpMid
    java.lang.String getSdp() -> getSdp
org.webrtc.JNILogging -> org.webrtc.JNILogging:
    org.webrtc.Loggable loggable -> loggable
    void <init>(org.webrtc.Loggable) -> <init>
    void logToInjectable(java.lang.String,java.lang.Integer,java.lang.String) -> logToInjectable
org.webrtc.JavaI420Buffer -> org.webrtc.JavaI420Buffer:
    int width -> width
    int height -> height
    java.nio.ByteBuffer dataY -> dataY
    java.nio.ByteBuffer dataU -> dataU
    java.nio.ByteBuffer dataV -> dataV
    int strideY -> strideY
    int strideU -> strideU
    int strideV -> strideV
    org.webrtc.RefCountDelegate refCountDelegate -> refCountDelegate
    void <init>(int,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.lang.Runnable) -> <init>
    void checkCapacity(java.nio.ByteBuffer,int,int,int) -> checkCapacity
    org.webrtc.JavaI420Buffer wrap(int,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.lang.Runnable) -> wrap
    org.webrtc.JavaI420Buffer allocate(int,int) -> allocate
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    java.nio.ByteBuffer getDataY() -> getDataY
    java.nio.ByteBuffer getDataU() -> getDataU
    java.nio.ByteBuffer getDataV() -> getDataV
    int getStrideY() -> getStrideY
    int getStrideU() -> getStrideU
    int getStrideV() -> getStrideV
    org.webrtc.VideoFrame$I420Buffer toI420() -> toI420
    void retain() -> retain
    void release() -> release
    org.webrtc.VideoFrame$Buffer cropAndScale(int,int,int,int,int,int) -> cropAndScale
    org.webrtc.VideoFrame$Buffer cropAndScaleI420(org.webrtc.VideoFrame$I420Buffer,int,int,int,int,int,int) -> cropAndScaleI420
    void nativeCropAndScaleI420(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int,int,int,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int,int) -> nativeCropAndScaleI420
    void lambda$allocate$0$JavaI420Buffer(java.nio.ByteBuffer) -> lambda$allocate$0$JavaI420Buffer
org.webrtc.JavaI420Buffer$$Lambda$0 -> org.webrtc.JavaI420Buffer$$Lambda$0:
    java.nio.ByteBuffer arg$1 -> arg$1
    void <init>(java.nio.ByteBuffer) -> <init>
    void run() -> run
org.webrtc.JavaI420Buffer$$Lambda$1 -> org.webrtc.JavaI420Buffer$$Lambda$1:
    org.webrtc.VideoFrame$I420Buffer arg$1 -> arg$1
    void <init>(org.webrtc.VideoFrame$I420Buffer) -> <init>
    java.lang.Runnable get$Lambda(org.webrtc.VideoFrame$I420Buffer) -> get$Lambda
    void run() -> run
org.webrtc.JniCommon -> org.webrtc.JniCommon:
    void <init>() -> <init>
    void nativeAddRef(long) -> nativeAddRef
    void nativeReleaseRef(long) -> nativeReleaseRef
    java.nio.ByteBuffer nativeAllocateByteBuffer(int) -> nativeAllocateByteBuffer
    void nativeFreeByteBuffer(java.nio.ByteBuffer) -> nativeFreeByteBuffer
org.webrtc.JniHelper -> org.webrtc.JniHelper:
    void <init>() -> <init>
    byte[] getStringBytes(java.lang.String) -> getStringBytes
    java.lang.Object getStringClass() -> getStringClass
    java.lang.Object getKey(java.util.Map$Entry) -> getKey
    java.lang.Object getValue(java.util.Map$Entry) -> getValue
org.webrtc.LibvpxVp8Decoder -> org.webrtc.LibvpxVp8Decoder:
    void <init>() -> <init>
    long createNativeVideoDecoder() -> createNativeVideoDecoder
    long nativeCreateDecoder() -> nativeCreateDecoder
    java.lang.String getImplementationName() -> getImplementationName
    boolean getPrefersLateDecoding() -> getPrefersLateDecoding
    org.webrtc.VideoCodecStatus decode(org.webrtc.EncodedImage,org.webrtc.VideoDecoder$DecodeInfo) -> decode
    org.webrtc.VideoCodecStatus release() -> release
    org.webrtc.VideoCodecStatus initDecode(org.webrtc.VideoDecoder$Settings,org.webrtc.VideoDecoder$Callback) -> initDecode
org.webrtc.LibvpxVp8Encoder -> org.webrtc.LibvpxVp8Encoder:
    void <init>() -> <init>
    long createNativeVideoEncoder() -> createNativeVideoEncoder
    long nativeCreateEncoder() -> nativeCreateEncoder
    boolean isHardwareEncoder() -> isHardwareEncoder
    java.lang.String getImplementationName() -> getImplementationName
    org.webrtc.VideoEncoder$ScalingSettings getScalingSettings() -> getScalingSettings
    org.webrtc.VideoCodecStatus setRateAllocation(org.webrtc.VideoEncoder$BitrateAllocation,int) -> setRateAllocation
    org.webrtc.VideoCodecStatus encode(org.webrtc.VideoFrame,org.webrtc.VideoEncoder$EncodeInfo) -> encode
    org.webrtc.VideoCodecStatus release() -> release
    org.webrtc.VideoCodecStatus initEncode(org.webrtc.VideoEncoder$Settings,org.webrtc.VideoEncoder$Callback) -> initEncode
org.webrtc.LibvpxVp9Decoder -> org.webrtc.LibvpxVp9Decoder:
    void <init>() -> <init>
    long createNativeVideoDecoder() -> createNativeVideoDecoder
    long nativeCreateDecoder() -> nativeCreateDecoder
    boolean nativeIsSupported() -> nativeIsSupported
    java.lang.String getImplementationName() -> getImplementationName
    boolean getPrefersLateDecoding() -> getPrefersLateDecoding
    org.webrtc.VideoCodecStatus decode(org.webrtc.EncodedImage,org.webrtc.VideoDecoder$DecodeInfo) -> decode
    org.webrtc.VideoCodecStatus release() -> release
    org.webrtc.VideoCodecStatus initDecode(org.webrtc.VideoDecoder$Settings,org.webrtc.VideoDecoder$Callback) -> initDecode
org.webrtc.LibvpxVp9Encoder -> org.webrtc.LibvpxVp9Encoder:
    void <init>() -> <init>
    long createNativeVideoEncoder() -> createNativeVideoEncoder
    long nativeCreateEncoder() -> nativeCreateEncoder
    boolean isHardwareEncoder() -> isHardwareEncoder
    boolean nativeIsSupported() -> nativeIsSupported
    java.lang.String getImplementationName() -> getImplementationName
    org.webrtc.VideoEncoder$ScalingSettings getScalingSettings() -> getScalingSettings
    org.webrtc.VideoCodecStatus setRateAllocation(org.webrtc.VideoEncoder$BitrateAllocation,int) -> setRateAllocation
    org.webrtc.VideoCodecStatus encode(org.webrtc.VideoFrame,org.webrtc.VideoEncoder$EncodeInfo) -> encode
    org.webrtc.VideoCodecStatus release() -> release
    org.webrtc.VideoCodecStatus initEncode(org.webrtc.VideoEncoder$Settings,org.webrtc.VideoEncoder$Callback) -> initEncode
org.webrtc.Loggable -> org.webrtc.Loggable:
    void onLogMessage(java.lang.String,org.webrtc.Logging$Severity,java.lang.String) -> onLogMessage
org.webrtc.Logging -> org.webrtc.Logging:
    java.util.logging.Logger fallbackLogger -> fallbackLogger
    boolean loggingEnabled -> loggingEnabled
    org.webrtc.Loggable loggable -> loggable
    org.webrtc.Logging$Severity loggableSeverity -> loggableSeverity
    void <init>() -> <init>
    java.util.logging.Logger createFallbackLogger() -> createFallbackLogger
    void injectLoggable(org.webrtc.Loggable,org.webrtc.Logging$Severity) -> injectLoggable
    void deleteInjectedLoggable() -> deleteInjectedLoggable
    void enableLogThreads() -> enableLogThreads
    void enableLogTimeStamps() -> enableLogTimeStamps
    void enableTracing(java.lang.String,java.util.EnumSet) -> enableTracing
    void enableLogToDebugOutput(org.webrtc.Logging$Severity) -> enableLogToDebugOutput
    void log(org.webrtc.Logging$Severity,java.lang.String,java.lang.String) -> log
    void d(java.lang.String,java.lang.String) -> d
    void e(java.lang.String,java.lang.String) -> e
    void w(java.lang.String,java.lang.String) -> w
    void e(java.lang.String,java.lang.String,java.lang.Throwable) -> e
    void w(java.lang.String,java.lang.String,java.lang.Throwable) -> w
    void v(java.lang.String,java.lang.String) -> v
    java.lang.String getStackTraceString(java.lang.Throwable) -> getStackTraceString
    void nativeEnableLogToDebugOutput(int) -> nativeEnableLogToDebugOutput
    void nativeEnableLogThreads() -> nativeEnableLogThreads
    void nativeEnableLogTimeStamps() -> nativeEnableLogTimeStamps
    void nativeLog(int,java.lang.String,java.lang.String) -> nativeLog
    void <clinit>() -> <clinit>
org.webrtc.Logging$1 -> org.webrtc.Logging$1:
    int[] $SwitchMap$org$webrtc$Logging$Severity -> $SwitchMap$org$webrtc$Logging$Severity
    void <clinit>() -> <clinit>
org.webrtc.Logging$Severity -> org.webrtc.Logging$Severity:
    org.webrtc.Logging$Severity LS_VERBOSE -> LS_VERBOSE
    org.webrtc.Logging$Severity LS_INFO -> LS_INFO
    org.webrtc.Logging$Severity LS_WARNING -> LS_WARNING
    org.webrtc.Logging$Severity LS_ERROR -> LS_ERROR
    org.webrtc.Logging$Severity LS_NONE -> LS_NONE
    org.webrtc.Logging$Severity[] $VALUES -> $VALUES
    org.webrtc.Logging$Severity[] values() -> values
    org.webrtc.Logging$Severity valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.webrtc.Logging$TraceLevel -> org.webrtc.Logging$TraceLevel:
    org.webrtc.Logging$TraceLevel TRACE_NONE -> TRACE_NONE
    org.webrtc.Logging$TraceLevel TRACE_STATEINFO -> TRACE_STATEINFO
    org.webrtc.Logging$TraceLevel TRACE_WARNING -> TRACE_WARNING
    org.webrtc.Logging$TraceLevel TRACE_ERROR -> TRACE_ERROR
    org.webrtc.Logging$TraceLevel TRACE_CRITICAL -> TRACE_CRITICAL
    org.webrtc.Logging$TraceLevel TRACE_APICALL -> TRACE_APICALL
    org.webrtc.Logging$TraceLevel TRACE_DEFAULT -> TRACE_DEFAULT
    org.webrtc.Logging$TraceLevel TRACE_MODULECALL -> TRACE_MODULECALL
    org.webrtc.Logging$TraceLevel TRACE_MEMORY -> TRACE_MEMORY
    org.webrtc.Logging$TraceLevel TRACE_TIMER -> TRACE_TIMER
    org.webrtc.Logging$TraceLevel TRACE_STREAM -> TRACE_STREAM
    org.webrtc.Logging$TraceLevel TRACE_DEBUG -> TRACE_DEBUG
    org.webrtc.Logging$TraceLevel TRACE_INFO -> TRACE_INFO
    org.webrtc.Logging$TraceLevel TRACE_TERSEINFO -> TRACE_TERSEINFO
    org.webrtc.Logging$TraceLevel TRACE_ALL -> TRACE_ALL
    int level -> level
    org.webrtc.Logging$TraceLevel[] $VALUES -> $VALUES
    org.webrtc.Logging$TraceLevel[] values() -> values
    org.webrtc.Logging$TraceLevel valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    void <clinit>() -> <clinit>
org.webrtc.MediaCodecUtils -> org.webrtc.MediaCodecUtils:
    java.lang.String TAG -> TAG
    java.lang.String EXYNOS_PREFIX -> EXYNOS_PREFIX
    java.lang.String INTEL_PREFIX -> INTEL_PREFIX
    java.lang.String NVIDIA_PREFIX -> NVIDIA_PREFIX
    java.lang.String QCOM_PREFIX -> QCOM_PREFIX
    java.lang.String[] SOFTWARE_IMPLEMENTATION_PREFIXES -> SOFTWARE_IMPLEMENTATION_PREFIXES
    int COLOR_QCOM_FORMATYVU420PackedSemiPlanar32m4ka -> COLOR_QCOM_FORMATYVU420PackedSemiPlanar32m4ka
    int COLOR_QCOM_FORMATYVU420PackedSemiPlanar16m4ka -> COLOR_QCOM_FORMATYVU420PackedSemiPlanar16m4ka
    int COLOR_QCOM_FORMATYVU420PackedSemiPlanar64x32Tile2m8ka -> COLOR_QCOM_FORMATYVU420PackedSemiPlanar64x32Tile2m8ka
    int COLOR_QCOM_FORMATYUV420PackedSemiPlanar32m -> COLOR_QCOM_FORMATYUV420PackedSemiPlanar32m
    int[] DECODER_COLOR_FORMATS -> DECODER_COLOR_FORMATS
    int[] ENCODER_COLOR_FORMATS -> ENCODER_COLOR_FORMATS
    int[] TEXTURE_COLOR_FORMATS -> TEXTURE_COLOR_FORMATS
    int[] getTextureColorFormats() -> getTextureColorFormats
    java.lang.Integer selectColorFormat(int[],android.media.MediaCodecInfo$CodecCapabilities) -> selectColorFormat
    boolean codecSupportsType(android.media.MediaCodecInfo,org.webrtc.VideoCodecType) -> codecSupportsType
    java.util.Map getCodecProperties(org.webrtc.VideoCodecType,boolean) -> getCodecProperties
    void <init>() -> <init>
    void <clinit>() -> <clinit>
org.webrtc.MediaCodecUtils$1 -> org.webrtc.MediaCodecUtils$1:
    int[] $SwitchMap$org$webrtc$VideoCodecType -> $SwitchMap$org$webrtc$VideoCodecType
    void <clinit>() -> <clinit>
org.webrtc.MediaCodecVideoDecoder -> org.webrtc.MediaCodecVideoDecoder:
    java.lang.String TAG -> TAG
    long MAX_DECODE_TIME_MS -> MAX_DECODE_TIME_MS
    java.lang.String FORMAT_KEY_STRIDE -> FORMAT_KEY_STRIDE
    java.lang.String FORMAT_KEY_SLICE_HEIGHT -> FORMAT_KEY_SLICE_HEIGHT
    java.lang.String FORMAT_KEY_CROP_LEFT -> FORMAT_KEY_CROP_LEFT
    java.lang.String FORMAT_KEY_CROP_RIGHT -> FORMAT_KEY_CROP_RIGHT
    java.lang.String FORMAT_KEY_CROP_TOP -> FORMAT_KEY_CROP_TOP
    java.lang.String FORMAT_KEY_CROP_BOTTOM -> FORMAT_KEY_CROP_BOTTOM
    int DEQUEUE_INPUT_TIMEOUT -> DEQUEUE_INPUT_TIMEOUT
    int MEDIA_CODEC_RELEASE_TIMEOUT_MS -> MEDIA_CODEC_RELEASE_TIMEOUT_MS
    int MAX_QUEUED_OUTPUTBUFFERS -> MAX_QUEUED_OUTPUTBUFFERS
    org.webrtc.MediaCodecVideoDecoder runningInstance -> runningInstance
    org.webrtc.MediaCodecVideoDecoder$MediaCodecVideoDecoderErrorCallback errorCallback -> errorCallback
    int codecErrors -> codecErrors
    java.util.Set hwDecoderDisabledTypes -> hwDecoderDisabledTypes
    org.webrtc.EglBase eglBase -> eglBase
    java.lang.Thread mediaCodecThread -> mediaCodecThread
    android.media.MediaCodec mediaCodec -> mediaCodec
    java.nio.ByteBuffer[] inputBuffers -> inputBuffers
    java.nio.ByteBuffer[] outputBuffers -> outputBuffers
    java.lang.String VP8_MIME_TYPE -> VP8_MIME_TYPE
    java.lang.String VP9_MIME_TYPE -> VP9_MIME_TYPE
    java.lang.String H264_MIME_TYPE -> H264_MIME_TYPE
    java.lang.String[] supportedVp9HwCodecPrefixes -> supportedVp9HwCodecPrefixes
    java.lang.String supportedQcomH264HighProfileHwCodecPrefix -> supportedQcomH264HighProfileHwCodecPrefix
    java.lang.String supportedExynosH264HighProfileHwCodecPrefix -> supportedExynosH264HighProfileHwCodecPrefix
    java.lang.String supportedMediaTekH264HighProfileHwCodecPrefix -> supportedMediaTekH264HighProfileHwCodecPrefix
    int COLOR_QCOM_FORMATYVU420PackedSemiPlanar32m4ka -> COLOR_QCOM_FORMATYVU420PackedSemiPlanar32m4ka
    int COLOR_QCOM_FORMATYVU420PackedSemiPlanar16m4ka -> COLOR_QCOM_FORMATYVU420PackedSemiPlanar16m4ka
    int COLOR_QCOM_FORMATYVU420PackedSemiPlanar64x32Tile2m8ka -> COLOR_QCOM_FORMATYVU420PackedSemiPlanar64x32Tile2m8ka
    int COLOR_QCOM_FORMATYUV420PackedSemiPlanar32m -> COLOR_QCOM_FORMATYUV420PackedSemiPlanar32m
    java.util.List supportedColorList -> supportedColorList
    int colorFormat -> colorFormat
    int width -> width
    int height -> height
    int stride -> stride
    int sliceHeight -> sliceHeight
    boolean hasDecodedFirstFrame -> hasDecodedFirstFrame
    java.util.Queue decodeStartTimeMs -> decodeStartTimeMs
    org.webrtc.MediaCodecVideoDecoder$TextureListener textureListener -> textureListener
    int droppedFrames -> droppedFrames
    android.view.Surface surface -> surface
    java.util.Queue dequeuedSurfaceOutputBuffers -> dequeuedSurfaceOutputBuffers
    org.webrtc.VideoDecoderFactory createFactory() -> createFactory
    java.lang.String[] supportedVp8HwCodecPrefixes() -> supportedVp8HwCodecPrefixes
    java.lang.String[] supportedH264HwCodecPrefixes() -> supportedH264HwCodecPrefixes
    void setEglContext(org.webrtc.EglBase$Context) -> setEglContext
    void disposeEglContext() -> disposeEglContext
    boolean useSurface() -> useSurface
    void setErrorCallback(org.webrtc.MediaCodecVideoDecoder$MediaCodecVideoDecoderErrorCallback) -> setErrorCallback
    void disableVp8HwCodec() -> disableVp8HwCodec
    void disableVp9HwCodec() -> disableVp9HwCodec
    void disableH264HwCodec() -> disableH264HwCodec
    boolean isVp8HwSupported() -> isVp8HwSupported
    boolean isVp9HwSupported() -> isVp9HwSupported
    boolean isH264HwSupported() -> isH264HwSupported
    boolean isH264HighProfileHwSupported() -> isH264HighProfileHwSupported
    void printStackTrace() -> printStackTrace
    org.webrtc.MediaCodecVideoDecoder$DecoderProperties findDecoder(java.lang.String,java.lang.String[]) -> findDecoder
    void <init>() -> <init>
    void checkOnMediaCodecThread() -> checkOnMediaCodecThread
    boolean initDecode(org.webrtc.MediaCodecVideoDecoder$VideoCodecType,int,int) -> initDecode
    void reset(int,int) -> reset
    void release() -> release
    int dequeueInputBuffer() -> dequeueInputBuffer
    boolean queueInputBuffer(int,int,long,long,long) -> queueInputBuffer
    org.webrtc.MediaCodecVideoDecoder$DecodedOutputBuffer dequeueOutputBuffer(int) -> dequeueOutputBuffer
    org.webrtc.MediaCodecVideoDecoder$DecodedTextureBuffer dequeueTextureBuffer(int) -> dequeueTextureBuffer
    void MaybeRenderDecodedTextureBuffer() -> MaybeRenderDecodedTextureBuffer
    void returnDecodedOutputBuffer(int) -> returnDecodedOutputBuffer
    java.nio.ByteBuffer[] getInputBuffers() -> getInputBuffers
    java.nio.ByteBuffer[] getOutputBuffers() -> getOutputBuffers
    int getColorFormat() -> getColorFormat
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    int getStride() -> getStride
    int getSliceHeight() -> getSliceHeight
    long nativeCreateDecoder(java.lang.String,boolean) -> nativeCreateDecoder
    long access$000(java.lang.String,boolean) -> access$000
    android.media.MediaCodec access$100(org.webrtc.MediaCodecVideoDecoder) -> access$100
    void <clinit>() -> <clinit>
org.webrtc.MediaCodecVideoDecoder$1 -> org.webrtc.MediaCodecVideoDecoder$1:
    java.util.concurrent.CountDownLatch val$releaseDone -> val$releaseDone
    org.webrtc.MediaCodecVideoDecoder this$0 -> this$0
    void <init>(org.webrtc.MediaCodecVideoDecoder,java.util.concurrent.CountDownLatch) -> <init>
    void run() -> run
org.webrtc.MediaCodecVideoDecoder$DecodedOutputBuffer -> org.webrtc.MediaCodecVideoDecoder$DecodedOutputBuffer:
    int index -> index
    int offset -> offset
    int size -> size
    long presentationTimeStampMs -> presentationTimeStampMs
    long timeStampMs -> timeStampMs
    long ntpTimeStampMs -> ntpTimeStampMs
    long decodeTimeMs -> decodeTimeMs
    long endDecodeTimeMs -> endDecodeTimeMs
    void <init>(int,int,int,long,long,long,long,long) -> <init>
    int getIndex() -> getIndex
    int getOffset() -> getOffset
    int getSize() -> getSize
    long getPresentationTimestampMs() -> getPresentationTimestampMs
    long getTimestampMs() -> getTimestampMs
    long getNtpTimestampMs() -> getNtpTimestampMs
    long getDecodeTimeMs() -> getDecodeTimeMs
    long access$200(org.webrtc.MediaCodecVideoDecoder$DecodedOutputBuffer) -> access$200
    long access$300(org.webrtc.MediaCodecVideoDecoder$DecodedOutputBuffer) -> access$300
    long access$400(org.webrtc.MediaCodecVideoDecoder$DecodedOutputBuffer) -> access$400
    long access$500(org.webrtc.MediaCodecVideoDecoder$DecodedOutputBuffer) -> access$500
    long access$600(org.webrtc.MediaCodecVideoDecoder$DecodedOutputBuffer) -> access$600
    int access$1000(org.webrtc.MediaCodecVideoDecoder$DecodedOutputBuffer) -> access$1000
org.webrtc.MediaCodecVideoDecoder$DecodedTextureBuffer -> org.webrtc.MediaCodecVideoDecoder$DecodedTextureBuffer:
    org.webrtc.VideoFrame$Buffer videoFrameBuffer -> videoFrameBuffer
    long presentationTimeStampMs -> presentationTimeStampMs
    long timeStampMs -> timeStampMs
    long ntpTimeStampMs -> ntpTimeStampMs
    long decodeTimeMs -> decodeTimeMs
    long frameDelayMs -> frameDelayMs
    void <init>(org.webrtc.VideoFrame$Buffer,long,long,long,long,long) -> <init>
    org.webrtc.VideoFrame$Buffer getVideoFrameBuffer() -> getVideoFrameBuffer
    long getPresentationTimestampMs() -> getPresentationTimestampMs
    long getTimeStampMs() -> getTimeStampMs
    long getNtpTimestampMs() -> getNtpTimestampMs
    long getDecodeTimeMs() -> getDecodeTimeMs
    long getFrameDelayMs() -> getFrameDelayMs
org.webrtc.MediaCodecVideoDecoder$DecoderProperties -> org.webrtc.MediaCodecVideoDecoder$DecoderProperties:
    java.lang.String codecName -> codecName
    int colorFormat -> colorFormat
    void <init>(java.lang.String,int) -> <init>
org.webrtc.MediaCodecVideoDecoder$HwDecoderFactory -> org.webrtc.MediaCodecVideoDecoder$HwDecoderFactory:
    org.webrtc.VideoCodecInfo[] supportedHardwareCodecs -> supportedHardwareCodecs
    void <init>() -> <init>
    boolean isSameCodec(org.webrtc.VideoCodecInfo,org.webrtc.VideoCodecInfo) -> isSameCodec
    boolean isCodecSupported(org.webrtc.VideoCodecInfo[],org.webrtc.VideoCodecInfo) -> isCodecSupported
    org.webrtc.VideoCodecInfo[] getSupportedHardwareCodecs() -> getSupportedHardwareCodecs
    org.webrtc.VideoCodecInfo[] getSupportedCodecs() -> getSupportedCodecs
    org.webrtc.VideoDecoder createDecoder(org.webrtc.VideoCodecInfo) -> createDecoder
    org.webrtc.VideoDecoder createDecoder(java.lang.String) -> createDecoder
org.webrtc.MediaCodecVideoDecoder$HwDecoderFactory$1 -> org.webrtc.MediaCodecVideoDecoder$HwDecoderFactory$1:
    org.webrtc.VideoCodecInfo val$codec -> val$codec
    org.webrtc.MediaCodecVideoDecoder$HwDecoderFactory this$0 -> this$0
    void <init>(org.webrtc.MediaCodecVideoDecoder$HwDecoderFactory,org.webrtc.VideoCodecInfo) -> <init>
    long createNativeVideoDecoder() -> createNativeVideoDecoder
org.webrtc.MediaCodecVideoDecoder$MediaCodecVideoDecoderErrorCallback -> org.webrtc.MediaCodecVideoDecoder$MediaCodecVideoDecoderErrorCallback:
    void onMediaCodecVideoDecoderCriticalError(int) -> onMediaCodecVideoDecoderCriticalError
org.webrtc.MediaCodecVideoDecoder$TextureListener -> org.webrtc.MediaCodecVideoDecoder$TextureListener:
    org.webrtc.SurfaceTextureHelper surfaceTextureHelper -> surfaceTextureHelper
    java.lang.Object newFrameLock -> newFrameLock
    org.webrtc.MediaCodecVideoDecoder$DecodedOutputBuffer bufferToRender -> bufferToRender
    org.webrtc.MediaCodecVideoDecoder$DecodedTextureBuffer renderedBuffer -> renderedBuffer
    org.webrtc.MediaCodecVideoDecoder this$0 -> this$0
    void <init>(org.webrtc.MediaCodecVideoDecoder,org.webrtc.SurfaceTextureHelper) -> <init>
    void addBufferToRender(org.webrtc.MediaCodecVideoDecoder$DecodedOutputBuffer) -> addBufferToRender
    boolean isWaitingForTexture() -> isWaitingForTexture
    void setSize(int,int) -> setSize
    void onFrame(org.webrtc.VideoFrame) -> onFrame
    org.webrtc.MediaCodecVideoDecoder$DecodedTextureBuffer dequeueTextureBuffer(int) -> dequeueTextureBuffer
    void release() -> release
org.webrtc.MediaCodecVideoDecoder$TimeStamps -> org.webrtc.MediaCodecVideoDecoder$TimeStamps:
    long decodeStartTimeMs -> decodeStartTimeMs
    long timeStampMs -> timeStampMs
    long ntpTimeStampMs -> ntpTimeStampMs
    void <init>(long,long,long) -> <init>
    long access$700(org.webrtc.MediaCodecVideoDecoder$TimeStamps) -> access$700
    long access$800(org.webrtc.MediaCodecVideoDecoder$TimeStamps) -> access$800
    long access$900(org.webrtc.MediaCodecVideoDecoder$TimeStamps) -> access$900
org.webrtc.MediaCodecVideoDecoder$VideoCodecType -> org.webrtc.MediaCodecVideoDecoder$VideoCodecType:
    org.webrtc.MediaCodecVideoDecoder$VideoCodecType VIDEO_CODEC_UNKNOWN -> VIDEO_CODEC_UNKNOWN
    org.webrtc.MediaCodecVideoDecoder$VideoCodecType VIDEO_CODEC_VP8 -> VIDEO_CODEC_VP8
    org.webrtc.MediaCodecVideoDecoder$VideoCodecType VIDEO_CODEC_VP9 -> VIDEO_CODEC_VP9
    org.webrtc.MediaCodecVideoDecoder$VideoCodecType VIDEO_CODEC_H264 -> VIDEO_CODEC_H264
    org.webrtc.MediaCodecVideoDecoder$VideoCodecType[] $VALUES -> $VALUES
    org.webrtc.MediaCodecVideoDecoder$VideoCodecType[] values() -> values
    org.webrtc.MediaCodecVideoDecoder$VideoCodecType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    org.webrtc.MediaCodecVideoDecoder$VideoCodecType fromNativeIndex(int) -> fromNativeIndex
    void <clinit>() -> <clinit>
org.webrtc.MediaCodecVideoDecoderFactory -> org.webrtc.MediaCodecVideoDecoderFactory:
    java.lang.String TAG -> TAG
    org.webrtc.EglBase$Context sharedContext -> sharedContext
    org.webrtc.Predicate codecAllowedPredicate -> codecAllowedPredicate
    void <init>(org.webrtc.EglBase$Context,org.webrtc.Predicate) -> <init>
    org.webrtc.VideoDecoder createDecoder(org.webrtc.VideoCodecInfo) -> createDecoder
    org.webrtc.VideoCodecInfo[] getSupportedCodecs() -> getSupportedCodecs
    android.media.MediaCodecInfo findCodecForType(org.webrtc.VideoCodecType) -> findCodecForType
    boolean isSupportedCodec(android.media.MediaCodecInfo,org.webrtc.VideoCodecType) -> isSupportedCodec
    boolean isCodecAllowed(android.media.MediaCodecInfo) -> isCodecAllowed
    boolean isH264HighProfileSupported(android.media.MediaCodecInfo) -> isH264HighProfileSupported
    org.webrtc.VideoDecoder createDecoder(java.lang.String) -> createDecoder
org.webrtc.MediaCodecVideoEncoder -> org.webrtc.MediaCodecVideoEncoder:
    java.lang.String TAG -> TAG
    int MEDIA_CODEC_RELEASE_TIMEOUT_MS -> MEDIA_CODEC_RELEASE_TIMEOUT_MS
    int DEQUEUE_TIMEOUT -> DEQUEUE_TIMEOUT
    int BITRATE_ADJUSTMENT_FPS -> BITRATE_ADJUSTMENT_FPS
    int MAXIMUM_INITIAL_FPS -> MAXIMUM_INITIAL_FPS
    double BITRATE_CORRECTION_SEC -> BITRATE_CORRECTION_SEC
    double BITRATE_CORRECTION_MAX_SCALE -> BITRATE_CORRECTION_MAX_SCALE
    int BITRATE_CORRECTION_STEPS -> BITRATE_CORRECTION_STEPS
    long QCOM_VP8_KEY_FRAME_INTERVAL_ANDROID_L_MS -> QCOM_VP8_KEY_FRAME_INTERVAL_ANDROID_L_MS
    long QCOM_VP8_KEY_FRAME_INTERVAL_ANDROID_M_MS -> QCOM_VP8_KEY_FRAME_INTERVAL_ANDROID_M_MS
    long QCOM_VP8_KEY_FRAME_INTERVAL_ANDROID_N_MS -> QCOM_VP8_KEY_FRAME_INTERVAL_ANDROID_N_MS
    org.webrtc.MediaCodecVideoEncoder runningInstance -> runningInstance
    org.webrtc.MediaCodecVideoEncoder$MediaCodecVideoEncoderErrorCallback errorCallback -> errorCallback
    int codecErrors -> codecErrors
    java.util.Set hwEncoderDisabledTypes -> hwEncoderDisabledTypes
    org.webrtc.EglBase staticEglBase -> staticEglBase
    java.lang.Thread mediaCodecThread -> mediaCodecThread
    android.media.MediaCodec mediaCodec -> mediaCodec
    java.nio.ByteBuffer[] outputBuffers -> outputBuffers
    org.webrtc.EglBase14 eglBase -> eglBase
    int profile -> profile
    int width -> width
    int height -> height
    android.view.Surface inputSurface -> inputSurface
    org.webrtc.GlRectDrawer drawer -> drawer
    java.lang.String VP8_MIME_TYPE -> VP8_MIME_TYPE
    java.lang.String VP9_MIME_TYPE -> VP9_MIME_TYPE
    java.lang.String H264_MIME_TYPE -> H264_MIME_TYPE
    int VIDEO_AVCProfileHigh -> VIDEO_AVCProfileHigh
    int VIDEO_AVCLevel3 -> VIDEO_AVCLevel3
    org.webrtc.MediaCodecVideoEncoder$MediaCodecProperties qcomVp8HwProperties -> qcomVp8HwProperties
    org.webrtc.MediaCodecVideoEncoder$MediaCodecProperties exynosVp8HwProperties -> exynosVp8HwProperties
    org.webrtc.MediaCodecVideoEncoder$MediaCodecProperties intelVp8HwProperties -> intelVp8HwProperties
    org.webrtc.MediaCodecVideoEncoder$MediaCodecProperties qcomVp9HwProperties -> qcomVp9HwProperties
    org.webrtc.MediaCodecVideoEncoder$MediaCodecProperties exynosVp9HwProperties -> exynosVp9HwProperties
    org.webrtc.MediaCodecVideoEncoder$MediaCodecProperties[] vp9HwList -> vp9HwList
    org.webrtc.MediaCodecVideoEncoder$MediaCodecProperties qcomH264HwProperties -> qcomH264HwProperties
    org.webrtc.MediaCodecVideoEncoder$MediaCodecProperties exynosH264HwProperties -> exynosH264HwProperties
    org.webrtc.MediaCodecVideoEncoder$MediaCodecProperties mediatekH264HwProperties -> mediatekH264HwProperties
    org.webrtc.MediaCodecVideoEncoder$MediaCodecProperties exynosH264HighProfileHwProperties -> exynosH264HighProfileHwProperties
    org.webrtc.MediaCodecVideoEncoder$MediaCodecProperties[] h264HighProfileHwList -> h264HighProfileHwList
    java.lang.String[] H264_HW_EXCEPTION_MODELS -> H264_HW_EXCEPTION_MODELS
    int VIDEO_ControlRateConstant -> VIDEO_ControlRateConstant
    int COLOR_QCOM_FORMATYUV420PackedSemiPlanar32m -> COLOR_QCOM_FORMATYUV420PackedSemiPlanar32m
    int[] supportedColorList -> supportedColorList
    int[] supportedSurfaceColorList -> supportedSurfaceColorList
    org.webrtc.MediaCodecVideoEncoder$VideoCodecType type -> type
    int colorFormat -> colorFormat
    org.webrtc.MediaCodecVideoEncoder$BitrateAdjustmentType bitrateAdjustmentType -> bitrateAdjustmentType
    double bitrateAccumulator -> bitrateAccumulator
    double bitrateAccumulatorMax -> bitrateAccumulatorMax
    double bitrateObservationTimeMs -> bitrateObservationTimeMs
    int bitrateAdjustmentScaleExp -> bitrateAdjustmentScaleExp
    int targetBitrateBps -> targetBitrateBps
    int targetFps -> targetFps
    long forcedKeyFrameMs -> forcedKeyFrameMs
    long lastKeyFrameMs -> lastKeyFrameMs
    java.nio.ByteBuffer configData -> configData
    org.webrtc.VideoEncoderFactory createFactory() -> createFactory
    void setEglContext(org.webrtc.EglBase$Context) -> setEglContext
    void disposeEglContext() -> disposeEglContext
    org.webrtc.EglBase$Context getEglContext() -> getEglContext
    org.webrtc.MediaCodecVideoEncoder$MediaCodecProperties[] vp8HwList() -> vp8HwList
    org.webrtc.MediaCodecVideoEncoder$MediaCodecProperties[] h264HwList() -> h264HwList
    void setErrorCallback(org.webrtc.MediaCodecVideoEncoder$MediaCodecVideoEncoderErrorCallback) -> setErrorCallback
    void disableVp8HwCodec() -> disableVp8HwCodec
    void disableVp9HwCodec() -> disableVp9HwCodec
    void disableH264HwCodec() -> disableH264HwCodec
    boolean isVp8HwSupported() -> isVp8HwSupported
    org.webrtc.MediaCodecVideoEncoder$EncoderProperties vp8HwEncoderProperties() -> vp8HwEncoderProperties
    boolean isVp9HwSupported() -> isVp9HwSupported
    boolean isH264HwSupported() -> isH264HwSupported
    boolean isH264HighProfileHwSupported() -> isH264HighProfileHwSupported
    boolean isVp8HwSupportedUsingTextures() -> isVp8HwSupportedUsingTextures
    boolean isVp9HwSupportedUsingTextures() -> isVp9HwSupportedUsingTextures
    boolean isH264HwSupportedUsingTextures() -> isH264HwSupportedUsingTextures
    org.webrtc.MediaCodecVideoEncoder$EncoderProperties findHwEncoder(java.lang.String,org.webrtc.MediaCodecVideoEncoder$MediaCodecProperties[],int[]) -> findHwEncoder
    void <init>() -> <init>
    void checkOnMediaCodecThread() -> checkOnMediaCodecThread
    void printStackTrace() -> printStackTrace
    android.media.MediaCodec createByCodecName(java.lang.String) -> createByCodecName
    boolean initEncode(org.webrtc.MediaCodecVideoEncoder$VideoCodecType,int,int,int,int,int,boolean) -> initEncode
    java.nio.ByteBuffer[] getInputBuffers() -> getInputBuffers
    void checkKeyFrameRequired(boolean,long) -> checkKeyFrameRequired
    boolean encodeBuffer(boolean,int,int,long) -> encodeBuffer
    boolean encodeFrame(long,boolean,org.webrtc.VideoFrame,int,long) -> encodeFrame
    void release() -> release
    boolean setRates(int,int) -> setRates
    int dequeueInputBuffer() -> dequeueInputBuffer
    org.webrtc.MediaCodecVideoEncoder$OutputBufferInfo dequeueOutputBuffer() -> dequeueOutputBuffer
    double getBitrateScale(int) -> getBitrateScale
    void reportEncodedFrame(int) -> reportEncodedFrame
    boolean releaseOutputBuffer(int) -> releaseOutputBuffer
    int getColorFormat() -> getColorFormat
    boolean isTextureBuffer(org.webrtc.VideoFrame$Buffer) -> isTextureBuffer
    void nativeFillInputBuffer(long,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int) -> nativeFillInputBuffer
    long nativeCreateEncoder(org.webrtc.VideoCodecInfo,boolean) -> nativeCreateEncoder
    org.webrtc.EglBase access$000() -> access$000
    long access$100(org.webrtc.VideoCodecInfo,boolean) -> access$100
    android.media.MediaCodec access$200(org.webrtc.MediaCodecVideoEncoder) -> access$200
    void <clinit>() -> <clinit>
org.webrtc.MediaCodecVideoEncoder$1 -> org.webrtc.MediaCodecVideoEncoder$1:
    org.webrtc.MediaCodecVideoEncoder$1CaughtException val$caughtException -> val$caughtException
    java.util.concurrent.CountDownLatch val$releaseDone -> val$releaseDone
    org.webrtc.MediaCodecVideoEncoder this$0 -> this$0
    void <init>(org.webrtc.MediaCodecVideoEncoder,org.webrtc.MediaCodecVideoEncoder$1CaughtException,java.util.concurrent.CountDownLatch) -> <init>
    void run() -> run
org.webrtc.MediaCodecVideoEncoder$1CaughtException -> org.webrtc.MediaCodecVideoEncoder$1CaughtException:
    java.lang.Exception e -> e
    org.webrtc.MediaCodecVideoEncoder this$0 -> this$0
    void <init>(org.webrtc.MediaCodecVideoEncoder) -> <init>
org.webrtc.MediaCodecVideoEncoder$BitrateAdjustmentType -> org.webrtc.MediaCodecVideoEncoder$BitrateAdjustmentType:
    org.webrtc.MediaCodecVideoEncoder$BitrateAdjustmentType NO_ADJUSTMENT -> NO_ADJUSTMENT
    org.webrtc.MediaCodecVideoEncoder$BitrateAdjustmentType FRAMERATE_ADJUSTMENT -> FRAMERATE_ADJUSTMENT
    org.webrtc.MediaCodecVideoEncoder$BitrateAdjustmentType DYNAMIC_ADJUSTMENT -> DYNAMIC_ADJUSTMENT
    org.webrtc.MediaCodecVideoEncoder$BitrateAdjustmentType[] $VALUES -> $VALUES
    org.webrtc.MediaCodecVideoEncoder$BitrateAdjustmentType[] values() -> values
    org.webrtc.MediaCodecVideoEncoder$BitrateAdjustmentType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.webrtc.MediaCodecVideoEncoder$EncoderProperties -> org.webrtc.MediaCodecVideoEncoder$EncoderProperties:
    java.lang.String codecName -> codecName
    int colorFormat -> colorFormat
    org.webrtc.MediaCodecVideoEncoder$BitrateAdjustmentType bitrateAdjustmentType -> bitrateAdjustmentType
    void <init>(java.lang.String,int,org.webrtc.MediaCodecVideoEncoder$BitrateAdjustmentType) -> <init>
org.webrtc.MediaCodecVideoEncoder$H264Profile -> org.webrtc.MediaCodecVideoEncoder$H264Profile:
    org.webrtc.MediaCodecVideoEncoder$H264Profile CONSTRAINED_BASELINE -> CONSTRAINED_BASELINE
    org.webrtc.MediaCodecVideoEncoder$H264Profile BASELINE -> BASELINE
    org.webrtc.MediaCodecVideoEncoder$H264Profile MAIN -> MAIN
    org.webrtc.MediaCodecVideoEncoder$H264Profile CONSTRAINED_HIGH -> CONSTRAINED_HIGH
    org.webrtc.MediaCodecVideoEncoder$H264Profile HIGH -> HIGH
    int value -> value
    org.webrtc.MediaCodecVideoEncoder$H264Profile[] $VALUES -> $VALUES
    org.webrtc.MediaCodecVideoEncoder$H264Profile[] values() -> values
    org.webrtc.MediaCodecVideoEncoder$H264Profile valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    int getValue() -> getValue
    void <clinit>() -> <clinit>
org.webrtc.MediaCodecVideoEncoder$HwEncoderFactory -> org.webrtc.MediaCodecVideoEncoder$HwEncoderFactory:
    org.webrtc.VideoCodecInfo[] supportedHardwareCodecs -> supportedHardwareCodecs
    void <init>() -> <init>
    boolean isSameCodec(org.webrtc.VideoCodecInfo,org.webrtc.VideoCodecInfo) -> isSameCodec
    boolean isCodecSupported(org.webrtc.VideoCodecInfo[],org.webrtc.VideoCodecInfo) -> isCodecSupported
    org.webrtc.VideoCodecInfo[] getSupportedHardwareCodecs() -> getSupportedHardwareCodecs
    org.webrtc.VideoCodecInfo[] getSupportedCodecs() -> getSupportedCodecs
    org.webrtc.VideoEncoder createEncoder(org.webrtc.VideoCodecInfo) -> createEncoder
org.webrtc.MediaCodecVideoEncoder$HwEncoderFactory$1 -> org.webrtc.MediaCodecVideoEncoder$HwEncoderFactory$1:
    org.webrtc.VideoCodecInfo val$info -> val$info
    org.webrtc.MediaCodecVideoEncoder$HwEncoderFactory this$0 -> this$0
    void <init>(org.webrtc.MediaCodecVideoEncoder$HwEncoderFactory,org.webrtc.VideoCodecInfo) -> <init>
    long createNativeVideoEncoder() -> createNativeVideoEncoder
    boolean isHardwareEncoder() -> isHardwareEncoder
org.webrtc.MediaCodecVideoEncoder$MediaCodecProperties -> org.webrtc.MediaCodecVideoEncoder$MediaCodecProperties:
    java.lang.String codecPrefix -> codecPrefix
    int minSdk -> minSdk
    org.webrtc.MediaCodecVideoEncoder$BitrateAdjustmentType bitrateAdjustmentType -> bitrateAdjustmentType
    void <init>(java.lang.String,int,org.webrtc.MediaCodecVideoEncoder$BitrateAdjustmentType) -> <init>
org.webrtc.MediaCodecVideoEncoder$MediaCodecVideoEncoderErrorCallback -> org.webrtc.MediaCodecVideoEncoder$MediaCodecVideoEncoderErrorCallback:
    void onMediaCodecVideoEncoderCriticalError(int) -> onMediaCodecVideoEncoderCriticalError
org.webrtc.MediaCodecVideoEncoder$OutputBufferInfo -> org.webrtc.MediaCodecVideoEncoder$OutputBufferInfo:
    int index -> index
    java.nio.ByteBuffer buffer -> buffer
    boolean isKeyFrame -> isKeyFrame
    long presentationTimestampUs -> presentationTimestampUs
    void <init>(int,java.nio.ByteBuffer,boolean,long) -> <init>
    int getIndex() -> getIndex
    java.nio.ByteBuffer getBuffer() -> getBuffer
    boolean isKeyFrame() -> isKeyFrame
    long getPresentationTimestampUs() -> getPresentationTimestampUs
org.webrtc.MediaCodecVideoEncoder$VideoCodecType -> org.webrtc.MediaCodecVideoEncoder$VideoCodecType:
    org.webrtc.MediaCodecVideoEncoder$VideoCodecType VIDEO_CODEC_UNKNOWN -> VIDEO_CODEC_UNKNOWN
    org.webrtc.MediaCodecVideoEncoder$VideoCodecType VIDEO_CODEC_VP8 -> VIDEO_CODEC_VP8
    org.webrtc.MediaCodecVideoEncoder$VideoCodecType VIDEO_CODEC_VP9 -> VIDEO_CODEC_VP9
    org.webrtc.MediaCodecVideoEncoder$VideoCodecType VIDEO_CODEC_H264 -> VIDEO_CODEC_H264
    org.webrtc.MediaCodecVideoEncoder$VideoCodecType[] $VALUES -> $VALUES
    org.webrtc.MediaCodecVideoEncoder$VideoCodecType[] values() -> values
    org.webrtc.MediaCodecVideoEncoder$VideoCodecType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    org.webrtc.MediaCodecVideoEncoder$VideoCodecType fromNativeIndex(int) -> fromNativeIndex
    void <clinit>() -> <clinit>
org.webrtc.MediaCodecWrapper -> org.webrtc.MediaCodecWrapper:
    void configure(android.media.MediaFormat,android.view.Surface,android.media.MediaCrypto,int) -> configure
    void start() -> start
    void flush() -> flush
    void stop() -> stop
    void release() -> release
    int dequeueInputBuffer(long) -> dequeueInputBuffer
    void queueInputBuffer(int,int,int,long,int) -> queueInputBuffer
    int dequeueOutputBuffer(android.media.MediaCodec$BufferInfo,long) -> dequeueOutputBuffer
    void releaseOutputBuffer(int,boolean) -> releaseOutputBuffer
    android.media.MediaFormat getOutputFormat() -> getOutputFormat
    java.nio.ByteBuffer[] getInputBuffers() -> getInputBuffers
    java.nio.ByteBuffer[] getOutputBuffers() -> getOutputBuffers
    android.view.Surface createInputSurface() -> createInputSurface
    void setParameters(android.os.Bundle) -> setParameters
org.webrtc.MediaCodecWrapperFactory -> org.webrtc.MediaCodecWrapperFactory:
    org.webrtc.MediaCodecWrapper createByCodecName(java.lang.String) -> createByCodecName
org.webrtc.MediaCodecWrapperFactoryImpl -> org.webrtc.MediaCodecWrapperFactoryImpl:
    void <init>() -> <init>
    org.webrtc.MediaCodecWrapper createByCodecName(java.lang.String) -> createByCodecName
org.webrtc.MediaCodecWrapperFactoryImpl$MediaCodecWrapperImpl -> org.webrtc.MediaCodecWrapperFactoryImpl$MediaCodecWrapperImpl:
    android.media.MediaCodec mediaCodec -> mediaCodec
    void <init>(android.media.MediaCodec) -> <init>
    void configure(android.media.MediaFormat,android.view.Surface,android.media.MediaCrypto,int) -> configure
    void start() -> start
    void flush() -> flush
    void stop() -> stop
    void release() -> release
    int dequeueInputBuffer(long) -> dequeueInputBuffer
    void queueInputBuffer(int,int,int,long,int) -> queueInputBuffer
    int dequeueOutputBuffer(android.media.MediaCodec$BufferInfo,long) -> dequeueOutputBuffer
    void releaseOutputBuffer(int,boolean) -> releaseOutputBuffer
    android.media.MediaFormat getOutputFormat() -> getOutputFormat
    java.nio.ByteBuffer[] getInputBuffers() -> getInputBuffers
    java.nio.ByteBuffer[] getOutputBuffers() -> getOutputBuffers
    android.view.Surface createInputSurface() -> createInputSurface
    void setParameters(android.os.Bundle) -> setParameters
org.webrtc.MediaConstraints -> org.webrtc.MediaConstraints:
    java.util.List mandatory -> mandatory
    java.util.List optional -> optional
    void <init>() -> <init>
    java.lang.String stringifyKeyValuePairList(java.util.List) -> stringifyKeyValuePairList
    java.lang.String toString() -> toString
    java.util.List getMandatory() -> getMandatory
    java.util.List getOptional() -> getOptional
org.webrtc.MediaConstraints$KeyValuePair -> org.webrtc.MediaConstraints$KeyValuePair:
    java.lang.String key -> key
    java.lang.String value -> value
    void <init>(java.lang.String,java.lang.String) -> <init>
    java.lang.String getKey() -> getKey
    java.lang.String getValue() -> getValue
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.webrtc.MediaSource -> org.webrtc.MediaSource:
    long nativeSource -> nativeSource
    void <init>(long) -> <init>
    org.webrtc.MediaSource$State state() -> state
    void dispose() -> dispose
    long getNativeMediaSource() -> getNativeMediaSource
    void checkMediaSourceExists() -> checkMediaSourceExists
    org.webrtc.MediaSource$State nativeGetState(long) -> nativeGetState
org.webrtc.MediaSource$State -> org.webrtc.MediaSource$State:
    org.webrtc.MediaSource$State INITIALIZING -> INITIALIZING
    org.webrtc.MediaSource$State LIVE -> LIVE
    org.webrtc.MediaSource$State ENDED -> ENDED
    org.webrtc.MediaSource$State MUTED -> MUTED
    org.webrtc.MediaSource$State[] $VALUES -> $VALUES
    org.webrtc.MediaSource$State[] values() -> values
    org.webrtc.MediaSource$State valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    org.webrtc.MediaSource$State fromNativeIndex(int) -> fromNativeIndex
    void <clinit>() -> <clinit>
org.webrtc.MediaStream -> org.webrtc.MediaStream:
    java.lang.String TAG -> TAG
    java.util.List audioTracks -> audioTracks
    java.util.List videoTracks -> videoTracks
    java.util.List preservedVideoTracks -> preservedVideoTracks
    long nativeStream -> nativeStream
    void <init>(long) -> <init>
    boolean addTrack(org.webrtc.AudioTrack) -> addTrack
    boolean addTrack(org.webrtc.VideoTrack) -> addTrack
    boolean addPreservedTrack(org.webrtc.VideoTrack) -> addPreservedTrack
    boolean removeTrack(org.webrtc.AudioTrack) -> removeTrack
    boolean removeTrack(org.webrtc.VideoTrack) -> removeTrack
    void dispose() -> dispose
    java.lang.String getId() -> getId
    java.lang.String toString() -> toString
    void addNativeAudioTrack(long) -> addNativeAudioTrack
    void addNativeVideoTrack(long) -> addNativeVideoTrack
    void removeAudioTrack(long) -> removeAudioTrack
    void removeVideoTrack(long) -> removeVideoTrack
    long getNativeMediaStream() -> getNativeMediaStream
    void checkMediaStreamExists() -> checkMediaStreamExists
    void removeMediaStreamTrack(java.util.List,long) -> removeMediaStreamTrack
    boolean nativeAddAudioTrackToNativeStream(long,long) -> nativeAddAudioTrackToNativeStream
    boolean nativeAddVideoTrackToNativeStream(long,long) -> nativeAddVideoTrackToNativeStream
    boolean nativeRemoveAudioTrack(long,long) -> nativeRemoveAudioTrack
    boolean nativeRemoveVideoTrack(long,long) -> nativeRemoveVideoTrack
    java.lang.String nativeGetId(long) -> nativeGetId
org.webrtc.MediaStreamTrack -> org.webrtc.MediaStreamTrack:
    java.lang.String AUDIO_TRACK_KIND -> AUDIO_TRACK_KIND
    java.lang.String VIDEO_TRACK_KIND -> VIDEO_TRACK_KIND
    long nativeTrack -> nativeTrack
    org.webrtc.MediaStreamTrack createMediaStreamTrack(long) -> createMediaStreamTrack
    void <init>(long) -> <init>
    java.lang.String id() -> id
    java.lang.String kind() -> kind
    boolean enabled() -> enabled
    boolean setEnabled(boolean) -> setEnabled
    org.webrtc.MediaStreamTrack$State state() -> state
    void dispose() -> dispose
    long getNativeMediaStreamTrack() -> getNativeMediaStreamTrack
    void checkMediaStreamTrackExists() -> checkMediaStreamTrackExists
    java.lang.String nativeGetId(long) -> nativeGetId
    java.lang.String nativeGetKind(long) -> nativeGetKind
    boolean nativeGetEnabled(long) -> nativeGetEnabled
    boolean nativeSetEnabled(long,boolean) -> nativeSetEnabled
    org.webrtc.MediaStreamTrack$State nativeGetState(long) -> nativeGetState
org.webrtc.MediaStreamTrack$MediaType -> org.webrtc.MediaStreamTrack$MediaType:
    org.webrtc.MediaStreamTrack$MediaType MEDIA_TYPE_AUDIO -> MEDIA_TYPE_AUDIO
    org.webrtc.MediaStreamTrack$MediaType MEDIA_TYPE_VIDEO -> MEDIA_TYPE_VIDEO
    int nativeIndex -> nativeIndex
    org.webrtc.MediaStreamTrack$MediaType[] $VALUES -> $VALUES
    org.webrtc.MediaStreamTrack$MediaType[] values() -> values
    org.webrtc.MediaStreamTrack$MediaType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    int getNative() -> getNative
    org.webrtc.MediaStreamTrack$MediaType fromNativeIndex(int) -> fromNativeIndex
    void <clinit>() -> <clinit>
org.webrtc.MediaStreamTrack$State -> org.webrtc.MediaStreamTrack$State:
    org.webrtc.MediaStreamTrack$State LIVE -> LIVE
    org.webrtc.MediaStreamTrack$State ENDED -> ENDED
    org.webrtc.MediaStreamTrack$State[] $VALUES -> $VALUES
    org.webrtc.MediaStreamTrack$State[] values() -> values
    org.webrtc.MediaStreamTrack$State valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    org.webrtc.MediaStreamTrack$State fromNativeIndex(int) -> fromNativeIndex
    void <clinit>() -> <clinit>
org.webrtc.MediaTransportFactoryFactory -> org.webrtc.MediaTransportFactoryFactory:
    long createNativeMediaTransportFactory() -> createNativeMediaTransportFactory
org.webrtc.Metrics -> org.webrtc.Metrics:
    java.lang.String TAG -> TAG
    java.util.Map map -> map
    void <init>() -> <init>
    void add(java.lang.String,org.webrtc.Metrics$HistogramInfo) -> add
    void enable() -> enable
    org.webrtc.Metrics getAndReset() -> getAndReset
    void nativeEnable() -> nativeEnable
    org.webrtc.Metrics nativeGetAndReset() -> nativeGetAndReset
org.webrtc.Metrics$HistogramInfo -> org.webrtc.Metrics$HistogramInfo:
    int min -> min
    int max -> max
    int bucketCount -> bucketCount
    java.util.Map samples -> samples
    void <init>(int,int,int) -> <init>
    void addSample(int,int) -> addSample
org.webrtc.NV12Buffer -> org.webrtc.NV12Buffer:
    int width -> width
    int height -> height
    int stride -> stride
    int sliceHeight -> sliceHeight
    java.nio.ByteBuffer buffer -> buffer
    org.webrtc.RefCountDelegate refCountDelegate -> refCountDelegate
    void <init>(int,int,int,int,java.nio.ByteBuffer,java.lang.Runnable) -> <init>
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    org.webrtc.VideoFrame$I420Buffer toI420() -> toI420
    void retain() -> retain
    void release() -> release
    org.webrtc.VideoFrame$Buffer cropAndScale(int,int,int,int,int,int) -> cropAndScale
    void nativeCropAndScale(int,int,int,int,int,int,java.nio.ByteBuffer,int,int,int,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int) -> nativeCropAndScale
org.webrtc.NV21Buffer -> org.webrtc.NV21Buffer:
    byte[] data -> data
    int width -> width
    int height -> height
    org.webrtc.RefCountDelegate refCountDelegate -> refCountDelegate
    void <init>(byte[],int,int,java.lang.Runnable) -> <init>
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    org.webrtc.VideoFrame$I420Buffer toI420() -> toI420
    void retain() -> retain
    void release() -> release
    org.webrtc.VideoFrame$Buffer cropAndScale(int,int,int,int,int,int) -> cropAndScale
    void nativeCropAndScale(int,int,int,int,int,int,byte[],int,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int) -> nativeCropAndScale
org.webrtc.NativeAndroidVideoTrackSource -> org.webrtc.NativeAndroidVideoTrackSource:
    long nativeAndroidVideoTrackSource -> nativeAndroidVideoTrackSource
    void <init>(long) -> <init>
    void setState(boolean) -> setState
    org.webrtc.VideoProcessor$FrameAdaptationParameters adaptFrame(org.webrtc.VideoFrame) -> adaptFrame
    void onFrameCaptured(org.webrtc.VideoFrame) -> onFrameCaptured
    void adaptOutputFormat(org.webrtc.VideoSource$AspectRatio,java.lang.Integer,org.webrtc.VideoSource$AspectRatio,java.lang.Integer,java.lang.Integer) -> adaptOutputFormat
    org.webrtc.VideoProcessor$FrameAdaptationParameters createFrameAdaptationParameters(int,int,int,int,int,int,long,boolean) -> createFrameAdaptationParameters
    void nativeSetState(long,boolean) -> nativeSetState
    void nativeAdaptOutputFormat(long,int,int,java.lang.Integer,int,int,java.lang.Integer,java.lang.Integer) -> nativeAdaptOutputFormat
    org.webrtc.VideoProcessor$FrameAdaptationParameters nativeAdaptFrame(long,int,int,int,long) -> nativeAdaptFrame
    void nativeOnFrameCaptured(long,int,long,org.webrtc.VideoFrame$Buffer) -> nativeOnFrameCaptured
org.webrtc.NativeCapturerObserver -> org.webrtc.NativeCapturerObserver:
    org.webrtc.NativeAndroidVideoTrackSource nativeAndroidVideoTrackSource -> nativeAndroidVideoTrackSource
    void <init>(long) -> <init>
    void onCapturerStarted(boolean) -> onCapturerStarted
    void onCapturerStopped() -> onCapturerStopped
    void onFrameCaptured(org.webrtc.VideoFrame) -> onFrameCaptured
org.webrtc.NativeLibrary -> org.webrtc.NativeLibrary:
    java.lang.String TAG -> TAG
    java.lang.Object lock -> lock
    boolean libraryLoaded -> libraryLoaded
    void <init>() -> <init>
    void initialize(org.webrtc.NativeLibraryLoader,java.lang.String) -> initialize
    boolean isLoaded() -> isLoaded
    java.lang.String access$000() -> access$000
    void <clinit>() -> <clinit>
org.webrtc.NativeLibrary$DefaultLoader -> org.webrtc.NativeLibrary$DefaultLoader:
    void <init>() -> <init>
    boolean load(java.lang.String) -> load
org.webrtc.NativeLibraryLoader -> org.webrtc.NativeLibraryLoader:
    boolean load(java.lang.String) -> load
org.webrtc.NativePeerConnectionFactory -> org.webrtc.NativePeerConnectionFactory:
    long createNativePeerConnection() -> createNativePeerConnection
org.webrtc.NetworkControllerFactoryFactory -> org.webrtc.NetworkControllerFactoryFactory:
    long createNativeNetworkControllerFactory() -> createNativeNetworkControllerFactory
org.webrtc.NetworkMonitor -> org.webrtc.NetworkMonitor:
    java.lang.String TAG -> TAG
    java.util.ArrayList nativeNetworkObservers -> nativeNetworkObservers
    java.util.ArrayList networkObservers -> networkObservers
    java.lang.Object autoDetectLock -> autoDetectLock
    org.webrtc.NetworkMonitorAutoDetect autoDetect -> autoDetect
    int numObservers -> numObservers
    org.webrtc.NetworkMonitorAutoDetect$ConnectionType currentConnectionType -> currentConnectionType
    void <init>() -> <init>
    void init(android.content.Context) -> init
    org.webrtc.NetworkMonitor getInstance() -> getInstance
    void assertIsTrue(boolean) -> assertIsTrue
    void startMonitoring(android.content.Context) -> startMonitoring
    void startMonitoring() -> startMonitoring
    void startMonitoring(android.content.Context,long) -> startMonitoring
    void stopMonitoring() -> stopMonitoring
    void stopMonitoring(long) -> stopMonitoring
    boolean networkBindingSupported() -> networkBindingSupported
    int androidSdkInt() -> androidSdkInt
    org.webrtc.NetworkMonitorAutoDetect$ConnectionType getCurrentConnectionType() -> getCurrentConnectionType
    long getCurrentDefaultNetId() -> getCurrentDefaultNetId
    org.webrtc.NetworkMonitorAutoDetect createAutoDetect(android.content.Context) -> createAutoDetect
    void updateCurrentConnectionType(org.webrtc.NetworkMonitorAutoDetect$ConnectionType) -> updateCurrentConnectionType
    void notifyObserversOfConnectionTypeChange(org.webrtc.NetworkMonitorAutoDetect$ConnectionType) -> notifyObserversOfConnectionTypeChange
    void notifyObserversOfNetworkConnect(org.webrtc.NetworkMonitorAutoDetect$NetworkInformation) -> notifyObserversOfNetworkConnect
    void notifyObserversOfNetworkDisconnect(long) -> notifyObserversOfNetworkDisconnect
    void updateObserverActiveNetworkList(long) -> updateObserverActiveNetworkList
    java.util.List getNativeNetworkObserversSync() -> getNativeNetworkObserversSync
    void addNetworkObserver(org.webrtc.NetworkMonitor$NetworkObserver) -> addNetworkObserver
    void addObserver(org.webrtc.NetworkMonitor$NetworkObserver) -> addObserver
    void removeNetworkObserver(org.webrtc.NetworkMonitor$NetworkObserver) -> removeNetworkObserver
    void removeObserver(org.webrtc.NetworkMonitor$NetworkObserver) -> removeObserver
    boolean isOnline() -> isOnline
    void nativeNotifyConnectionTypeChanged(long) -> nativeNotifyConnectionTypeChanged
    void nativeNotifyOfNetworkConnect(long,org.webrtc.NetworkMonitorAutoDetect$NetworkInformation) -> nativeNotifyOfNetworkConnect
    void nativeNotifyOfNetworkDisconnect(long,long) -> nativeNotifyOfNetworkDisconnect
    void nativeNotifyOfActiveNetworkList(long,org.webrtc.NetworkMonitorAutoDetect$NetworkInformation[]) -> nativeNotifyOfActiveNetworkList
    org.webrtc.NetworkMonitorAutoDetect getNetworkMonitorAutoDetect() -> getNetworkMonitorAutoDetect
    int getNumObservers() -> getNumObservers
    org.webrtc.NetworkMonitorAutoDetect createAndSetAutoDetectForTest(android.content.Context) -> createAndSetAutoDetectForTest
    void <init>(org.webrtc.NetworkMonitor$1) -> <init>
    void access$100(org.webrtc.NetworkMonitor,org.webrtc.NetworkMonitorAutoDetect$ConnectionType) -> access$100
    void access$200(org.webrtc.NetworkMonitor,org.webrtc.NetworkMonitorAutoDetect$NetworkInformation) -> access$200
    void access$300(org.webrtc.NetworkMonitor,long) -> access$300
org.webrtc.NetworkMonitor$1 -> org.webrtc.NetworkMonitor$1:
    org.webrtc.NetworkMonitor this$0 -> this$0
    void <init>(org.webrtc.NetworkMonitor) -> <init>
    void onConnectionTypeChanged(org.webrtc.NetworkMonitorAutoDetect$ConnectionType) -> onConnectionTypeChanged
    void onNetworkConnect(org.webrtc.NetworkMonitorAutoDetect$NetworkInformation) -> onNetworkConnect
    void onNetworkDisconnect(long) -> onNetworkDisconnect
org.webrtc.NetworkMonitor$InstanceHolder -> org.webrtc.NetworkMonitor$InstanceHolder:
    org.webrtc.NetworkMonitor instance -> instance
    void <init>() -> <init>
    void <clinit>() -> <clinit>
org.webrtc.NetworkMonitor$NetworkObserver -> org.webrtc.NetworkMonitor$NetworkObserver:
    void onConnectionTypeChanged(org.webrtc.NetworkMonitorAutoDetect$ConnectionType) -> onConnectionTypeChanged
org.webrtc.NetworkMonitorAutoDetect -> org.webrtc.NetworkMonitorAutoDetect:
    long INVALID_NET_ID -> INVALID_NET_ID
    java.lang.String TAG -> TAG
    org.webrtc.NetworkMonitorAutoDetect$Observer observer -> observer
    android.content.IntentFilter intentFilter -> intentFilter
    android.content.Context context -> context
    android.net.ConnectivityManager$NetworkCallback mobileNetworkCallback -> mobileNetworkCallback
    android.net.ConnectivityManager$NetworkCallback allNetworkCallback -> allNetworkCallback
    org.webrtc.NetworkMonitorAutoDetect$ConnectivityManagerDelegate connectivityManagerDelegate -> connectivityManagerDelegate
    org.webrtc.NetworkMonitorAutoDetect$WifiManagerDelegate wifiManagerDelegate -> wifiManagerDelegate
    org.webrtc.NetworkMonitorAutoDetect$WifiDirectManagerDelegate wifiDirectManagerDelegate -> wifiDirectManagerDelegate
    boolean isRegistered -> isRegistered
    org.webrtc.NetworkMonitorAutoDetect$ConnectionType connectionType -> connectionType
    java.lang.String wifiSSID -> wifiSSID
    void <init>(org.webrtc.NetworkMonitorAutoDetect$Observer,android.content.Context) -> <init>
    boolean supportNetworkCallback() -> supportNetworkCallback
    void setConnectivityManagerDelegateForTests(org.webrtc.NetworkMonitorAutoDetect$ConnectivityManagerDelegate) -> setConnectivityManagerDelegateForTests
    void setWifiManagerDelegateForTests(org.webrtc.NetworkMonitorAutoDetect$WifiManagerDelegate) -> setWifiManagerDelegateForTests
    boolean isReceiverRegisteredForTesting() -> isReceiverRegisteredForTesting
    java.util.List getActiveNetworkList() -> getActiveNetworkList
    void destroy() -> destroy
    void registerReceiver() -> registerReceiver
    void unregisterReceiver() -> unregisterReceiver
    org.webrtc.NetworkMonitorAutoDetect$NetworkState getCurrentNetworkState() -> getCurrentNetworkState
    long getDefaultNetId() -> getDefaultNetId
    org.webrtc.NetworkMonitorAutoDetect$ConnectionType getConnectionType(boolean,int,int) -> getConnectionType
    org.webrtc.NetworkMonitorAutoDetect$ConnectionType getConnectionType(org.webrtc.NetworkMonitorAutoDetect$NetworkState) -> getConnectionType
    org.webrtc.NetworkMonitorAutoDetect$ConnectionType getUnderlyingConnectionTypeForVpn(org.webrtc.NetworkMonitorAutoDetect$NetworkState) -> getUnderlyingConnectionTypeForVpn
    java.lang.String getWifiSSID(org.webrtc.NetworkMonitorAutoDetect$NetworkState) -> getWifiSSID
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
    void connectionTypeChanged(org.webrtc.NetworkMonitorAutoDetect$NetworkState) -> connectionTypeChanged
    long networkToNetId(android.net.Network) -> networkToNetId
    long access$000(android.net.Network) -> access$000
    org.webrtc.NetworkMonitorAutoDetect$Observer access$100(org.webrtc.NetworkMonitorAutoDetect) -> access$100
    org.webrtc.NetworkMonitorAutoDetect$ConnectivityManagerDelegate access$200(org.webrtc.NetworkMonitorAutoDetect) -> access$200
    org.webrtc.NetworkMonitorAutoDetect$ConnectionType access$400(org.webrtc.NetworkMonitorAutoDetect$NetworkState) -> access$400
org.webrtc.NetworkMonitorAutoDetect$1 -> org.webrtc.NetworkMonitorAutoDetect$1:
org.webrtc.NetworkMonitorAutoDetect$ConnectionType -> org.webrtc.NetworkMonitorAutoDetect$ConnectionType:
    org.webrtc.NetworkMonitorAutoDetect$ConnectionType CONNECTION_UNKNOWN -> CONNECTION_UNKNOWN
    org.webrtc.NetworkMonitorAutoDetect$ConnectionType CONNECTION_ETHERNET -> CONNECTION_ETHERNET
    org.webrtc.NetworkMonitorAutoDetect$ConnectionType CONNECTION_WIFI -> CONNECTION_WIFI
    org.webrtc.NetworkMonitorAutoDetect$ConnectionType CONNECTION_4G -> CONNECTION_4G
    org.webrtc.NetworkMonitorAutoDetect$ConnectionType CONNECTION_3G -> CONNECTION_3G
    org.webrtc.NetworkMonitorAutoDetect$ConnectionType CONNECTION_2G -> CONNECTION_2G
    org.webrtc.NetworkMonitorAutoDetect$ConnectionType CONNECTION_UNKNOWN_CELLULAR -> CONNECTION_UNKNOWN_CELLULAR
    org.webrtc.NetworkMonitorAutoDetect$ConnectionType CONNECTION_BLUETOOTH -> CONNECTION_BLUETOOTH
    org.webrtc.NetworkMonitorAutoDetect$ConnectionType CONNECTION_VPN -> CONNECTION_VPN
    org.webrtc.NetworkMonitorAutoDetect$ConnectionType CONNECTION_NONE -> CONNECTION_NONE
    org.webrtc.NetworkMonitorAutoDetect$ConnectionType[] $VALUES -> $VALUES
    org.webrtc.NetworkMonitorAutoDetect$ConnectionType[] values() -> values
    org.webrtc.NetworkMonitorAutoDetect$ConnectionType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.webrtc.NetworkMonitorAutoDetect$ConnectivityManagerDelegate -> org.webrtc.NetworkMonitorAutoDetect$ConnectivityManagerDelegate:
    android.net.ConnectivityManager connectivityManager -> connectivityManager
    void <init>(android.content.Context) -> <init>
    void <init>() -> <init>
    org.webrtc.NetworkMonitorAutoDetect$NetworkState getNetworkState() -> getNetworkState
    org.webrtc.NetworkMonitorAutoDetect$NetworkState getNetworkState(android.net.Network) -> getNetworkState
    org.webrtc.NetworkMonitorAutoDetect$NetworkState getNetworkState(android.net.NetworkInfo) -> getNetworkState
    android.net.Network[] getAllNetworks() -> getAllNetworks
    java.util.List getActiveNetworkList() -> getActiveNetworkList
    long getDefaultNetId() -> getDefaultNetId
    org.webrtc.NetworkMonitorAutoDetect$NetworkInformation networkToInfo(android.net.Network) -> networkToInfo
    boolean hasInternetCapability(android.net.Network) -> hasInternetCapability
    void registerNetworkCallback(android.net.ConnectivityManager$NetworkCallback) -> registerNetworkCallback
    void requestMobileNetwork(android.net.ConnectivityManager$NetworkCallback) -> requestMobileNetwork
    org.webrtc.NetworkMonitorAutoDetect$IPAddress[] getIPAddresses(android.net.LinkProperties) -> getIPAddresses
    void releaseCallback(android.net.ConnectivityManager$NetworkCallback) -> releaseCallback
    boolean supportNetworkCallback() -> supportNetworkCallback
    org.webrtc.NetworkMonitorAutoDetect$NetworkInformation access$300(org.webrtc.NetworkMonitorAutoDetect$ConnectivityManagerDelegate,android.net.Network) -> access$300
org.webrtc.NetworkMonitorAutoDetect$IPAddress -> org.webrtc.NetworkMonitorAutoDetect$IPAddress:
    byte[] address -> address
    void <init>(byte[]) -> <init>
    byte[] getAddress() -> getAddress
org.webrtc.NetworkMonitorAutoDetect$NetworkInformation -> org.webrtc.NetworkMonitorAutoDetect$NetworkInformation:
    java.lang.String name -> name
    org.webrtc.NetworkMonitorAutoDetect$ConnectionType type -> type
    org.webrtc.NetworkMonitorAutoDetect$ConnectionType underlyingTypeForVpn -> underlyingTypeForVpn
    long handle -> handle
    org.webrtc.NetworkMonitorAutoDetect$IPAddress[] ipAddresses -> ipAddresses
    void <init>(java.lang.String,org.webrtc.NetworkMonitorAutoDetect$ConnectionType,org.webrtc.NetworkMonitorAutoDetect$ConnectionType,long,org.webrtc.NetworkMonitorAutoDetect$IPAddress[]) -> <init>
    org.webrtc.NetworkMonitorAutoDetect$IPAddress[] getIpAddresses() -> getIpAddresses
    org.webrtc.NetworkMonitorAutoDetect$ConnectionType getConnectionType() -> getConnectionType
    org.webrtc.NetworkMonitorAutoDetect$ConnectionType getUnderlyingConnectionTypeForVpn() -> getUnderlyingConnectionTypeForVpn
    long getHandle() -> getHandle
    java.lang.String getName() -> getName
org.webrtc.NetworkMonitorAutoDetect$NetworkState -> org.webrtc.NetworkMonitorAutoDetect$NetworkState:
    boolean connected -> connected
    int type -> type
    int subtype -> subtype
    int underlyingNetworkTypeForVpn -> underlyingNetworkTypeForVpn
    int underlyingNetworkSubtypeForVpn -> underlyingNetworkSubtypeForVpn
    void <init>(boolean,int,int,int,int) -> <init>
    boolean isConnected() -> isConnected
    int getNetworkType() -> getNetworkType
    int getNetworkSubType() -> getNetworkSubType
    int getUnderlyingNetworkTypeForVpn() -> getUnderlyingNetworkTypeForVpn
    int getUnderlyingNetworkSubtypeForVpn() -> getUnderlyingNetworkSubtypeForVpn
org.webrtc.NetworkMonitorAutoDetect$Observer -> org.webrtc.NetworkMonitorAutoDetect$Observer:
    void onConnectionTypeChanged(org.webrtc.NetworkMonitorAutoDetect$ConnectionType) -> onConnectionTypeChanged
    void onNetworkConnect(org.webrtc.NetworkMonitorAutoDetect$NetworkInformation) -> onNetworkConnect
    void onNetworkDisconnect(long) -> onNetworkDisconnect
org.webrtc.NetworkMonitorAutoDetect$SimpleNetworkCallback -> org.webrtc.NetworkMonitorAutoDetect$SimpleNetworkCallback:
    org.webrtc.NetworkMonitorAutoDetect this$0 -> this$0
    void <init>(org.webrtc.NetworkMonitorAutoDetect) -> <init>
    void onAvailable(android.net.Network) -> onAvailable
    void onCapabilitiesChanged(android.net.Network,android.net.NetworkCapabilities) -> onCapabilitiesChanged
    void onLinkPropertiesChanged(android.net.Network,android.net.LinkProperties) -> onLinkPropertiesChanged
    void onLosing(android.net.Network,int) -> onLosing
    void onLost(android.net.Network) -> onLost
    void onNetworkChanged(android.net.Network) -> onNetworkChanged
    void <init>(org.webrtc.NetworkMonitorAutoDetect,org.webrtc.NetworkMonitorAutoDetect$1) -> <init>
org.webrtc.NetworkMonitorAutoDetect$WifiDirectManagerDelegate -> org.webrtc.NetworkMonitorAutoDetect$WifiDirectManagerDelegate:
    int WIFI_P2P_NETWORK_HANDLE -> WIFI_P2P_NETWORK_HANDLE
    android.content.Context context -> context
    org.webrtc.NetworkMonitorAutoDetect$Observer observer -> observer
    org.webrtc.NetworkMonitorAutoDetect$NetworkInformation wifiP2pNetworkInfo -> wifiP2pNetworkInfo
    void <init>(org.webrtc.NetworkMonitorAutoDetect$Observer,android.content.Context) -> <init>
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
    void release() -> release
    java.util.List getActiveNetworkList() -> getActiveNetworkList
    void onWifiP2pGroupChange(android.net.wifi.p2p.WifiP2pGroup) -> onWifiP2pGroupChange
    void onWifiP2pStateChange(int) -> onWifiP2pStateChange
org.webrtc.NetworkMonitorAutoDetect$WifiManagerDelegate -> org.webrtc.NetworkMonitorAutoDetect$WifiManagerDelegate:
    android.content.Context context -> context
    void <init>(android.content.Context) -> <init>
    void <init>() -> <init>
    java.lang.String getWifiSSID() -> getWifiSSID
org.webrtc.NetworkStatePredictorFactoryFactory -> org.webrtc.NetworkStatePredictorFactoryFactory:
    long createNativeNetworkStatePredictorFactory() -> createNativeNetworkStatePredictorFactory
org.webrtc.PeerConnection -> org.webrtc.PeerConnection:
    java.util.List localStreams -> localStreams
    long nativePeerConnection -> nativePeerConnection
    java.util.List senders -> senders
    java.util.List receivers -> receivers
    java.util.List transceivers -> transceivers
    void <init>(org.webrtc.NativePeerConnectionFactory) -> <init>
    void <init>(long) -> <init>
    org.webrtc.SessionDescription getLocalDescription() -> getLocalDescription
    org.webrtc.SessionDescription getRemoteDescription() -> getRemoteDescription
    org.webrtc.RtcCertificatePem getCertificate() -> getCertificate
    org.webrtc.DataChannel createDataChannel(java.lang.String,org.webrtc.DataChannel$Init) -> createDataChannel
    void createOffer(org.webrtc.SdpObserver,org.webrtc.MediaConstraints) -> createOffer
    void createAnswer(org.webrtc.SdpObserver,org.webrtc.MediaConstraints) -> createAnswer
    void setLocalDescription(org.webrtc.SdpObserver,org.webrtc.SessionDescription) -> setLocalDescription
    void setRemoteDescription(org.webrtc.SdpObserver,org.webrtc.SessionDescription) -> setRemoteDescription
    void setAudioPlayout(boolean) -> setAudioPlayout
    void setAudioRecording(boolean) -> setAudioRecording
    boolean setConfiguration(org.webrtc.PeerConnection$RTCConfiguration) -> setConfiguration
    boolean addIceCandidate(org.webrtc.IceCandidate) -> addIceCandidate
    boolean removeIceCandidates(org.webrtc.IceCandidate[]) -> removeIceCandidates
    boolean addStream(org.webrtc.MediaStream) -> addStream
    void removeStream(org.webrtc.MediaStream) -> removeStream
    org.webrtc.RtpSender createSender(java.lang.String,java.lang.String) -> createSender
    java.util.List getSenders() -> getSenders
    java.util.List getReceivers() -> getReceivers
    java.util.List getTransceivers() -> getTransceivers
    org.webrtc.RtpSender addTrack(org.webrtc.MediaStreamTrack) -> addTrack
    org.webrtc.RtpSender addTrack(org.webrtc.MediaStreamTrack,java.util.List) -> addTrack
    boolean removeTrack(org.webrtc.RtpSender) -> removeTrack
    org.webrtc.RtpTransceiver addTransceiver(org.webrtc.MediaStreamTrack) -> addTransceiver
    org.webrtc.RtpTransceiver addTransceiver(org.webrtc.MediaStreamTrack,org.webrtc.RtpTransceiver$RtpTransceiverInit) -> addTransceiver
    org.webrtc.RtpTransceiver addTransceiver(org.webrtc.MediaStreamTrack$MediaType) -> addTransceiver
    org.webrtc.RtpTransceiver addTransceiver(org.webrtc.MediaStreamTrack$MediaType,org.webrtc.RtpTransceiver$RtpTransceiverInit) -> addTransceiver
    boolean getStats(org.webrtc.StatsObserver,org.webrtc.MediaStreamTrack) -> getStats
    void getStats(org.webrtc.RTCStatsCollectorCallback) -> getStats
    boolean setBitrate(java.lang.Integer,java.lang.Integer,java.lang.Integer) -> setBitrate
    boolean startRtcEventLog(int,int) -> startRtcEventLog
    void stopRtcEventLog() -> stopRtcEventLog
    org.webrtc.PeerConnection$SignalingState signalingState() -> signalingState
    org.webrtc.PeerConnection$IceConnectionState iceConnectionState() -> iceConnectionState
    org.webrtc.PeerConnection$PeerConnectionState connectionState() -> connectionState
    org.webrtc.PeerConnection$IceGatheringState iceGatheringState() -> iceGatheringState
    void close() -> close
    void dispose() -> dispose
    long getNativePeerConnection() -> getNativePeerConnection
    long getNativeOwnedPeerConnection() -> getNativeOwnedPeerConnection
    long createNativePeerConnectionObserver(org.webrtc.PeerConnection$Observer) -> createNativePeerConnectionObserver
    long nativeGetNativePeerConnection() -> nativeGetNativePeerConnection
    org.webrtc.SessionDescription nativeGetLocalDescription() -> nativeGetLocalDescription
    org.webrtc.SessionDescription nativeGetRemoteDescription() -> nativeGetRemoteDescription
    org.webrtc.RtcCertificatePem nativeGetCertificate() -> nativeGetCertificate
    org.webrtc.DataChannel nativeCreateDataChannel(java.lang.String,org.webrtc.DataChannel$Init) -> nativeCreateDataChannel
    void nativeCreateOffer(org.webrtc.SdpObserver,org.webrtc.MediaConstraints) -> nativeCreateOffer
    void nativeCreateAnswer(org.webrtc.SdpObserver,org.webrtc.MediaConstraints) -> nativeCreateAnswer
    void nativeSetLocalDescription(org.webrtc.SdpObserver,org.webrtc.SessionDescription) -> nativeSetLocalDescription
    void nativeSetRemoteDescription(org.webrtc.SdpObserver,org.webrtc.SessionDescription) -> nativeSetRemoteDescription
    void nativeSetAudioPlayout(boolean) -> nativeSetAudioPlayout
    void nativeSetAudioRecording(boolean) -> nativeSetAudioRecording
    boolean nativeSetBitrate(java.lang.Integer,java.lang.Integer,java.lang.Integer) -> nativeSetBitrate
    org.webrtc.PeerConnection$SignalingState nativeSignalingState() -> nativeSignalingState
    org.webrtc.PeerConnection$IceConnectionState nativeIceConnectionState() -> nativeIceConnectionState
    org.webrtc.PeerConnection$PeerConnectionState nativeConnectionState() -> nativeConnectionState
    org.webrtc.PeerConnection$IceGatheringState nativeIceGatheringState() -> nativeIceGatheringState
    void nativeClose() -> nativeClose
    long nativeCreatePeerConnectionObserver(org.webrtc.PeerConnection$Observer) -> nativeCreatePeerConnectionObserver
    void nativeFreeOwnedPeerConnection(long) -> nativeFreeOwnedPeerConnection
    boolean nativeSetConfiguration(org.webrtc.PeerConnection$RTCConfiguration) -> nativeSetConfiguration
    boolean nativeAddIceCandidate(java.lang.String,int,java.lang.String) -> nativeAddIceCandidate
    boolean nativeRemoveIceCandidates(org.webrtc.IceCandidate[]) -> nativeRemoveIceCandidates
    boolean nativeAddLocalStream(long) -> nativeAddLocalStream
    void nativeRemoveLocalStream(long) -> nativeRemoveLocalStream
    boolean nativeOldGetStats(org.webrtc.StatsObserver,long) -> nativeOldGetStats
    void nativeNewGetStats(org.webrtc.RTCStatsCollectorCallback) -> nativeNewGetStats
    org.webrtc.RtpSender nativeCreateSender(java.lang.String,java.lang.String) -> nativeCreateSender
    java.util.List nativeGetSenders() -> nativeGetSenders
    java.util.List nativeGetReceivers() -> nativeGetReceivers
    java.util.List nativeGetTransceivers() -> nativeGetTransceivers
    org.webrtc.RtpSender nativeAddTrack(long,java.util.List) -> nativeAddTrack
    boolean nativeRemoveTrack(long) -> nativeRemoveTrack
    org.webrtc.RtpTransceiver nativeAddTransceiverWithTrack(long,org.webrtc.RtpTransceiver$RtpTransceiverInit) -> nativeAddTransceiverWithTrack
    org.webrtc.RtpTransceiver nativeAddTransceiverOfType(org.webrtc.MediaStreamTrack$MediaType,org.webrtc.RtpTransceiver$RtpTransceiverInit) -> nativeAddTransceiverOfType
    boolean nativeStartRtcEventLog(int,int) -> nativeStartRtcEventLog
    void nativeStopRtcEventLog() -> nativeStopRtcEventLog
org.webrtc.PeerConnection$1 -> org.webrtc.PeerConnection$1:
org.webrtc.PeerConnection$AdapterType -> org.webrtc.PeerConnection$AdapterType:
    org.webrtc.PeerConnection$AdapterType UNKNOWN -> UNKNOWN
    org.webrtc.PeerConnection$AdapterType ETHERNET -> ETHERNET
    org.webrtc.PeerConnection$AdapterType WIFI -> WIFI
    org.webrtc.PeerConnection$AdapterType CELLULAR -> CELLULAR
    org.webrtc.PeerConnection$AdapterType VPN -> VPN
    org.webrtc.PeerConnection$AdapterType LOOPBACK -> LOOPBACK
    org.webrtc.PeerConnection$AdapterType[] $VALUES -> $VALUES
    org.webrtc.PeerConnection$AdapterType[] values() -> values
    org.webrtc.PeerConnection$AdapterType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.webrtc.PeerConnection$BundlePolicy -> org.webrtc.PeerConnection$BundlePolicy:
    org.webrtc.PeerConnection$BundlePolicy BALANCED -> BALANCED
    org.webrtc.PeerConnection$BundlePolicy MAXBUNDLE -> MAXBUNDLE
    org.webrtc.PeerConnection$BundlePolicy MAXCOMPAT -> MAXCOMPAT
    org.webrtc.PeerConnection$BundlePolicy[] $VALUES -> $VALUES
    org.webrtc.PeerConnection$BundlePolicy[] values() -> values
    org.webrtc.PeerConnection$BundlePolicy valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.webrtc.PeerConnection$CandidateNetworkPolicy -> org.webrtc.PeerConnection$CandidateNetworkPolicy:
    org.webrtc.PeerConnection$CandidateNetworkPolicy ALL -> ALL
    org.webrtc.PeerConnection$CandidateNetworkPolicy LOW_COST -> LOW_COST
    org.webrtc.PeerConnection$CandidateNetworkPolicy[] $VALUES -> $VALUES
    org.webrtc.PeerConnection$CandidateNetworkPolicy[] values() -> values
    org.webrtc.PeerConnection$CandidateNetworkPolicy valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.webrtc.PeerConnection$ContinualGatheringPolicy -> org.webrtc.PeerConnection$ContinualGatheringPolicy:
    org.webrtc.PeerConnection$ContinualGatheringPolicy GATHER_ONCE -> GATHER_ONCE
    org.webrtc.PeerConnection$ContinualGatheringPolicy GATHER_CONTINUALLY -> GATHER_CONTINUALLY
    org.webrtc.PeerConnection$ContinualGatheringPolicy[] $VALUES -> $VALUES
    org.webrtc.PeerConnection$ContinualGatheringPolicy[] values() -> values
    org.webrtc.PeerConnection$ContinualGatheringPolicy valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.webrtc.PeerConnection$IceConnectionState -> org.webrtc.PeerConnection$IceConnectionState:
    org.webrtc.PeerConnection$IceConnectionState NEW -> NEW
    org.webrtc.PeerConnection$IceConnectionState CHECKING -> CHECKING
    org.webrtc.PeerConnection$IceConnectionState CONNECTED -> CONNECTED
    org.webrtc.PeerConnection$IceConnectionState COMPLETED -> COMPLETED
    org.webrtc.PeerConnection$IceConnectionState FAILED -> FAILED
    org.webrtc.PeerConnection$IceConnectionState DISCONNECTED -> DISCONNECTED
    org.webrtc.PeerConnection$IceConnectionState CLOSED -> CLOSED
    org.webrtc.PeerConnection$IceConnectionState[] $VALUES -> $VALUES
    org.webrtc.PeerConnection$IceConnectionState[] values() -> values
    org.webrtc.PeerConnection$IceConnectionState valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    org.webrtc.PeerConnection$IceConnectionState fromNativeIndex(int) -> fromNativeIndex
    void <clinit>() -> <clinit>
org.webrtc.PeerConnection$IceGatheringState -> org.webrtc.PeerConnection$IceGatheringState:
    org.webrtc.PeerConnection$IceGatheringState NEW -> NEW
    org.webrtc.PeerConnection$IceGatheringState GATHERING -> GATHERING
    org.webrtc.PeerConnection$IceGatheringState COMPLETE -> COMPLETE
    org.webrtc.PeerConnection$IceGatheringState[] $VALUES -> $VALUES
    org.webrtc.PeerConnection$IceGatheringState[] values() -> values
    org.webrtc.PeerConnection$IceGatheringState valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    org.webrtc.PeerConnection$IceGatheringState fromNativeIndex(int) -> fromNativeIndex
    void <clinit>() -> <clinit>
org.webrtc.PeerConnection$IceServer -> org.webrtc.PeerConnection$IceServer:
    java.lang.String uri -> uri
    java.util.List urls -> urls
    java.lang.String username -> username
    java.lang.String password -> password
    org.webrtc.PeerConnection$TlsCertPolicy tlsCertPolicy -> tlsCertPolicy
    java.lang.String hostname -> hostname
    java.util.List tlsAlpnProtocols -> tlsAlpnProtocols
    java.util.List tlsEllipticCurves -> tlsEllipticCurves
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.String,java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.String,java.lang.String,org.webrtc.PeerConnection$TlsCertPolicy) -> <init>
    void <init>(java.lang.String,java.lang.String,java.lang.String,org.webrtc.PeerConnection$TlsCertPolicy,java.lang.String) -> <init>
    void <init>(java.lang.String,java.util.List,java.lang.String,java.lang.String,org.webrtc.PeerConnection$TlsCertPolicy,java.lang.String,java.util.List,java.util.List) -> <init>
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    org.webrtc.PeerConnection$IceServer$Builder builder(java.lang.String) -> builder
    org.webrtc.PeerConnection$IceServer$Builder builder(java.util.List) -> builder
    java.util.List getUrls() -> getUrls
    java.lang.String getUsername() -> getUsername
    java.lang.String getPassword() -> getPassword
    org.webrtc.PeerConnection$TlsCertPolicy getTlsCertPolicy() -> getTlsCertPolicy
    java.lang.String getHostname() -> getHostname
    java.util.List getTlsAlpnProtocols() -> getTlsAlpnProtocols
    java.util.List getTlsEllipticCurves() -> getTlsEllipticCurves
    void <init>(java.lang.String,java.util.List,java.lang.String,java.lang.String,org.webrtc.PeerConnection$TlsCertPolicy,java.lang.String,java.util.List,java.util.List,org.webrtc.PeerConnection$1) -> <init>
org.webrtc.PeerConnection$IceServer$Builder -> org.webrtc.PeerConnection$IceServer$Builder:
    java.util.List urls -> urls
    java.lang.String username -> username
    java.lang.String password -> password
    org.webrtc.PeerConnection$TlsCertPolicy tlsCertPolicy -> tlsCertPolicy
    java.lang.String hostname -> hostname
    java.util.List tlsAlpnProtocols -> tlsAlpnProtocols
    java.util.List tlsEllipticCurves -> tlsEllipticCurves
    void <init>(java.util.List) -> <init>
    org.webrtc.PeerConnection$IceServer$Builder setUsername(java.lang.String) -> setUsername
    org.webrtc.PeerConnection$IceServer$Builder setPassword(java.lang.String) -> setPassword
    org.webrtc.PeerConnection$IceServer$Builder setTlsCertPolicy(org.webrtc.PeerConnection$TlsCertPolicy) -> setTlsCertPolicy
    org.webrtc.PeerConnection$IceServer$Builder setHostname(java.lang.String) -> setHostname
    org.webrtc.PeerConnection$IceServer$Builder setTlsAlpnProtocols(java.util.List) -> setTlsAlpnProtocols
    org.webrtc.PeerConnection$IceServer$Builder setTlsEllipticCurves(java.util.List) -> setTlsEllipticCurves
    org.webrtc.PeerConnection$IceServer createIceServer() -> createIceServer
    void <init>(java.util.List,org.webrtc.PeerConnection$1) -> <init>
org.webrtc.PeerConnection$IceTransportsType -> org.webrtc.PeerConnection$IceTransportsType:
    org.webrtc.PeerConnection$IceTransportsType NONE -> NONE
    org.webrtc.PeerConnection$IceTransportsType RELAY -> RELAY
    org.webrtc.PeerConnection$IceTransportsType NOHOST -> NOHOST
    org.webrtc.PeerConnection$IceTransportsType ALL -> ALL
    org.webrtc.PeerConnection$IceTransportsType[] $VALUES -> $VALUES
    org.webrtc.PeerConnection$IceTransportsType[] values() -> values
    org.webrtc.PeerConnection$IceTransportsType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.webrtc.PeerConnection$IntervalRange -> org.webrtc.PeerConnection$IntervalRange:
    int min -> min
    int max -> max
    void <init>(int,int) -> <init>
    int getMin() -> getMin
    int getMax() -> getMax
org.webrtc.PeerConnection$KeyType -> org.webrtc.PeerConnection$KeyType:
    org.webrtc.PeerConnection$KeyType RSA -> RSA
    org.webrtc.PeerConnection$KeyType ECDSA -> ECDSA
    org.webrtc.PeerConnection$KeyType[] $VALUES -> $VALUES
    org.webrtc.PeerConnection$KeyType[] values() -> values
    org.webrtc.PeerConnection$KeyType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.webrtc.PeerConnection$Observer -> org.webrtc.PeerConnection$Observer:
    void onSignalingChange(org.webrtc.PeerConnection$SignalingState) -> onSignalingChange
    void onIceConnectionChange(org.webrtc.PeerConnection$IceConnectionState) -> onIceConnectionChange
    void onStandardizedIceConnectionChange(org.webrtc.PeerConnection$IceConnectionState) -> onStandardizedIceConnectionChange
    void onConnectionChange(org.webrtc.PeerConnection$PeerConnectionState) -> onConnectionChange
    void onIceConnectionReceivingChange(boolean) -> onIceConnectionReceivingChange
    void onIceGatheringChange(org.webrtc.PeerConnection$IceGatheringState) -> onIceGatheringChange
    void onIceCandidate(org.webrtc.IceCandidate) -> onIceCandidate
    void onIceCandidatesRemoved(org.webrtc.IceCandidate[]) -> onIceCandidatesRemoved
    void onAddStream(org.webrtc.MediaStream) -> onAddStream
    void onRemoveStream(org.webrtc.MediaStream) -> onRemoveStream
    void onDataChannel(org.webrtc.DataChannel) -> onDataChannel
    void onRenegotiationNeeded() -> onRenegotiationNeeded
    void onAddTrack(org.webrtc.RtpReceiver,org.webrtc.MediaStream[]) -> onAddTrack
    void onTrack(org.webrtc.RtpTransceiver) -> onTrack
org.webrtc.PeerConnection$Observer$$CC -> org.webrtc.PeerConnection$Observer$$CC:
    void onStandardizedIceConnectionChange(org.webrtc.PeerConnection$Observer,org.webrtc.PeerConnection$IceConnectionState) -> onStandardizedIceConnectionChange
    void onConnectionChange(org.webrtc.PeerConnection$Observer,org.webrtc.PeerConnection$PeerConnectionState) -> onConnectionChange
    void onTrack(org.webrtc.PeerConnection$Observer,org.webrtc.RtpTransceiver) -> onTrack
org.webrtc.PeerConnection$PeerConnectionState -> org.webrtc.PeerConnection$PeerConnectionState:
    org.webrtc.PeerConnection$PeerConnectionState NEW -> NEW
    org.webrtc.PeerConnection$PeerConnectionState CONNECTING -> CONNECTING
    org.webrtc.PeerConnection$PeerConnectionState CONNECTED -> CONNECTED
    org.webrtc.PeerConnection$PeerConnectionState DISCONNECTED -> DISCONNECTED
    org.webrtc.PeerConnection$PeerConnectionState FAILED -> FAILED
    org.webrtc.PeerConnection$PeerConnectionState CLOSED -> CLOSED
    org.webrtc.PeerConnection$PeerConnectionState[] $VALUES -> $VALUES
    org.webrtc.PeerConnection$PeerConnectionState[] values() -> values
    org.webrtc.PeerConnection$PeerConnectionState valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    org.webrtc.PeerConnection$PeerConnectionState fromNativeIndex(int) -> fromNativeIndex
    void <clinit>() -> <clinit>
org.webrtc.PeerConnection$RTCConfiguration -> org.webrtc.PeerConnection$RTCConfiguration:
    org.webrtc.PeerConnection$IceTransportsType iceTransportsType -> iceTransportsType
    java.util.List iceServers -> iceServers
    org.webrtc.PeerConnection$BundlePolicy bundlePolicy -> bundlePolicy
    org.webrtc.RtcCertificatePem certificate -> certificate
    org.webrtc.PeerConnection$RtcpMuxPolicy rtcpMuxPolicy -> rtcpMuxPolicy
    org.webrtc.PeerConnection$TcpCandidatePolicy tcpCandidatePolicy -> tcpCandidatePolicy
    org.webrtc.PeerConnection$CandidateNetworkPolicy candidateNetworkPolicy -> candidateNetworkPolicy
    int audioJitterBufferMaxPackets -> audioJitterBufferMaxPackets
    boolean audioJitterBufferFastAccelerate -> audioJitterBufferFastAccelerate
    int iceConnectionReceivingTimeout -> iceConnectionReceivingTimeout
    int iceBackupCandidatePairPingInterval -> iceBackupCandidatePairPingInterval
    org.webrtc.PeerConnection$KeyType keyType -> keyType
    org.webrtc.PeerConnection$ContinualGatheringPolicy continualGatheringPolicy -> continualGatheringPolicy
    int iceCandidatePoolSize -> iceCandidatePoolSize
    boolean pruneTurnPorts -> pruneTurnPorts
    boolean presumeWritableWhenFullyRelayed -> presumeWritableWhenFullyRelayed
    boolean surfaceIceCandidatesOnIceTransportTypeChanged -> surfaceIceCandidatesOnIceTransportTypeChanged
    java.lang.Integer iceCheckIntervalStrongConnectivityMs -> iceCheckIntervalStrongConnectivityMs
    java.lang.Integer iceCheckIntervalWeakConnectivityMs -> iceCheckIntervalWeakConnectivityMs
    java.lang.Integer iceCheckMinInterval -> iceCheckMinInterval
    java.lang.Integer iceUnwritableTimeMs -> iceUnwritableTimeMs
    java.lang.Integer iceUnwritableMinChecks -> iceUnwritableMinChecks
    java.lang.Integer stunCandidateKeepaliveIntervalMs -> stunCandidateKeepaliveIntervalMs
    boolean disableIPv6OnWifi -> disableIPv6OnWifi
    int maxIPv6Networks -> maxIPv6Networks
    org.webrtc.PeerConnection$IntervalRange iceRegatherIntervalRange -> iceRegatherIntervalRange
    boolean disableIpv6 -> disableIpv6
    boolean enableDscp -> enableDscp
    boolean enableCpuOveruseDetection -> enableCpuOveruseDetection
    boolean enableRtpDataChannel -> enableRtpDataChannel
    boolean suspendBelowMinBitrate -> suspendBelowMinBitrate
    java.lang.Integer screencastMinBitrate -> screencastMinBitrate
    java.lang.Boolean combinedAudioVideoBwe -> combinedAudioVideoBwe
    java.lang.Boolean enableDtlsSrtp -> enableDtlsSrtp
    org.webrtc.PeerConnection$AdapterType networkPreference -> networkPreference
    org.webrtc.PeerConnection$SdpSemantics sdpSemantics -> sdpSemantics
    org.webrtc.TurnCustomizer turnCustomizer -> turnCustomizer
    boolean activeResetSrtpParams -> activeResetSrtpParams
    boolean useMediaTransport -> useMediaTransport
    boolean useMediaTransportForDataChannels -> useMediaTransportForDataChannels
    org.webrtc.CryptoOptions cryptoOptions -> cryptoOptions
    void <init>(java.util.List) -> <init>
    org.webrtc.PeerConnection$IceTransportsType getIceTransportsType() -> getIceTransportsType
    java.util.List getIceServers() -> getIceServers
    org.webrtc.PeerConnection$BundlePolicy getBundlePolicy() -> getBundlePolicy
    org.webrtc.RtcCertificatePem getCertificate() -> getCertificate
    org.webrtc.PeerConnection$RtcpMuxPolicy getRtcpMuxPolicy() -> getRtcpMuxPolicy
    org.webrtc.PeerConnection$TcpCandidatePolicy getTcpCandidatePolicy() -> getTcpCandidatePolicy
    org.webrtc.PeerConnection$CandidateNetworkPolicy getCandidateNetworkPolicy() -> getCandidateNetworkPolicy
    int getAudioJitterBufferMaxPackets() -> getAudioJitterBufferMaxPackets
    boolean getAudioJitterBufferFastAccelerate() -> getAudioJitterBufferFastAccelerate
    int getIceConnectionReceivingTimeout() -> getIceConnectionReceivingTimeout
    int getIceBackupCandidatePairPingInterval() -> getIceBackupCandidatePairPingInterval
    org.webrtc.PeerConnection$KeyType getKeyType() -> getKeyType
    org.webrtc.PeerConnection$ContinualGatheringPolicy getContinualGatheringPolicy() -> getContinualGatheringPolicy
    int getIceCandidatePoolSize() -> getIceCandidatePoolSize
    boolean getPruneTurnPorts() -> getPruneTurnPorts
    boolean getPresumeWritableWhenFullyRelayed() -> getPresumeWritableWhenFullyRelayed
    boolean getSurfaceIceCandidatesOnIceTransportTypeChanged() -> getSurfaceIceCandidatesOnIceTransportTypeChanged
    java.lang.Integer getIceCheckIntervalStrongConnectivity() -> getIceCheckIntervalStrongConnectivity
    java.lang.Integer getIceCheckIntervalWeakConnectivity() -> getIceCheckIntervalWeakConnectivity
    java.lang.Integer getIceCheckMinInterval() -> getIceCheckMinInterval
    java.lang.Integer getIceUnwritableTimeout() -> getIceUnwritableTimeout
    java.lang.Integer getIceUnwritableMinChecks() -> getIceUnwritableMinChecks
    java.lang.Integer getStunCandidateKeepaliveInterval() -> getStunCandidateKeepaliveInterval
    boolean getDisableIPv6OnWifi() -> getDisableIPv6OnWifi
    int getMaxIPv6Networks() -> getMaxIPv6Networks
    org.webrtc.PeerConnection$IntervalRange getIceRegatherIntervalRange() -> getIceRegatherIntervalRange
    org.webrtc.TurnCustomizer getTurnCustomizer() -> getTurnCustomizer
    boolean getDisableIpv6() -> getDisableIpv6
    boolean getEnableDscp() -> getEnableDscp
    boolean getEnableCpuOveruseDetection() -> getEnableCpuOveruseDetection
    boolean getEnableRtpDataChannel() -> getEnableRtpDataChannel
    boolean getSuspendBelowMinBitrate() -> getSuspendBelowMinBitrate
    java.lang.Integer getScreencastMinBitrate() -> getScreencastMinBitrate
    java.lang.Boolean getCombinedAudioVideoBwe() -> getCombinedAudioVideoBwe
    java.lang.Boolean getEnableDtlsSrtp() -> getEnableDtlsSrtp
    org.webrtc.PeerConnection$AdapterType getNetworkPreference() -> getNetworkPreference
    org.webrtc.PeerConnection$SdpSemantics getSdpSemantics() -> getSdpSemantics
    boolean getActiveResetSrtpParams() -> getActiveResetSrtpParams
    boolean getUseMediaTransport() -> getUseMediaTransport
    boolean getUseMediaTransportForDataChannels() -> getUseMediaTransportForDataChannels
    org.webrtc.CryptoOptions getCryptoOptions() -> getCryptoOptions
org.webrtc.PeerConnection$RtcpMuxPolicy -> org.webrtc.PeerConnection$RtcpMuxPolicy:
    org.webrtc.PeerConnection$RtcpMuxPolicy NEGOTIATE -> NEGOTIATE
    org.webrtc.PeerConnection$RtcpMuxPolicy REQUIRE -> REQUIRE
    org.webrtc.PeerConnection$RtcpMuxPolicy[] $VALUES -> $VALUES
    org.webrtc.PeerConnection$RtcpMuxPolicy[] values() -> values
    org.webrtc.PeerConnection$RtcpMuxPolicy valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.webrtc.PeerConnection$SdpSemantics -> org.webrtc.PeerConnection$SdpSemantics:
    org.webrtc.PeerConnection$SdpSemantics PLAN_B -> PLAN_B
    org.webrtc.PeerConnection$SdpSemantics UNIFIED_PLAN -> UNIFIED_PLAN
    org.webrtc.PeerConnection$SdpSemantics[] $VALUES -> $VALUES
    org.webrtc.PeerConnection$SdpSemantics[] values() -> values
    org.webrtc.PeerConnection$SdpSemantics valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.webrtc.PeerConnection$SignalingState -> org.webrtc.PeerConnection$SignalingState:
    org.webrtc.PeerConnection$SignalingState STABLE -> STABLE
    org.webrtc.PeerConnection$SignalingState HAVE_LOCAL_OFFER -> HAVE_LOCAL_OFFER
    org.webrtc.PeerConnection$SignalingState HAVE_LOCAL_PRANSWER -> HAVE_LOCAL_PRANSWER
    org.webrtc.PeerConnection$SignalingState HAVE_REMOTE_OFFER -> HAVE_REMOTE_OFFER
    org.webrtc.PeerConnection$SignalingState HAVE_REMOTE_PRANSWER -> HAVE_REMOTE_PRANSWER
    org.webrtc.PeerConnection$SignalingState CLOSED -> CLOSED
    org.webrtc.PeerConnection$SignalingState[] $VALUES -> $VALUES
    org.webrtc.PeerConnection$SignalingState[] values() -> values
    org.webrtc.PeerConnection$SignalingState valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    org.webrtc.PeerConnection$SignalingState fromNativeIndex(int) -> fromNativeIndex
    void <clinit>() -> <clinit>
org.webrtc.PeerConnection$TcpCandidatePolicy -> org.webrtc.PeerConnection$TcpCandidatePolicy:
    org.webrtc.PeerConnection$TcpCandidatePolicy ENABLED -> ENABLED
    org.webrtc.PeerConnection$TcpCandidatePolicy DISABLED -> DISABLED
    org.webrtc.PeerConnection$TcpCandidatePolicy[] $VALUES -> $VALUES
    org.webrtc.PeerConnection$TcpCandidatePolicy[] values() -> values
    org.webrtc.PeerConnection$TcpCandidatePolicy valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.webrtc.PeerConnection$TlsCertPolicy -> org.webrtc.PeerConnection$TlsCertPolicy:
    org.webrtc.PeerConnection$TlsCertPolicy TLS_CERT_POLICY_SECURE -> TLS_CERT_POLICY_SECURE
    org.webrtc.PeerConnection$TlsCertPolicy TLS_CERT_POLICY_INSECURE_NO_CHECK -> TLS_CERT_POLICY_INSECURE_NO_CHECK
    org.webrtc.PeerConnection$TlsCertPolicy[] $VALUES -> $VALUES
    org.webrtc.PeerConnection$TlsCertPolicy[] values() -> values
    org.webrtc.PeerConnection$TlsCertPolicy valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.webrtc.PeerConnectionDependencies -> org.webrtc.PeerConnectionDependencies:
    org.webrtc.PeerConnection$Observer observer -> observer
    org.webrtc.SSLCertificateVerifier sslCertificateVerifier -> sslCertificateVerifier
    org.webrtc.PeerConnectionDependencies$Builder builder(org.webrtc.PeerConnection$Observer) -> builder
    org.webrtc.PeerConnection$Observer getObserver() -> getObserver
    org.webrtc.SSLCertificateVerifier getSSLCertificateVerifier() -> getSSLCertificateVerifier
    void <init>(org.webrtc.PeerConnection$Observer,org.webrtc.SSLCertificateVerifier) -> <init>
    void <init>(org.webrtc.PeerConnection$Observer,org.webrtc.SSLCertificateVerifier,org.webrtc.PeerConnectionDependencies$1) -> <init>
org.webrtc.PeerConnectionDependencies$1 -> org.webrtc.PeerConnectionDependencies$1:
org.webrtc.PeerConnectionDependencies$Builder -> org.webrtc.PeerConnectionDependencies$Builder:
    org.webrtc.PeerConnection$Observer observer -> observer
    org.webrtc.SSLCertificateVerifier sslCertificateVerifier -> sslCertificateVerifier
    void <init>(org.webrtc.PeerConnection$Observer) -> <init>
    org.webrtc.PeerConnectionDependencies$Builder setSSLCertificateVerifier(org.webrtc.SSLCertificateVerifier) -> setSSLCertificateVerifier
    org.webrtc.PeerConnectionDependencies createPeerConnectionDependencies() -> createPeerConnectionDependencies
    void <init>(org.webrtc.PeerConnection$Observer,org.webrtc.PeerConnectionDependencies$1) -> <init>
org.webrtc.PeerConnectionFactory -> org.webrtc.PeerConnectionFactory:
    java.lang.String TRIAL_ENABLED -> TRIAL_ENABLED
    java.lang.String VIDEO_FRAME_EMIT_TRIAL -> VIDEO_FRAME_EMIT_TRIAL
    java.lang.String TAG -> TAG
    java.lang.String VIDEO_CAPTURER_THREAD_NAME -> VIDEO_CAPTURER_THREAD_NAME
    boolean internalTracerInitialized -> internalTracerInitialized
    org.webrtc.PeerConnectionFactory$ThreadInfo staticNetworkThread -> staticNetworkThread
    org.webrtc.PeerConnectionFactory$ThreadInfo staticWorkerThread -> staticWorkerThread
    org.webrtc.PeerConnectionFactory$ThreadInfo staticSignalingThread -> staticSignalingThread
    long nativeFactory -> nativeFactory
    org.webrtc.PeerConnectionFactory$ThreadInfo networkThread -> networkThread
    org.webrtc.PeerConnectionFactory$ThreadInfo workerThread -> workerThread
    org.webrtc.PeerConnectionFactory$ThreadInfo signalingThread -> signalingThread
    org.webrtc.PeerConnectionFactory$Builder builder() -> builder
    void initialize(org.webrtc.PeerConnectionFactory$InitializationOptions) -> initialize
    void checkInitializeHasBeenCalled() -> checkInitializeHasBeenCalled
    void initializeInternalTracer() -> initializeInternalTracer
    void shutdownInternalTracer() -> shutdownInternalTracer
    void initializeFieldTrials(java.lang.String) -> initializeFieldTrials
    java.lang.String fieldTrialsFindFullName(java.lang.String) -> fieldTrialsFindFullName
    boolean startInternalTracingCapture(java.lang.String) -> startInternalTracingCapture
    void stopInternalTracingCapture() -> stopInternalTracingCapture
    void <init>(long) -> <init>
    org.webrtc.PeerConnection createPeerConnectionInternal(org.webrtc.PeerConnection$RTCConfiguration,org.webrtc.MediaConstraints,org.webrtc.PeerConnection$Observer,org.webrtc.SSLCertificateVerifier) -> createPeerConnectionInternal
    org.webrtc.PeerConnection createPeerConnection(org.webrtc.PeerConnection$RTCConfiguration,org.webrtc.MediaConstraints,org.webrtc.PeerConnection$Observer) -> createPeerConnection
    org.webrtc.PeerConnection createPeerConnection(java.util.List,org.webrtc.MediaConstraints,org.webrtc.PeerConnection$Observer) -> createPeerConnection
    org.webrtc.PeerConnection createPeerConnection(java.util.List,org.webrtc.PeerConnection$Observer) -> createPeerConnection
    org.webrtc.PeerConnection createPeerConnection(org.webrtc.PeerConnection$RTCConfiguration,org.webrtc.PeerConnection$Observer) -> createPeerConnection
    org.webrtc.PeerConnection createPeerConnection(org.webrtc.PeerConnection$RTCConfiguration,org.webrtc.PeerConnectionDependencies) -> createPeerConnection
    org.webrtc.MediaStream createLocalMediaStream(java.lang.String) -> createLocalMediaStream
    org.webrtc.VideoSource createVideoSource(boolean,boolean) -> createVideoSource
    org.webrtc.VideoSource createVideoSource(boolean) -> createVideoSource
    org.webrtc.VideoTrack createVideoTrack(java.lang.String,org.webrtc.VideoSource) -> createVideoTrack
    org.webrtc.AudioSource createAudioSource(org.webrtc.MediaConstraints) -> createAudioSource
    org.webrtc.AudioTrack createAudioTrack(java.lang.String,org.webrtc.AudioSource) -> createAudioTrack
    boolean startAecDump(int,int) -> startAecDump
    void stopAecDump() -> stopAecDump
    void dispose() -> dispose
    long getNativePeerConnectionFactory() -> getNativePeerConnectionFactory
    long getNativeOwnedFactoryAndThreads() -> getNativeOwnedFactoryAndThreads
    void checkPeerConnectionFactoryExists() -> checkPeerConnectionFactoryExists
    void printStackTrace(org.webrtc.PeerConnectionFactory$ThreadInfo,boolean) -> printStackTrace
    void printStackTraces() -> printStackTraces
    void printInternalStackTraces(boolean) -> printInternalStackTraces
    void onNetworkThreadReady() -> onNetworkThreadReady
    void onWorkerThreadReady() -> onWorkerThreadReady
    void onSignalingThreadReady() -> onSignalingThreadReady
    void nativeInitializeAndroidGlobals() -> nativeInitializeAndroidGlobals
    void nativeInitializeFieldTrials(java.lang.String) -> nativeInitializeFieldTrials
    java.lang.String nativeFindFieldTrialsFullName(java.lang.String) -> nativeFindFieldTrialsFullName
    void nativeInitializeInternalTracer() -> nativeInitializeInternalTracer
    void nativeShutdownInternalTracer() -> nativeShutdownInternalTracer
    boolean nativeStartInternalTracingCapture(java.lang.String) -> nativeStartInternalTracingCapture
    void nativeStopInternalTracingCapture() -> nativeStopInternalTracingCapture
    org.webrtc.PeerConnectionFactory nativeCreatePeerConnectionFactory(android.content.Context,org.webrtc.PeerConnectionFactory$Options,long,long,long,org.webrtc.VideoEncoderFactory,org.webrtc.VideoDecoderFactory,long,long,long,long,long) -> nativeCreatePeerConnectionFactory
    long nativeCreatePeerConnection(long,org.webrtc.PeerConnection$RTCConfiguration,org.webrtc.MediaConstraints,long,org.webrtc.SSLCertificateVerifier) -> nativeCreatePeerConnection
    long nativeCreateLocalMediaStream(long,java.lang.String) -> nativeCreateLocalMediaStream
    long nativeCreateVideoSource(long,boolean,boolean) -> nativeCreateVideoSource
    long nativeCreateVideoTrack(long,java.lang.String,long) -> nativeCreateVideoTrack
    long nativeCreateAudioSource(long,org.webrtc.MediaConstraints) -> nativeCreateAudioSource
    long nativeCreateAudioTrack(long,java.lang.String,long) -> nativeCreateAudioTrack
    boolean nativeStartAecDump(long,int,int) -> nativeStartAecDump
    void nativeStopAecDump(long) -> nativeStopAecDump
    void nativeFreeFactory(long) -> nativeFreeFactory
    long nativeGetNativePeerConnectionFactory(long) -> nativeGetNativePeerConnectionFactory
    void nativeInjectLoggable(org.webrtc.JNILogging,int) -> nativeInjectLoggable
    void nativeDeleteLoggable() -> nativeDeleteLoggable
    void nativePrintStackTrace(int) -> nativePrintStackTrace
    void nativePrintStackTracesOfRegisteredThreads() -> nativePrintStackTracesOfRegisteredThreads
    void access$100() -> access$100
    org.webrtc.PeerConnectionFactory access$200(android.content.Context,org.webrtc.PeerConnectionFactory$Options,long,long,long,org.webrtc.VideoEncoderFactory,org.webrtc.VideoDecoderFactory,long,long,long,long,long) -> access$200
org.webrtc.PeerConnectionFactory$1 -> org.webrtc.PeerConnectionFactory$1:
org.webrtc.PeerConnectionFactory$Builder -> org.webrtc.PeerConnectionFactory$Builder:
    org.webrtc.PeerConnectionFactory$Options options -> options
    org.webrtc.audio.AudioDeviceModule audioDeviceModule -> audioDeviceModule
    org.webrtc.AudioEncoderFactoryFactory audioEncoderFactoryFactory -> audioEncoderFactoryFactory
    org.webrtc.AudioDecoderFactoryFactory audioDecoderFactoryFactory -> audioDecoderFactoryFactory
    org.webrtc.VideoEncoderFactory videoEncoderFactory -> videoEncoderFactory
    org.webrtc.VideoDecoderFactory videoDecoderFactory -> videoDecoderFactory
    org.webrtc.AudioProcessingFactory audioProcessingFactory -> audioProcessingFactory
    org.webrtc.FecControllerFactoryFactoryInterface fecControllerFactoryFactory -> fecControllerFactoryFactory
    org.webrtc.NetworkControllerFactoryFactory networkControllerFactoryFactory -> networkControllerFactoryFactory
    org.webrtc.NetworkStatePredictorFactoryFactory networkStatePredictorFactoryFactory -> networkStatePredictorFactoryFactory
    org.webrtc.MediaTransportFactoryFactory mediaTransportFactoryFactory -> mediaTransportFactoryFactory
    void <init>() -> <init>
    org.webrtc.PeerConnectionFactory$Builder setOptions(org.webrtc.PeerConnectionFactory$Options) -> setOptions
    org.webrtc.PeerConnectionFactory$Builder setAudioDeviceModule(org.webrtc.audio.AudioDeviceModule) -> setAudioDeviceModule
    org.webrtc.PeerConnectionFactory$Builder setAudioEncoderFactoryFactory(org.webrtc.AudioEncoderFactoryFactory) -> setAudioEncoderFactoryFactory
    org.webrtc.PeerConnectionFactory$Builder setAudioDecoderFactoryFactory(org.webrtc.AudioDecoderFactoryFactory) -> setAudioDecoderFactoryFactory
    org.webrtc.PeerConnectionFactory$Builder setVideoEncoderFactory(org.webrtc.VideoEncoderFactory) -> setVideoEncoderFactory
    org.webrtc.PeerConnectionFactory$Builder setVideoDecoderFactory(org.webrtc.VideoDecoderFactory) -> setVideoDecoderFactory
    org.webrtc.PeerConnectionFactory$Builder setAudioProcessingFactory(org.webrtc.AudioProcessingFactory) -> setAudioProcessingFactory
    org.webrtc.PeerConnectionFactory$Builder setFecControllerFactoryFactoryInterface(org.webrtc.FecControllerFactoryFactoryInterface) -> setFecControllerFactoryFactoryInterface
    org.webrtc.PeerConnectionFactory$Builder setNetworkControllerFactoryFactory(org.webrtc.NetworkControllerFactoryFactory) -> setNetworkControllerFactoryFactory
    org.webrtc.PeerConnectionFactory$Builder setNetworkStatePredictorFactoryFactory(org.webrtc.NetworkStatePredictorFactoryFactory) -> setNetworkStatePredictorFactoryFactory
    org.webrtc.PeerConnectionFactory$Builder setMediaTransportFactoryFactory(org.webrtc.MediaTransportFactoryFactory) -> setMediaTransportFactoryFactory
    org.webrtc.PeerConnectionFactory createPeerConnectionFactory() -> createPeerConnectionFactory
    void <init>(org.webrtc.PeerConnectionFactory$1) -> <init>
org.webrtc.PeerConnectionFactory$InitializationOptions -> org.webrtc.PeerConnectionFactory$InitializationOptions:
    android.content.Context applicationContext -> applicationContext
    java.lang.String fieldTrials -> fieldTrials
    boolean enableInternalTracer -> enableInternalTracer
    org.webrtc.NativeLibraryLoader nativeLibraryLoader -> nativeLibraryLoader
    java.lang.String nativeLibraryName -> nativeLibraryName
    org.webrtc.Loggable loggable -> loggable
    org.webrtc.Logging$Severity loggableSeverity -> loggableSeverity
    void <init>(android.content.Context,java.lang.String,boolean,org.webrtc.NativeLibraryLoader,java.lang.String,org.webrtc.Loggable,org.webrtc.Logging$Severity) -> <init>
    org.webrtc.PeerConnectionFactory$InitializationOptions$Builder builder(android.content.Context) -> builder
    void <init>(android.content.Context,java.lang.String,boolean,org.webrtc.NativeLibraryLoader,java.lang.String,org.webrtc.Loggable,org.webrtc.Logging$Severity,org.webrtc.PeerConnectionFactory$1) -> <init>
org.webrtc.PeerConnectionFactory$InitializationOptions$Builder -> org.webrtc.PeerConnectionFactory$InitializationOptions$Builder:
    android.content.Context applicationContext -> applicationContext
    java.lang.String fieldTrials -> fieldTrials
    boolean enableInternalTracer -> enableInternalTracer
    org.webrtc.NativeLibraryLoader nativeLibraryLoader -> nativeLibraryLoader
    java.lang.String nativeLibraryName -> nativeLibraryName
    org.webrtc.Loggable loggable -> loggable
    org.webrtc.Logging$Severity loggableSeverity -> loggableSeverity
    void <init>(android.content.Context) -> <init>
    org.webrtc.PeerConnectionFactory$InitializationOptions$Builder setFieldTrials(java.lang.String) -> setFieldTrials
    org.webrtc.PeerConnectionFactory$InitializationOptions$Builder setEnableInternalTracer(boolean) -> setEnableInternalTracer
    org.webrtc.PeerConnectionFactory$InitializationOptions$Builder setNativeLibraryLoader(org.webrtc.NativeLibraryLoader) -> setNativeLibraryLoader
    org.webrtc.PeerConnectionFactory$InitializationOptions$Builder setNativeLibraryName(java.lang.String) -> setNativeLibraryName
    org.webrtc.PeerConnectionFactory$InitializationOptions$Builder setInjectableLogger(org.webrtc.Loggable,org.webrtc.Logging$Severity) -> setInjectableLogger
    org.webrtc.PeerConnectionFactory$InitializationOptions createInitializationOptions() -> createInitializationOptions
org.webrtc.PeerConnectionFactory$Options -> org.webrtc.PeerConnectionFactory$Options:
    int ADAPTER_TYPE_UNKNOWN -> ADAPTER_TYPE_UNKNOWN
    int ADAPTER_TYPE_ETHERNET -> ADAPTER_TYPE_ETHERNET
    int ADAPTER_TYPE_WIFI -> ADAPTER_TYPE_WIFI
    int ADAPTER_TYPE_CELLULAR -> ADAPTER_TYPE_CELLULAR
    int ADAPTER_TYPE_VPN -> ADAPTER_TYPE_VPN
    int ADAPTER_TYPE_LOOPBACK -> ADAPTER_TYPE_LOOPBACK
    int ADAPTER_TYPE_ANY -> ADAPTER_TYPE_ANY
    int networkIgnoreMask -> networkIgnoreMask
    boolean disableEncryption -> disableEncryption
    boolean disableNetworkMonitor -> disableNetworkMonitor
    void <init>() -> <init>
    int getNetworkIgnoreMask() -> getNetworkIgnoreMask
    boolean getDisableEncryption() -> getDisableEncryption
    boolean getDisableNetworkMonitor() -> getDisableNetworkMonitor
org.webrtc.PeerConnectionFactory$ThreadInfo -> org.webrtc.PeerConnectionFactory$ThreadInfo:
    java.lang.Thread thread -> thread
    int tid -> tid
    org.webrtc.PeerConnectionFactory$ThreadInfo getCurrent() -> getCurrent
    void <init>(java.lang.Thread,int) -> <init>
org.webrtc.PlatformSoftwareVideoDecoderFactory -> org.webrtc.PlatformSoftwareVideoDecoderFactory:
    org.webrtc.Predicate defaultAllowedPredicate -> defaultAllowedPredicate
    void <init>(org.webrtc.EglBase$Context) -> <init>
    org.webrtc.VideoCodecInfo[] getSupportedCodecs() -> getSupportedCodecs
    org.webrtc.VideoDecoder createDecoder(org.webrtc.VideoCodecInfo) -> createDecoder
    void <clinit>() -> <clinit>
org.webrtc.PlatformSoftwareVideoDecoderFactory$1 -> org.webrtc.PlatformSoftwareVideoDecoderFactory$1:
    java.lang.String[] prefixWhitelist -> prefixWhitelist
    void <init>() -> <init>
    boolean test(android.media.MediaCodecInfo) -> test
    boolean test(java.lang.Object) -> test
    org.webrtc.Predicate or(org.webrtc.Predicate) -> or
    org.webrtc.Predicate and(org.webrtc.Predicate) -> and
    org.webrtc.Predicate negate() -> negate
org.webrtc.Predicate -> org.webrtc.Predicate:
    boolean test(java.lang.Object) -> test
    org.webrtc.Predicate or(org.webrtc.Predicate) -> or
    org.webrtc.Predicate and(org.webrtc.Predicate) -> and
    org.webrtc.Predicate negate() -> negate
org.webrtc.Predicate$$CC -> org.webrtc.Predicate$$CC:
    org.webrtc.Predicate or(org.webrtc.Predicate,org.webrtc.Predicate) -> or
    org.webrtc.Predicate and(org.webrtc.Predicate,org.webrtc.Predicate) -> and
    org.webrtc.Predicate negate(org.webrtc.Predicate) -> negate
org.webrtc.Predicate$1 -> org.webrtc.Predicate$1:
    org.webrtc.Predicate val$other -> val$other
    org.webrtc.Predicate this$0 -> this$0
    void <init>(org.webrtc.Predicate,org.webrtc.Predicate) -> <init>
    boolean test(java.lang.Object) -> test
    org.webrtc.Predicate or(org.webrtc.Predicate) -> or
    org.webrtc.Predicate and(org.webrtc.Predicate) -> and
    org.webrtc.Predicate negate() -> negate
org.webrtc.Predicate$2 -> org.webrtc.Predicate$2:
    org.webrtc.Predicate val$other -> val$other
    org.webrtc.Predicate this$0 -> this$0
    void <init>(org.webrtc.Predicate,org.webrtc.Predicate) -> <init>
    boolean test(java.lang.Object) -> test
    org.webrtc.Predicate or(org.webrtc.Predicate) -> or
    org.webrtc.Predicate and(org.webrtc.Predicate) -> and
    org.webrtc.Predicate negate() -> negate
org.webrtc.Predicate$3 -> org.webrtc.Predicate$3:
    org.webrtc.Predicate this$0 -> this$0
    void <init>(org.webrtc.Predicate) -> <init>
    boolean test(java.lang.Object) -> test
    org.webrtc.Predicate or(org.webrtc.Predicate) -> or
    org.webrtc.Predicate and(org.webrtc.Predicate) -> and
    org.webrtc.Predicate negate() -> negate
org.webrtc.R -> org.webrtc.R:
    void <init>() -> <init>
org.webrtc.RTCStats -> org.webrtc.RTCStats:
    long timestampUs -> timestampUs
    java.lang.String type -> type
    java.lang.String id -> id
    java.util.Map members -> members
    void <init>(long,java.lang.String,java.lang.String,java.util.Map) -> <init>
    double getTimestampUs() -> getTimestampUs
    java.lang.String getType() -> getType
    java.lang.String getId() -> getId
    java.util.Map getMembers() -> getMembers
    java.lang.String toString() -> toString
    void appendValue(java.lang.StringBuilder,java.lang.Object) -> appendValue
    org.webrtc.RTCStats create(long,java.lang.String,java.lang.String,java.util.Map) -> create
org.webrtc.RTCStatsCollectorCallback -> org.webrtc.RTCStatsCollectorCallback:
    void onStatsDelivered(org.webrtc.RTCStatsReport) -> onStatsDelivered
org.webrtc.RTCStatsReport -> org.webrtc.RTCStatsReport:
    long timestampUs -> timestampUs
    java.util.Map stats -> stats
    void <init>(long,java.util.Map) -> <init>
    double getTimestampUs() -> getTimestampUs
    java.util.Map getStatsMap() -> getStatsMap
    java.lang.String toString() -> toString
    org.webrtc.RTCStatsReport create(long,java.util.Map) -> create
org.webrtc.RefCountDelegate -> org.webrtc.RefCountDelegate:
    java.util.concurrent.atomic.AtomicInteger refCount -> refCount
    java.lang.Runnable releaseCallback -> releaseCallback
    void <init>(java.lang.Runnable) -> <init>
    void retain() -> retain
    void release() -> release
org.webrtc.RefCounted -> org.webrtc.RefCounted:
    void retain() -> retain
    void release() -> release
org.webrtc.RendererCommon -> org.webrtc.RendererCommon:
    float BALANCED_VISIBLE_FRACTION -> BALANCED_VISIBLE_FRACTION
    void <init>() -> <init>
    float[] getLayoutMatrix(boolean,float,float) -> getLayoutMatrix
    android.graphics.Matrix convertMatrixToAndroidGraphicsMatrix(float[]) -> convertMatrixToAndroidGraphicsMatrix
    float[] convertMatrixFromAndroidGraphicsMatrix(android.graphics.Matrix) -> convertMatrixFromAndroidGraphicsMatrix
    android.graphics.Point getDisplaySize(org.webrtc.RendererCommon$ScalingType,float,int,int) -> getDisplaySize
    void adjustOrigin(float[]) -> adjustOrigin
    float convertScalingTypeToVisibleFraction(org.webrtc.RendererCommon$ScalingType) -> convertScalingTypeToVisibleFraction
    android.graphics.Point getDisplaySize(float,float,int,int) -> getDisplaySize
    void <clinit>() -> <clinit>
org.webrtc.RendererCommon$1 -> org.webrtc.RendererCommon$1:
    int[] $SwitchMap$org$webrtc$RendererCommon$ScalingType -> $SwitchMap$org$webrtc$RendererCommon$ScalingType
    void <clinit>() -> <clinit>
org.webrtc.RendererCommon$GlDrawer -> org.webrtc.RendererCommon$GlDrawer:
    void drawOes(int,float[],int,int,int,int,int,int) -> drawOes
    void drawRgb(int,float[],int,int,int,int,int,int) -> drawRgb
    void drawYuv(int[],float[],int,int,int,int,int,int) -> drawYuv
    void release() -> release
org.webrtc.RendererCommon$RendererEvents -> org.webrtc.RendererCommon$RendererEvents:
    void onFirstFrameRendered() -> onFirstFrameRendered
    void onFrameResolutionChanged(int,int,int) -> onFrameResolutionChanged
org.webrtc.RendererCommon$ScalingType -> org.webrtc.RendererCommon$ScalingType:
    org.webrtc.RendererCommon$ScalingType SCALE_ASPECT_FIT -> SCALE_ASPECT_FIT
    org.webrtc.RendererCommon$ScalingType SCALE_ASPECT_FILL -> SCALE_ASPECT_FILL
    org.webrtc.RendererCommon$ScalingType SCALE_ASPECT_BALANCED -> SCALE_ASPECT_BALANCED
    org.webrtc.RendererCommon$ScalingType[] $VALUES -> $VALUES
    org.webrtc.RendererCommon$ScalingType[] values() -> values
    org.webrtc.RendererCommon$ScalingType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.webrtc.RendererCommon$VideoLayoutMeasure -> org.webrtc.RendererCommon$VideoLayoutMeasure:
    org.webrtc.RendererCommon$ScalingType scalingTypeMatchOrientation -> scalingTypeMatchOrientation
    org.webrtc.RendererCommon$ScalingType scalingTypeMismatchOrientation -> scalingTypeMismatchOrientation
    void <init>() -> <init>
    void setScalingType(org.webrtc.RendererCommon$ScalingType) -> setScalingType
    void setScalingType(org.webrtc.RendererCommon$ScalingType,org.webrtc.RendererCommon$ScalingType) -> setScalingType
    android.graphics.Point measure(int,int,int,int) -> measure
org.webrtc.RtcCertificatePem -> org.webrtc.RtcCertificatePem:
    java.lang.String privateKey -> privateKey
    java.lang.String certificate -> certificate
    long DEFAULT_EXPIRY -> DEFAULT_EXPIRY
    void <init>(java.lang.String,java.lang.String) -> <init>
    java.lang.String getPrivateKey() -> getPrivateKey
    java.lang.String getCertificate() -> getCertificate
    org.webrtc.RtcCertificatePem generateCertificate() -> generateCertificate
    org.webrtc.RtcCertificatePem generateCertificate(org.webrtc.PeerConnection$KeyType) -> generateCertificate
    org.webrtc.RtcCertificatePem generateCertificate(long) -> generateCertificate
    org.webrtc.RtcCertificatePem generateCertificate(org.webrtc.PeerConnection$KeyType,long) -> generateCertificate
    org.webrtc.RtcCertificatePem nativeGenerateCertificate(org.webrtc.PeerConnection$KeyType,long) -> nativeGenerateCertificate
org.webrtc.RtpParameters -> org.webrtc.RtpParameters:
    java.lang.String transactionId -> transactionId
    org.webrtc.RtpParameters$Rtcp rtcp -> rtcp
    java.util.List headerExtensions -> headerExtensions
    java.util.List encodings -> encodings
    java.util.List codecs -> codecs
    void <init>(java.lang.String,org.webrtc.RtpParameters$Rtcp,java.util.List,java.util.List,java.util.List) -> <init>
    java.lang.String getTransactionId() -> getTransactionId
    org.webrtc.RtpParameters$Rtcp getRtcp() -> getRtcp
    java.util.List getHeaderExtensions() -> getHeaderExtensions
    java.util.List getEncodings() -> getEncodings
    java.util.List getCodecs() -> getCodecs
org.webrtc.RtpParameters$Codec -> org.webrtc.RtpParameters$Codec:
    int payloadType -> payloadType
    java.lang.String name -> name
    org.webrtc.MediaStreamTrack$MediaType kind -> kind
    java.lang.Integer clockRate -> clockRate
    java.lang.Integer numChannels -> numChannels
    java.util.Map parameters -> parameters
    void <init>(int,java.lang.String,org.webrtc.MediaStreamTrack$MediaType,java.lang.Integer,java.lang.Integer,java.util.Map) -> <init>
    int getPayloadType() -> getPayloadType
    java.lang.String getName() -> getName
    org.webrtc.MediaStreamTrack$MediaType getKind() -> getKind
    java.lang.Integer getClockRate() -> getClockRate
    java.lang.Integer getNumChannels() -> getNumChannels
    java.util.Map getParameters() -> getParameters
org.webrtc.RtpParameters$Encoding -> org.webrtc.RtpParameters$Encoding:
    java.lang.String rid -> rid
    boolean active -> active
    java.lang.Integer maxBitrateBps -> maxBitrateBps
    java.lang.Integer minBitrateBps -> minBitrateBps
    java.lang.Integer maxFramerate -> maxFramerate
    java.lang.Integer numTemporalLayers -> numTemporalLayers
    java.lang.Double scaleResolutionDownBy -> scaleResolutionDownBy
    java.lang.Long ssrc -> ssrc
    void <init>(java.lang.String,boolean,java.lang.Double) -> <init>
    void <init>(java.lang.String,boolean,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Double,java.lang.Long) -> <init>
    java.lang.String getRid() -> getRid
    boolean getActive() -> getActive
    java.lang.Integer getMaxBitrateBps() -> getMaxBitrateBps
    java.lang.Integer getMinBitrateBps() -> getMinBitrateBps
    java.lang.Integer getMaxFramerate() -> getMaxFramerate
    java.lang.Integer getNumTemporalLayers() -> getNumTemporalLayers
    java.lang.Double getScaleResolutionDownBy() -> getScaleResolutionDownBy
    java.lang.Long getSsrc() -> getSsrc
org.webrtc.RtpParameters$HeaderExtension -> org.webrtc.RtpParameters$HeaderExtension:
    java.lang.String uri -> uri
    int id -> id
    boolean encrypted -> encrypted
    void <init>(java.lang.String,int,boolean) -> <init>
    java.lang.String getUri() -> getUri
    int getId() -> getId
    boolean getEncrypted() -> getEncrypted
org.webrtc.RtpParameters$Rtcp -> org.webrtc.RtpParameters$Rtcp:
    java.lang.String cname -> cname
    boolean reducedSize -> reducedSize
    void <init>(java.lang.String,boolean) -> <init>
    java.lang.String getCname() -> getCname
    boolean getReducedSize() -> getReducedSize
org.webrtc.RtpReceiver -> org.webrtc.RtpReceiver:
    long nativeRtpReceiver -> nativeRtpReceiver
    long nativeObserver -> nativeObserver
    org.webrtc.MediaStreamTrack cachedTrack -> cachedTrack
    void <init>(long) -> <init>
    org.webrtc.MediaStreamTrack track() -> track
    boolean setParameters(org.webrtc.RtpParameters) -> setParameters
    org.webrtc.RtpParameters getParameters() -> getParameters
    java.lang.String id() -> id
    void dispose() -> dispose
    void SetObserver(org.webrtc.RtpReceiver$Observer) -> SetObserver
    void setFrameDecryptor(org.webrtc.FrameDecryptor) -> setFrameDecryptor
    void checkRtpReceiverExists() -> checkRtpReceiverExists
    long nativeGetTrack(long) -> nativeGetTrack
    boolean nativeSetParameters(long,org.webrtc.RtpParameters) -> nativeSetParameters
    org.webrtc.RtpParameters nativeGetParameters(long) -> nativeGetParameters
    java.lang.String nativeGetId(long) -> nativeGetId
    long nativeSetObserver(long,org.webrtc.RtpReceiver$Observer) -> nativeSetObserver
    void nativeUnsetObserver(long,long) -> nativeUnsetObserver
    void nativeSetFrameDecryptor(long,long) -> nativeSetFrameDecryptor
org.webrtc.RtpReceiver$Observer -> org.webrtc.RtpReceiver$Observer:
    void onFirstPacketReceived(org.webrtc.MediaStreamTrack$MediaType) -> onFirstPacketReceived
org.webrtc.RtpSender -> org.webrtc.RtpSender:
    long nativeRtpSender -> nativeRtpSender
    org.webrtc.MediaStreamTrack cachedTrack -> cachedTrack
    boolean ownsTrack -> ownsTrack
    org.webrtc.DtmfSender dtmfSender -> dtmfSender
    void <init>(long) -> <init>
    boolean setTrack(org.webrtc.MediaStreamTrack,boolean) -> setTrack
    org.webrtc.MediaStreamTrack track() -> track
    boolean setParameters(org.webrtc.RtpParameters) -> setParameters
    org.webrtc.RtpParameters getParameters() -> getParameters
    java.lang.String id() -> id
    org.webrtc.DtmfSender dtmf() -> dtmf
    void setFrameEncryptor(org.webrtc.FrameEncryptor) -> setFrameEncryptor
    void dispose() -> dispose
    long getNativeRtpSender() -> getNativeRtpSender
    void checkRtpSenderExists() -> checkRtpSenderExists
    boolean nativeSetTrack(long,long) -> nativeSetTrack
    long nativeGetTrack(long) -> nativeGetTrack
    long nativeGetDtmfSender(long) -> nativeGetDtmfSender
    boolean nativeSetParameters(long,org.webrtc.RtpParameters) -> nativeSetParameters
    org.webrtc.RtpParameters nativeGetParameters(long) -> nativeGetParameters
    java.lang.String nativeGetId(long) -> nativeGetId
    void nativeSetFrameEncryptor(long,long) -> nativeSetFrameEncryptor
org.webrtc.RtpTransceiver -> org.webrtc.RtpTransceiver:
    long nativeRtpTransceiver -> nativeRtpTransceiver
    org.webrtc.RtpSender cachedSender -> cachedSender
    org.webrtc.RtpReceiver cachedReceiver -> cachedReceiver
    void <init>(long) -> <init>
    org.webrtc.MediaStreamTrack$MediaType getMediaType() -> getMediaType
    java.lang.String getMid() -> getMid
    org.webrtc.RtpSender getSender() -> getSender
    org.webrtc.RtpReceiver getReceiver() -> getReceiver
    boolean isStopped() -> isStopped
    org.webrtc.RtpTransceiver$RtpTransceiverDirection getDirection() -> getDirection
    org.webrtc.RtpTransceiver$RtpTransceiverDirection getCurrentDirection() -> getCurrentDirection
    void setDirection(org.webrtc.RtpTransceiver$RtpTransceiverDirection) -> setDirection
    void stop() -> stop
    void dispose() -> dispose
    void checkRtpTransceiverExists() -> checkRtpTransceiverExists
    org.webrtc.MediaStreamTrack$MediaType nativeGetMediaType(long) -> nativeGetMediaType
    java.lang.String nativeGetMid(long) -> nativeGetMid
    org.webrtc.RtpSender nativeGetSender(long) -> nativeGetSender
    org.webrtc.RtpReceiver nativeGetReceiver(long) -> nativeGetReceiver
    boolean nativeStopped(long) -> nativeStopped
    org.webrtc.RtpTransceiver$RtpTransceiverDirection nativeDirection(long) -> nativeDirection
    org.webrtc.RtpTransceiver$RtpTransceiverDirection nativeCurrentDirection(long) -> nativeCurrentDirection
    void nativeStop(long) -> nativeStop
    void nativeSetDirection(long,org.webrtc.RtpTransceiver$RtpTransceiverDirection) -> nativeSetDirection
org.webrtc.RtpTransceiver$RtpTransceiverDirection -> org.webrtc.RtpTransceiver$RtpTransceiverDirection:
    org.webrtc.RtpTransceiver$RtpTransceiverDirection SEND_RECV -> SEND_RECV
    org.webrtc.RtpTransceiver$RtpTransceiverDirection SEND_ONLY -> SEND_ONLY
    org.webrtc.RtpTransceiver$RtpTransceiverDirection RECV_ONLY -> RECV_ONLY
    org.webrtc.RtpTransceiver$RtpTransceiverDirection INACTIVE -> INACTIVE
    int nativeIndex -> nativeIndex
    org.webrtc.RtpTransceiver$RtpTransceiverDirection[] $VALUES -> $VALUES
    org.webrtc.RtpTransceiver$RtpTransceiverDirection[] values() -> values
    org.webrtc.RtpTransceiver$RtpTransceiverDirection valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    int getNativeIndex() -> getNativeIndex
    org.webrtc.RtpTransceiver$RtpTransceiverDirection fromNativeIndex(int) -> fromNativeIndex
    void <clinit>() -> <clinit>
org.webrtc.RtpTransceiver$RtpTransceiverInit -> org.webrtc.RtpTransceiver$RtpTransceiverInit:
    org.webrtc.RtpTransceiver$RtpTransceiverDirection direction -> direction
    java.util.List streamIds -> streamIds
    java.util.List sendEncodings -> sendEncodings
    void <init>() -> <init>
    void <init>(org.webrtc.RtpTransceiver$RtpTransceiverDirection) -> <init>
    void <init>(org.webrtc.RtpTransceiver$RtpTransceiverDirection,java.util.List) -> <init>
    void <init>(org.webrtc.RtpTransceiver$RtpTransceiverDirection,java.util.List,java.util.List) -> <init>
    int getDirectionNativeIndex() -> getDirectionNativeIndex
    java.util.List getStreamIds() -> getStreamIds
    java.util.List getSendEncodings() -> getSendEncodings
org.webrtc.SSLCertificateVerifier -> org.webrtc.SSLCertificateVerifier:
    boolean verify(byte[]) -> verify
org.webrtc.ScreenCapturerAndroid -> org.webrtc.ScreenCapturerAndroid:
    int DISPLAY_FLAGS -> DISPLAY_FLAGS
    int VIRTUAL_DISPLAY_DPI -> VIRTUAL_DISPLAY_DPI
    android.content.Intent mediaProjectionPermissionResultData -> mediaProjectionPermissionResultData
    android.media.projection.MediaProjection$Callback mediaProjectionCallback -> mediaProjectionCallback
    int width -> width
    int height -> height
    android.hardware.display.VirtualDisplay virtualDisplay -> virtualDisplay
    org.webrtc.SurfaceTextureHelper surfaceTextureHelper -> surfaceTextureHelper
    org.webrtc.CapturerObserver capturerObserver -> capturerObserver
    long numCapturedFrames -> numCapturedFrames
    android.media.projection.MediaProjection mediaProjection -> mediaProjection
    boolean isDisposed -> isDisposed
    android.media.projection.MediaProjectionManager mediaProjectionManager -> mediaProjectionManager
    void <init>(android.content.Intent,android.media.projection.MediaProjection$Callback) -> <init>
    void checkNotDisposed() -> checkNotDisposed
    void initialize(org.webrtc.SurfaceTextureHelper,android.content.Context,org.webrtc.CapturerObserver) -> initialize
    void startCapture(int,int,int) -> startCapture
    void stopCapture() -> stopCapture
    void dispose() -> dispose
    void changeCaptureFormat(int,int,int) -> changeCaptureFormat
    void createVirtualDisplay() -> createVirtualDisplay
    void onFrame(org.webrtc.VideoFrame) -> onFrame
    boolean isScreencast() -> isScreencast
    long getNumCapturedFrames() -> getNumCapturedFrames
    org.webrtc.SurfaceTextureHelper access$000(org.webrtc.ScreenCapturerAndroid) -> access$000
    org.webrtc.CapturerObserver access$100(org.webrtc.ScreenCapturerAndroid) -> access$100
    android.hardware.display.VirtualDisplay access$200(org.webrtc.ScreenCapturerAndroid) -> access$200
    android.hardware.display.VirtualDisplay access$202(org.webrtc.ScreenCapturerAndroid,android.hardware.display.VirtualDisplay) -> access$202
    android.media.projection.MediaProjection access$300(org.webrtc.ScreenCapturerAndroid) -> access$300
    android.media.projection.MediaProjection$Callback access$400(org.webrtc.ScreenCapturerAndroid) -> access$400
    android.media.projection.MediaProjection access$302(org.webrtc.ScreenCapturerAndroid,android.media.projection.MediaProjection) -> access$302
    void access$500(org.webrtc.ScreenCapturerAndroid) -> access$500
org.webrtc.ScreenCapturerAndroid$1 -> org.webrtc.ScreenCapturerAndroid$1:
    org.webrtc.ScreenCapturerAndroid this$0 -> this$0
    void <init>(org.webrtc.ScreenCapturerAndroid) -> <init>
    void run() -> run
org.webrtc.ScreenCapturerAndroid$2 -> org.webrtc.ScreenCapturerAndroid$2:
    org.webrtc.ScreenCapturerAndroid this$0 -> this$0
    void <init>(org.webrtc.ScreenCapturerAndroid) -> <init>
    void run() -> run
org.webrtc.SdpObserver -> org.webrtc.SdpObserver:
    void onCreateSuccess(org.webrtc.SessionDescription) -> onCreateSuccess
    void onSetSuccess() -> onSetSuccess
    void onCreateFailure(java.lang.String) -> onCreateFailure
    void onSetFailure(java.lang.String) -> onSetFailure
org.webrtc.SessionDescription -> org.webrtc.SessionDescription:
    org.webrtc.SessionDescription$Type type -> type
    java.lang.String description -> description
    void <init>(org.webrtc.SessionDescription$Type,java.lang.String) -> <init>
    java.lang.String getDescription() -> getDescription
    java.lang.String getTypeInCanonicalForm() -> getTypeInCanonicalForm
org.webrtc.SessionDescription$Type -> org.webrtc.SessionDescription$Type:
    org.webrtc.SessionDescription$Type OFFER -> OFFER
    org.webrtc.SessionDescription$Type PRANSWER -> PRANSWER
    org.webrtc.SessionDescription$Type ANSWER -> ANSWER
    org.webrtc.SessionDescription$Type[] $VALUES -> $VALUES
    org.webrtc.SessionDescription$Type[] values() -> values
    org.webrtc.SessionDescription$Type valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    java.lang.String canonicalForm() -> canonicalForm
    org.webrtc.SessionDescription$Type fromCanonicalForm(java.lang.String) -> fromCanonicalForm
    void <clinit>() -> <clinit>
org.webrtc.Size -> org.webrtc.Size:
    int width -> width
    int height -> height
    void <init>(int,int) -> <init>
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.webrtc.SoftwareVideoDecoderFactory -> org.webrtc.SoftwareVideoDecoderFactory:
    void <init>() -> <init>
    org.webrtc.VideoDecoder createDecoder(java.lang.String) -> createDecoder
    org.webrtc.VideoDecoder createDecoder(org.webrtc.VideoCodecInfo) -> createDecoder
    org.webrtc.VideoCodecInfo[] getSupportedCodecs() -> getSupportedCodecs
    org.webrtc.VideoCodecInfo[] supportedCodecs() -> supportedCodecs
org.webrtc.SoftwareVideoEncoderFactory -> org.webrtc.SoftwareVideoEncoderFactory:
    void <init>() -> <init>
    org.webrtc.VideoEncoder createEncoder(org.webrtc.VideoCodecInfo) -> createEncoder
    org.webrtc.VideoCodecInfo[] getSupportedCodecs() -> getSupportedCodecs
    org.webrtc.VideoCodecInfo[] supportedCodecs() -> supportedCodecs
org.webrtc.StatsObserver -> org.webrtc.StatsObserver:
    void onComplete(org.webrtc.StatsReport[]) -> onComplete
org.webrtc.StatsReport -> org.webrtc.StatsReport:
    java.lang.String id -> id
    java.lang.String type -> type
    double timestamp -> timestamp
    org.webrtc.StatsReport$Value[] values -> values
    void <init>(java.lang.String,java.lang.String,double,org.webrtc.StatsReport$Value[]) -> <init>
    java.lang.String toString() -> toString
org.webrtc.StatsReport$Value -> org.webrtc.StatsReport$Value:
    java.lang.String name -> name
    java.lang.String value -> value
    void <init>(java.lang.String,java.lang.String) -> <init>
    java.lang.String toString() -> toString
org.webrtc.SurfaceEglRenderer -> org.webrtc.SurfaceEglRenderer:
    java.lang.String TAG -> TAG
    org.webrtc.RendererCommon$RendererEvents rendererEvents -> rendererEvents
    java.lang.Object layoutLock -> layoutLock
    boolean isRenderingPaused -> isRenderingPaused
    boolean isFirstFrameRendered -> isFirstFrameRendered
    int rotatedFrameWidth -> rotatedFrameWidth
    int rotatedFrameHeight -> rotatedFrameHeight
    int frameRotation -> frameRotation
    void <init>(java.lang.String) -> <init>
    void init(org.webrtc.EglBase$Context,org.webrtc.RendererCommon$RendererEvents,int[],org.webrtc.RendererCommon$GlDrawer) -> init
    void init(org.webrtc.EglBase$Context,int[],org.webrtc.RendererCommon$GlDrawer) -> init
    void setFpsReduction(float) -> setFpsReduction
    void disableFpsReduction() -> disableFpsReduction
    void pauseVideo() -> pauseVideo
    void onFrame(org.webrtc.VideoFrame) -> onFrame
    void surfaceCreated(android.view.SurfaceHolder) -> surfaceCreated
    void surfaceDestroyed(android.view.SurfaceHolder) -> surfaceDestroyed
    void surfaceChanged(android.view.SurfaceHolder,int,int,int) -> surfaceChanged
    void updateFrameDimensionsAndReportEvents(org.webrtc.VideoFrame) -> updateFrameDimensionsAndReportEvents
    void logD(java.lang.String) -> logD
org.webrtc.SurfaceEglRenderer$$Lambda$0 -> org.webrtc.SurfaceEglRenderer$$Lambda$0:
    java.util.concurrent.CountDownLatch arg$1 -> arg$1
    void <init>(java.util.concurrent.CountDownLatch) -> <init>
    java.lang.Runnable get$Lambda(java.util.concurrent.CountDownLatch) -> get$Lambda
    void run() -> run
org.webrtc.SurfaceTextureHelper -> org.webrtc.SurfaceTextureHelper:
    java.lang.String TAG -> TAG
    android.os.Handler handler -> handler
    org.webrtc.EglBase eglBase -> eglBase
    android.graphics.SurfaceTexture surfaceTexture -> surfaceTexture
    int oesTextureId -> oesTextureId
    org.webrtc.YuvConverter yuvConverter -> yuvConverter
    org.webrtc.TimestampAligner timestampAligner -> timestampAligner
    org.webrtc.VideoSink listener -> listener
    boolean hasPendingTexture -> hasPendingTexture
    boolean isTextureInUse -> isTextureInUse
    boolean isQuitting -> isQuitting
    int frameRotation -> frameRotation
    int textureWidth -> textureWidth
    int textureHeight -> textureHeight
    org.webrtc.VideoSink pendingListener -> pendingListener
    java.lang.Runnable setListenerRunnable -> setListenerRunnable
    org.webrtc.SurfaceTextureHelper create(java.lang.String,org.webrtc.EglBase$Context,boolean,org.webrtc.YuvConverter) -> create
    org.webrtc.SurfaceTextureHelper create(java.lang.String,org.webrtc.EglBase$Context) -> create
    org.webrtc.SurfaceTextureHelper create(java.lang.String,org.webrtc.EglBase$Context,boolean) -> create
    void <init>(org.webrtc.EglBase$Context,android.os.Handler,boolean,org.webrtc.YuvConverter) -> <init>
    void setOnFrameAvailableListener(android.graphics.SurfaceTexture,android.graphics.SurfaceTexture$OnFrameAvailableListener,android.os.Handler) -> setOnFrameAvailableListener
    void startListening(org.webrtc.VideoSink) -> startListening
    void stopListening() -> stopListening
    void setTextureSize(int,int) -> setTextureSize
    void setFrameRotation(int) -> setFrameRotation
    android.graphics.SurfaceTexture getSurfaceTexture() -> getSurfaceTexture
    android.os.Handler getHandler() -> getHandler
    void returnTextureFrame() -> returnTextureFrame
    boolean isTextureInUse() -> isTextureInUse
    void dispose() -> dispose
    org.webrtc.VideoFrame$I420Buffer textureToYuv(org.webrtc.VideoFrame$TextureBuffer) -> textureToYuv
    void updateTexImage() -> updateTexImage
    void tryDeliverTextureFrame() -> tryDeliverTextureFrame
    void release() -> release
    void lambda$dispose$5$SurfaceTextureHelper() -> lambda$dispose$5$SurfaceTextureHelper
    void lambda$returnTextureFrame$4$SurfaceTextureHelper() -> lambda$returnTextureFrame$4$SurfaceTextureHelper
    void lambda$setFrameRotation$3$SurfaceTextureHelper(int) -> lambda$setFrameRotation$3$SurfaceTextureHelper
    void lambda$setTextureSize$2$SurfaceTextureHelper(int,int) -> lambda$setTextureSize$2$SurfaceTextureHelper
    void lambda$stopListening$1$SurfaceTextureHelper() -> lambda$stopListening$1$SurfaceTextureHelper
    void lambda$new$0$SurfaceTextureHelper(android.graphics.SurfaceTexture) -> lambda$new$0$SurfaceTextureHelper
    void <init>(org.webrtc.EglBase$Context,android.os.Handler,boolean,org.webrtc.YuvConverter,org.webrtc.SurfaceTextureHelper$1) -> <init>
    org.webrtc.VideoSink access$100(org.webrtc.SurfaceTextureHelper) -> access$100
    org.webrtc.VideoSink access$202(org.webrtc.SurfaceTextureHelper,org.webrtc.VideoSink) -> access$202
    org.webrtc.VideoSink access$102(org.webrtc.SurfaceTextureHelper,org.webrtc.VideoSink) -> access$102
    boolean access$300(org.webrtc.SurfaceTextureHelper) -> access$300
    void access$400(org.webrtc.SurfaceTextureHelper) -> access$400
    boolean access$302(org.webrtc.SurfaceTextureHelper,boolean) -> access$302
    void bridge$lambda$0$SurfaceTextureHelper() -> bridge$lambda$0$SurfaceTextureHelper
org.webrtc.SurfaceTextureHelper$$Lambda$0 -> org.webrtc.SurfaceTextureHelper$$Lambda$0:
    org.webrtc.SurfaceTextureHelper arg$1 -> arg$1
    void <init>(org.webrtc.SurfaceTextureHelper) -> <init>
    void onFrameAvailable(android.graphics.SurfaceTexture) -> onFrameAvailable
org.webrtc.SurfaceTextureHelper$$Lambda$1 -> org.webrtc.SurfaceTextureHelper$$Lambda$1:
    org.webrtc.SurfaceTextureHelper arg$1 -> arg$1
    void <init>(org.webrtc.SurfaceTextureHelper) -> <init>
    void run() -> run
org.webrtc.SurfaceTextureHelper$$Lambda$2 -> org.webrtc.SurfaceTextureHelper$$Lambda$2:
    org.webrtc.SurfaceTextureHelper arg$1 -> arg$1
    int arg$2 -> arg$2
    int arg$3 -> arg$3
    void <init>(org.webrtc.SurfaceTextureHelper,int,int) -> <init>
    void run() -> run
org.webrtc.SurfaceTextureHelper$$Lambda$3 -> org.webrtc.SurfaceTextureHelper$$Lambda$3:
    org.webrtc.SurfaceTextureHelper arg$1 -> arg$1
    int arg$2 -> arg$2
    void <init>(org.webrtc.SurfaceTextureHelper,int) -> <init>
    void run() -> run
org.webrtc.SurfaceTextureHelper$$Lambda$4 -> org.webrtc.SurfaceTextureHelper$$Lambda$4:
    org.webrtc.SurfaceTextureHelper arg$1 -> arg$1
    void <init>(org.webrtc.SurfaceTextureHelper) -> <init>
    void run() -> run
org.webrtc.SurfaceTextureHelper$$Lambda$5 -> org.webrtc.SurfaceTextureHelper$$Lambda$5:
    org.webrtc.SurfaceTextureHelper arg$1 -> arg$1
    void <init>(org.webrtc.SurfaceTextureHelper) -> <init>
    void run() -> run
org.webrtc.SurfaceTextureHelper$$Lambda$6 -> org.webrtc.SurfaceTextureHelper$$Lambda$6:
    org.webrtc.SurfaceTextureHelper arg$1 -> arg$1
    void <init>(org.webrtc.SurfaceTextureHelper) -> <init>
    void run() -> run
org.webrtc.SurfaceTextureHelper$1 -> org.webrtc.SurfaceTextureHelper$1:
    org.webrtc.EglBase$Context val$sharedContext -> val$sharedContext
    android.os.Handler val$handler -> val$handler
    boolean val$alignTimestamps -> val$alignTimestamps
    org.webrtc.YuvConverter val$yuvConverter -> val$yuvConverter
    java.lang.String val$threadName -> val$threadName
    void <init>(org.webrtc.EglBase$Context,android.os.Handler,boolean,org.webrtc.YuvConverter,java.lang.String) -> <init>
    org.webrtc.SurfaceTextureHelper call() -> call
    java.lang.Object call() -> call
org.webrtc.SurfaceTextureHelper$2 -> org.webrtc.SurfaceTextureHelper$2:
    org.webrtc.SurfaceTextureHelper this$0 -> this$0
    void <init>(org.webrtc.SurfaceTextureHelper) -> <init>
    void run() -> run
org.webrtc.SurfaceViewRenderer -> org.webrtc.SurfaceViewRenderer:
    java.lang.String TAG -> TAG
    java.lang.String resourceName -> resourceName
    org.webrtc.RendererCommon$VideoLayoutMeasure videoLayoutMeasure -> videoLayoutMeasure
    org.webrtc.SurfaceEglRenderer eglRenderer -> eglRenderer
    org.webrtc.RendererCommon$RendererEvents rendererEvents -> rendererEvents
    int rotatedFrameWidth -> rotatedFrameWidth
    int rotatedFrameHeight -> rotatedFrameHeight
    boolean enableFixedSize -> enableFixedSize
    int surfaceWidth -> surfaceWidth
    int surfaceHeight -> surfaceHeight
    void <init>(android.content.Context) -> <init>
    void <init>(android.content.Context,android.util.AttributeSet) -> <init>
    void init(org.webrtc.EglBase$Context,org.webrtc.RendererCommon$RendererEvents) -> init
    void init(org.webrtc.EglBase$Context,org.webrtc.RendererCommon$RendererEvents,int[],org.webrtc.RendererCommon$GlDrawer) -> init
    void release() -> release
    void addFrameListener(org.webrtc.EglRenderer$FrameListener,float,org.webrtc.RendererCommon$GlDrawer) -> addFrameListener
    void addFrameListener(org.webrtc.EglRenderer$FrameListener,float) -> addFrameListener
    void removeFrameListener(org.webrtc.EglRenderer$FrameListener) -> removeFrameListener
    void setEnableHardwareScaler(boolean) -> setEnableHardwareScaler
    void setMirror(boolean) -> setMirror
    void setScalingType(org.webrtc.RendererCommon$ScalingType) -> setScalingType
    void setScalingType(org.webrtc.RendererCommon$ScalingType,org.webrtc.RendererCommon$ScalingType) -> setScalingType
    void setFpsReduction(float) -> setFpsReduction
    void disableFpsReduction() -> disableFpsReduction
    void pauseVideo() -> pauseVideo
    void onFrame(org.webrtc.VideoFrame) -> onFrame
    void onMeasure(int,int) -> onMeasure
    void onLayout(boolean,int,int,int,int) -> onLayout
    void updateSurfaceSize() -> updateSurfaceSize
    void surfaceCreated(android.view.SurfaceHolder) -> surfaceCreated
    void surfaceDestroyed(android.view.SurfaceHolder) -> surfaceDestroyed
    void surfaceChanged(android.view.SurfaceHolder,int,int,int) -> surfaceChanged
    java.lang.String getResourceName() -> getResourceName
    void clearImage() -> clearImage
    void onFirstFrameRendered() -> onFirstFrameRendered
    void onFrameResolutionChanged(int,int,int) -> onFrameResolutionChanged
    void postOrRun(java.lang.Runnable) -> postOrRun
    void logD(java.lang.String) -> logD
    void lambda$onFrameResolutionChanged$0$SurfaceViewRenderer(int,int) -> lambda$onFrameResolutionChanged$0$SurfaceViewRenderer
org.webrtc.SurfaceViewRenderer$$Lambda$0 -> org.webrtc.SurfaceViewRenderer$$Lambda$0:
    org.webrtc.SurfaceViewRenderer arg$1 -> arg$1
    int arg$2 -> arg$2
    int arg$3 -> arg$3
    void <init>(org.webrtc.SurfaceViewRenderer,int,int) -> <init>
    void run() -> run
org.webrtc.TextureBufferImpl -> org.webrtc.TextureBufferImpl:
    int unscaledWidth -> unscaledWidth
    int unscaledHeight -> unscaledHeight
    int width -> width
    int height -> height
    org.webrtc.VideoFrame$TextureBuffer$Type type -> type
    int id -> id
    android.graphics.Matrix transformMatrix -> transformMatrix
    android.os.Handler toI420Handler -> toI420Handler
    org.webrtc.YuvConverter yuvConverter -> yuvConverter
    org.webrtc.RefCountDelegate refCountDelegate -> refCountDelegate
    void <init>(int,int,org.webrtc.VideoFrame$TextureBuffer$Type,int,android.graphics.Matrix,android.os.Handler,org.webrtc.YuvConverter,java.lang.Runnable) -> <init>
    void <init>(int,int,int,int,org.webrtc.VideoFrame$TextureBuffer$Type,int,android.graphics.Matrix,android.os.Handler,org.webrtc.YuvConverter,java.lang.Runnable) -> <init>
    org.webrtc.VideoFrame$TextureBuffer$Type getType() -> getType
    int getTextureId() -> getTextureId
    android.graphics.Matrix getTransformMatrix() -> getTransformMatrix
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    org.webrtc.VideoFrame$I420Buffer toI420() -> toI420
    void retain() -> retain
    void release() -> release
    org.webrtc.VideoFrame$Buffer cropAndScale(int,int,int,int,int,int) -> cropAndScale
    int getUnscaledWidth() -> getUnscaledWidth
    int getUnscaledHeight() -> getUnscaledHeight
    android.os.Handler getToI420Handler() -> getToI420Handler
    org.webrtc.YuvConverter getYuvConverter() -> getYuvConverter
    org.webrtc.TextureBufferImpl applyTransformMatrix(android.graphics.Matrix,int,int) -> applyTransformMatrix
    org.webrtc.TextureBufferImpl applyTransformMatrix(android.graphics.Matrix,int,int,int,int) -> applyTransformMatrix
    org.webrtc.VideoFrame$I420Buffer lambda$toI420$0$TextureBufferImpl() -> lambda$toI420$0$TextureBufferImpl
org.webrtc.TextureBufferImpl$$Lambda$0 -> org.webrtc.TextureBufferImpl$$Lambda$0:
    org.webrtc.TextureBufferImpl arg$1 -> arg$1
    void <init>(org.webrtc.TextureBufferImpl) -> <init>
    java.lang.Object call() -> call
org.webrtc.TextureBufferImpl$$Lambda$1 -> org.webrtc.TextureBufferImpl$$Lambda$1:
    org.webrtc.TextureBufferImpl arg$1 -> arg$1
    void <init>(org.webrtc.TextureBufferImpl) -> <init>
    void run() -> run
org.webrtc.ThreadUtils -> org.webrtc.ThreadUtils:
    void <init>() -> <init>
    void checkIsOnMainThread() -> checkIsOnMainThread
    void executeUninterruptibly(org.webrtc.ThreadUtils$BlockingOperation) -> executeUninterruptibly
    boolean joinUninterruptibly(java.lang.Thread,long) -> joinUninterruptibly
    void joinUninterruptibly(java.lang.Thread) -> joinUninterruptibly
    void awaitUninterruptibly(java.util.concurrent.CountDownLatch) -> awaitUninterruptibly
    boolean awaitUninterruptibly(java.util.concurrent.CountDownLatch,long) -> awaitUninterruptibly
    java.lang.Object invokeAtFrontUninterruptibly(android.os.Handler,java.util.concurrent.Callable) -> invokeAtFrontUninterruptibly
    void invokeAtFrontUninterruptibly(android.os.Handler,java.lang.Runnable) -> invokeAtFrontUninterruptibly
    java.lang.StackTraceElement[] concatStackTraces(java.lang.StackTraceElement[],java.lang.StackTraceElement[]) -> concatStackTraces
org.webrtc.ThreadUtils$1 -> org.webrtc.ThreadUtils$1:
    java.lang.Thread val$thread -> val$thread
    void <init>(java.lang.Thread) -> <init>
    void run() -> run
org.webrtc.ThreadUtils$1CaughtException -> org.webrtc.ThreadUtils$1CaughtException:
    java.lang.Exception e -> e
    void <init>() -> <init>
org.webrtc.ThreadUtils$1Result -> org.webrtc.ThreadUtils$1Result:
    java.lang.Object value -> value
    void <init>() -> <init>
org.webrtc.ThreadUtils$2 -> org.webrtc.ThreadUtils$2:
    java.util.concurrent.CountDownLatch val$latch -> val$latch
    void <init>(java.util.concurrent.CountDownLatch) -> <init>
    void run() -> run
org.webrtc.ThreadUtils$3 -> org.webrtc.ThreadUtils$3:
    org.webrtc.ThreadUtils$1Result val$result -> val$result
    java.util.concurrent.Callable val$callable -> val$callable
    org.webrtc.ThreadUtils$1CaughtException val$caughtException -> val$caughtException
    java.util.concurrent.CountDownLatch val$barrier -> val$barrier
    void <init>(org.webrtc.ThreadUtils$1Result,java.util.concurrent.Callable,org.webrtc.ThreadUtils$1CaughtException,java.util.concurrent.CountDownLatch) -> <init>
    void run() -> run
org.webrtc.ThreadUtils$4 -> org.webrtc.ThreadUtils$4:
    java.lang.Runnable val$runner -> val$runner
    void <init>(java.lang.Runnable) -> <init>
    java.lang.Void call() -> call
    java.lang.Object call() -> call
org.webrtc.ThreadUtils$BlockingOperation -> org.webrtc.ThreadUtils$BlockingOperation:
    void run() -> run
org.webrtc.ThreadUtils$ThreadChecker -> org.webrtc.ThreadUtils$ThreadChecker:
    java.lang.Thread thread -> thread
    void <init>() -> <init>
    void checkIsOnValidThread() -> checkIsOnValidThread
    void detachThread() -> detachThread
org.webrtc.TimestampAligner -> org.webrtc.TimestampAligner:
    long nativeTimestampAligner -> nativeTimestampAligner
    void <init>() -> <init>
    long getRtcTimeNanos() -> getRtcTimeNanos
    long translateTimestamp(long) -> translateTimestamp
    void dispose() -> dispose
    void checkNativeAlignerExists() -> checkNativeAlignerExists
    long nativeRtcTimeNanos() -> nativeRtcTimeNanos
    long nativeCreateTimestampAligner() -> nativeCreateTimestampAligner
    void nativeReleaseTimestampAligner(long) -> nativeReleaseTimestampAligner
    long nativeTranslateTimestamp(long,long) -> nativeTranslateTimestamp
org.webrtc.TurnCustomizer -> org.webrtc.TurnCustomizer:
    long nativeTurnCustomizer -> nativeTurnCustomizer
    void <init>(long) -> <init>
    void dispose() -> dispose
    void nativeFreeTurnCustomizer(long) -> nativeFreeTurnCustomizer
    long getNativeTurnCustomizer() -> getNativeTurnCustomizer
    void checkTurnCustomizerExists() -> checkTurnCustomizerExists
org.webrtc.VideoCapturer -> org.webrtc.VideoCapturer:
    void initialize(org.webrtc.SurfaceTextureHelper,android.content.Context,org.webrtc.CapturerObserver) -> initialize
    void startCapture(int,int,int) -> startCapture
    void stopCapture() -> stopCapture
    void changeCaptureFormat(int,int,int) -> changeCaptureFormat
    void dispose() -> dispose
    boolean isScreencast() -> isScreencast
org.webrtc.VideoCodecInfo -> org.webrtc.VideoCodecInfo:
    java.lang.String H264_FMTP_PROFILE_LEVEL_ID -> H264_FMTP_PROFILE_LEVEL_ID
    java.lang.String H264_FMTP_LEVEL_ASYMMETRY_ALLOWED -> H264_FMTP_LEVEL_ASYMMETRY_ALLOWED
    java.lang.String H264_FMTP_PACKETIZATION_MODE -> H264_FMTP_PACKETIZATION_MODE
    java.lang.String H264_PROFILE_CONSTRAINED_BASELINE -> H264_PROFILE_CONSTRAINED_BASELINE
    java.lang.String H264_PROFILE_CONSTRAINED_HIGH -> H264_PROFILE_CONSTRAINED_HIGH
    java.lang.String H264_LEVEL_3_1 -> H264_LEVEL_3_1
    java.lang.String H264_CONSTRAINED_HIGH_3_1 -> H264_CONSTRAINED_HIGH_3_1
    java.lang.String H264_CONSTRAINED_BASELINE_3_1 -> H264_CONSTRAINED_BASELINE_3_1
    java.lang.String name -> name
    java.util.Map params -> params
    int payload -> payload
    void <init>(java.lang.String,java.util.Map) -> <init>
    void <init>(int,java.lang.String,java.util.Map) -> <init>
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String getName() -> getName
    java.util.Map getParams() -> getParams
org.webrtc.VideoCodecStatus -> org.webrtc.VideoCodecStatus:
    org.webrtc.VideoCodecStatus REQUEST_SLI -> REQUEST_SLI
    org.webrtc.VideoCodecStatus NO_OUTPUT -> NO_OUTPUT
    org.webrtc.VideoCodecStatus OK -> OK
    org.webrtc.VideoCodecStatus ERROR -> ERROR
    org.webrtc.VideoCodecStatus LEVEL_EXCEEDED -> LEVEL_EXCEEDED
    org.webrtc.VideoCodecStatus MEMORY -> MEMORY
    org.webrtc.VideoCodecStatus ERR_PARAMETER -> ERR_PARAMETER
    org.webrtc.VideoCodecStatus ERR_SIZE -> ERR_SIZE
    org.webrtc.VideoCodecStatus TIMEOUT -> TIMEOUT
    org.webrtc.VideoCodecStatus UNINITIALIZED -> UNINITIALIZED
    org.webrtc.VideoCodecStatus ERR_REQUEST_SLI -> ERR_REQUEST_SLI
    org.webrtc.VideoCodecStatus FALLBACK_SOFTWARE -> FALLBACK_SOFTWARE
    org.webrtc.VideoCodecStatus TARGET_BITRATE_OVERSHOOT -> TARGET_BITRATE_OVERSHOOT
    int number -> number
    org.webrtc.VideoCodecStatus[] $VALUES -> $VALUES
    org.webrtc.VideoCodecStatus[] values() -> values
    org.webrtc.VideoCodecStatus valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    int getNumber() -> getNumber
    void <clinit>() -> <clinit>
org.webrtc.VideoCodecType -> org.webrtc.VideoCodecType:
    org.webrtc.VideoCodecType VP8 -> VP8
    org.webrtc.VideoCodecType VP9 -> VP9
    org.webrtc.VideoCodecType H264 -> H264
    java.lang.String mimeType -> mimeType
    org.webrtc.VideoCodecType[] $VALUES -> $VALUES
    org.webrtc.VideoCodecType[] values() -> values
    org.webrtc.VideoCodecType valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    java.lang.String mimeType() -> mimeType
    void <clinit>() -> <clinit>
org.webrtc.VideoDecoder -> org.webrtc.VideoDecoder:
    long createNativeVideoDecoder() -> createNativeVideoDecoder
    org.webrtc.VideoCodecStatus initDecode(org.webrtc.VideoDecoder$Settings,org.webrtc.VideoDecoder$Callback) -> initDecode
    org.webrtc.VideoCodecStatus release() -> release
    org.webrtc.VideoCodecStatus decode(org.webrtc.EncodedImage,org.webrtc.VideoDecoder$DecodeInfo) -> decode
    boolean getPrefersLateDecoding() -> getPrefersLateDecoding
    java.lang.String getImplementationName() -> getImplementationName
org.webrtc.VideoDecoder$$CC -> org.webrtc.VideoDecoder$$CC:
    long createNativeVideoDecoder(org.webrtc.VideoDecoder) -> createNativeVideoDecoder
org.webrtc.VideoDecoder$Callback -> org.webrtc.VideoDecoder$Callback:
    void onDecodedFrame(org.webrtc.VideoFrame,java.lang.Integer,java.lang.Integer) -> onDecodedFrame
org.webrtc.VideoDecoder$DecodeInfo -> org.webrtc.VideoDecoder$DecodeInfo:
    boolean isMissingFrames -> isMissingFrames
    long renderTimeMs -> renderTimeMs
    void <init>(boolean,long) -> <init>
org.webrtc.VideoDecoder$Settings -> org.webrtc.VideoDecoder$Settings:
    int numberOfCores -> numberOfCores
    int width -> width
    int height -> height
    void <init>(int,int,int) -> <init>
org.webrtc.VideoDecoderFactory -> org.webrtc.VideoDecoderFactory:
    org.webrtc.VideoDecoder createDecoder(java.lang.String) -> createDecoder
    org.webrtc.VideoDecoder createDecoder(org.webrtc.VideoCodecInfo) -> createDecoder
    org.webrtc.VideoCodecInfo[] getSupportedCodecs() -> getSupportedCodecs
org.webrtc.VideoDecoderFactory$$CC -> org.webrtc.VideoDecoderFactory$$CC:
    org.webrtc.VideoDecoder createDecoder(org.webrtc.VideoDecoderFactory,java.lang.String) -> createDecoder
    org.webrtc.VideoDecoder createDecoder(org.webrtc.VideoDecoderFactory,org.webrtc.VideoCodecInfo) -> createDecoder
    org.webrtc.VideoCodecInfo[] getSupportedCodecs(org.webrtc.VideoDecoderFactory) -> getSupportedCodecs
org.webrtc.VideoDecoderFallback -> org.webrtc.VideoDecoderFallback:
    org.webrtc.VideoDecoder fallback -> fallback
    org.webrtc.VideoDecoder primary -> primary
    void <init>(org.webrtc.VideoDecoder,org.webrtc.VideoDecoder) -> <init>
    long createNativeVideoDecoder() -> createNativeVideoDecoder
    long nativeCreateDecoder(org.webrtc.VideoDecoder,org.webrtc.VideoDecoder) -> nativeCreateDecoder
    java.lang.String getImplementationName() -> getImplementationName
    boolean getPrefersLateDecoding() -> getPrefersLateDecoding
    org.webrtc.VideoCodecStatus decode(org.webrtc.EncodedImage,org.webrtc.VideoDecoder$DecodeInfo) -> decode
    org.webrtc.VideoCodecStatus release() -> release
    org.webrtc.VideoCodecStatus initDecode(org.webrtc.VideoDecoder$Settings,org.webrtc.VideoDecoder$Callback) -> initDecode
org.webrtc.VideoDecoderWrapper -> org.webrtc.VideoDecoderWrapper:
    void <init>() -> <init>
    org.webrtc.VideoDecoder$Callback createDecoderCallback(long) -> createDecoderCallback
    void nativeOnDecodedFrame(long,org.webrtc.VideoFrame,java.lang.Integer,java.lang.Integer) -> nativeOnDecodedFrame
    void lambda$createDecoderCallback$0$VideoDecoderWrapper(long,org.webrtc.VideoFrame,java.lang.Integer,java.lang.Integer) -> lambda$createDecoderCallback$0$VideoDecoderWrapper
org.webrtc.VideoDecoderWrapper$$Lambda$0 -> org.webrtc.VideoDecoderWrapper$$Lambda$0:
    long arg$1 -> arg$1
    void <init>(long) -> <init>
    void onDecodedFrame(org.webrtc.VideoFrame,java.lang.Integer,java.lang.Integer) -> onDecodedFrame
org.webrtc.VideoEncoder -> org.webrtc.VideoEncoder:
    long createNativeVideoEncoder() -> createNativeVideoEncoder
    boolean isHardwareEncoder() -> isHardwareEncoder
    org.webrtc.VideoCodecStatus initEncode(org.webrtc.VideoEncoder$Settings,org.webrtc.VideoEncoder$Callback) -> initEncode
    org.webrtc.VideoCodecStatus release() -> release
    org.webrtc.VideoCodecStatus encode(org.webrtc.VideoFrame,org.webrtc.VideoEncoder$EncodeInfo) -> encode
    org.webrtc.VideoCodecStatus setRateAllocation(org.webrtc.VideoEncoder$BitrateAllocation,int) -> setRateAllocation
    org.webrtc.VideoEncoder$ScalingSettings getScalingSettings() -> getScalingSettings
    java.lang.String getImplementationName() -> getImplementationName
org.webrtc.VideoEncoder$$CC -> org.webrtc.VideoEncoder$$CC:
    long createNativeVideoEncoder(org.webrtc.VideoEncoder) -> createNativeVideoEncoder
    boolean isHardwareEncoder(org.webrtc.VideoEncoder) -> isHardwareEncoder
org.webrtc.VideoEncoder$BitrateAllocation -> org.webrtc.VideoEncoder$BitrateAllocation:
    int[][] bitratesBbs -> bitratesBbs
    void <init>(int[][]) -> <init>
    int getSum() -> getSum
org.webrtc.VideoEncoder$Callback -> org.webrtc.VideoEncoder$Callback:
    void onEncodedFrame(org.webrtc.EncodedImage,org.webrtc.VideoEncoder$CodecSpecificInfo) -> onEncodedFrame
org.webrtc.VideoEncoder$Capabilities -> org.webrtc.VideoEncoder$Capabilities:
    boolean lossNotification -> lossNotification
    void <init>(boolean) -> <init>
org.webrtc.VideoEncoder$CodecSpecificInfo -> org.webrtc.VideoEncoder$CodecSpecificInfo:
    void <init>() -> <init>
org.webrtc.VideoEncoder$CodecSpecificInfoH264 -> org.webrtc.VideoEncoder$CodecSpecificInfoH264:
    void <init>() -> <init>
org.webrtc.VideoEncoder$CodecSpecificInfoVP8 -> org.webrtc.VideoEncoder$CodecSpecificInfoVP8:
    void <init>() -> <init>
org.webrtc.VideoEncoder$CodecSpecificInfoVP9 -> org.webrtc.VideoEncoder$CodecSpecificInfoVP9:
    void <init>() -> <init>
org.webrtc.VideoEncoder$EncodeInfo -> org.webrtc.VideoEncoder$EncodeInfo:
    org.webrtc.EncodedImage$FrameType[] frameTypes -> frameTypes
    void <init>(org.webrtc.EncodedImage$FrameType[]) -> <init>
org.webrtc.VideoEncoder$ScalingSettings -> org.webrtc.VideoEncoder$ScalingSettings:
    boolean on -> on
    java.lang.Integer low -> low
    java.lang.Integer high -> high
    org.webrtc.VideoEncoder$ScalingSettings OFF -> OFF
    void <init>(int,int) -> <init>
    void <init>() -> <init>
    void <init>(boolean) -> <init>
    void <init>(boolean,int,int) -> <init>
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
org.webrtc.VideoEncoder$Settings -> org.webrtc.VideoEncoder$Settings:
    int numberOfCores -> numberOfCores
    int width -> width
    int height -> height
    int startBitrate -> startBitrate
    int maxFramerate -> maxFramerate
    int numberOfSimulcastStreams -> numberOfSimulcastStreams
    boolean automaticResizeOn -> automaticResizeOn
    org.webrtc.VideoEncoder$Capabilities capabilities -> capabilities
    void <init>(int,int,int,int,int,int,boolean) -> <init>
    void <init>(int,int,int,int,int,int,boolean,org.webrtc.VideoEncoder$Capabilities) -> <init>
org.webrtc.VideoEncoderFactory -> org.webrtc.VideoEncoderFactory:
    org.webrtc.VideoEncoder createEncoder(org.webrtc.VideoCodecInfo) -> createEncoder
    org.webrtc.VideoCodecInfo[] getSupportedCodecs() -> getSupportedCodecs
org.webrtc.VideoEncoderFallback -> org.webrtc.VideoEncoderFallback:
    org.webrtc.VideoEncoder fallback -> fallback
    org.webrtc.VideoEncoder primary -> primary
    void <init>(org.webrtc.VideoEncoder,org.webrtc.VideoEncoder) -> <init>
    long createNativeVideoEncoder() -> createNativeVideoEncoder
    boolean isHardwareEncoder() -> isHardwareEncoder
    long nativeCreateEncoder(org.webrtc.VideoEncoder,org.webrtc.VideoEncoder) -> nativeCreateEncoder
    java.lang.String getImplementationName() -> getImplementationName
    org.webrtc.VideoEncoder$ScalingSettings getScalingSettings() -> getScalingSettings
    org.webrtc.VideoCodecStatus setRateAllocation(org.webrtc.VideoEncoder$BitrateAllocation,int) -> setRateAllocation
    org.webrtc.VideoCodecStatus encode(org.webrtc.VideoFrame,org.webrtc.VideoEncoder$EncodeInfo) -> encode
    org.webrtc.VideoCodecStatus release() -> release
    org.webrtc.VideoCodecStatus initEncode(org.webrtc.VideoEncoder$Settings,org.webrtc.VideoEncoder$Callback) -> initEncode
org.webrtc.VideoEncoderWrapper -> org.webrtc.VideoEncoderWrapper:
    void <init>() -> <init>
    boolean getScalingSettingsOn(org.webrtc.VideoEncoder$ScalingSettings) -> getScalingSettingsOn
    java.lang.Integer getScalingSettingsLow(org.webrtc.VideoEncoder$ScalingSettings) -> getScalingSettingsLow
    java.lang.Integer getScalingSettingsHigh(org.webrtc.VideoEncoder$ScalingSettings) -> getScalingSettingsHigh
    org.webrtc.VideoEncoder$Callback createEncoderCallback(long) -> createEncoderCallback
    void nativeOnEncodedFrame(long,java.nio.ByteBuffer,int,int,long,int,int,boolean,java.lang.Integer) -> nativeOnEncodedFrame
    void lambda$createEncoderCallback$0$VideoEncoderWrapper(long,org.webrtc.EncodedImage,org.webrtc.VideoEncoder$CodecSpecificInfo) -> lambda$createEncoderCallback$0$VideoEncoderWrapper
org.webrtc.VideoEncoderWrapper$$Lambda$0 -> org.webrtc.VideoEncoderWrapper$$Lambda$0:
    long arg$1 -> arg$1
    void <init>(long) -> <init>
    void onEncodedFrame(org.webrtc.EncodedImage,org.webrtc.VideoEncoder$CodecSpecificInfo) -> onEncodedFrame
org.webrtc.VideoFileRenderer -> org.webrtc.VideoFileRenderer:
    java.lang.String TAG -> TAG
    android.os.HandlerThread renderThread -> renderThread
    android.os.Handler renderThreadHandler -> renderThreadHandler
    android.os.HandlerThread fileThread -> fileThread
    android.os.Handler fileThreadHandler -> fileThreadHandler
    java.io.FileOutputStream videoOutFile -> videoOutFile
    java.lang.String outputFileName -> outputFileName
    int outputFileWidth -> outputFileWidth
    int outputFileHeight -> outputFileHeight
    int outputFrameSize -> outputFrameSize
    java.nio.ByteBuffer outputFrameBuffer -> outputFrameBuffer
    org.webrtc.EglBase eglBase -> eglBase
    org.webrtc.YuvConverter yuvConverter -> yuvConverter
    int frameCount -> frameCount
    void <init>(java.lang.String,int,int,org.webrtc.EglBase$Context) -> <init>
    void onFrame(org.webrtc.VideoFrame) -> onFrame
    void renderFrameOnRenderThread(org.webrtc.VideoFrame) -> renderFrameOnRenderThread
    void release() -> release
    void lambda$release$3$VideoFileRenderer() -> lambda$release$3$VideoFileRenderer
    void lambda$release$2$VideoFileRenderer(java.util.concurrent.CountDownLatch) -> lambda$release$2$VideoFileRenderer
    void lambda$renderFrameOnRenderThread$1$VideoFileRenderer(org.webrtc.VideoFrame$I420Buffer,org.webrtc.VideoFrame) -> lambda$renderFrameOnRenderThread$1$VideoFileRenderer
    void lambda$onFrame$0$VideoFileRenderer(org.webrtc.VideoFrame) -> lambda$onFrame$0$VideoFileRenderer
    org.webrtc.EglBase access$002(org.webrtc.VideoFileRenderer,org.webrtc.EglBase) -> access$002
    org.webrtc.EglBase access$000(org.webrtc.VideoFileRenderer) -> access$000
    org.webrtc.YuvConverter access$102(org.webrtc.VideoFileRenderer,org.webrtc.YuvConverter) -> access$102
org.webrtc.VideoFileRenderer$$Lambda$0 -> org.webrtc.VideoFileRenderer$$Lambda$0:
    org.webrtc.VideoFileRenderer arg$1 -> arg$1
    org.webrtc.VideoFrame arg$2 -> arg$2
    void <init>(org.webrtc.VideoFileRenderer,org.webrtc.VideoFrame) -> <init>
    void run() -> run
org.webrtc.VideoFileRenderer$$Lambda$1 -> org.webrtc.VideoFileRenderer$$Lambda$1:
    org.webrtc.VideoFileRenderer arg$1 -> arg$1
    org.webrtc.VideoFrame$I420Buffer arg$2 -> arg$2
    org.webrtc.VideoFrame arg$3 -> arg$3
    void <init>(org.webrtc.VideoFileRenderer,org.webrtc.VideoFrame$I420Buffer,org.webrtc.VideoFrame) -> <init>
    void run() -> run
org.webrtc.VideoFileRenderer$$Lambda$2 -> org.webrtc.VideoFileRenderer$$Lambda$2:
    org.webrtc.VideoFileRenderer arg$1 -> arg$1
    java.util.concurrent.CountDownLatch arg$2 -> arg$2
    void <init>(org.webrtc.VideoFileRenderer,java.util.concurrent.CountDownLatch) -> <init>
    void run() -> run
org.webrtc.VideoFileRenderer$$Lambda$3 -> org.webrtc.VideoFileRenderer$$Lambda$3:
    org.webrtc.VideoFileRenderer arg$1 -> arg$1
    void <init>(org.webrtc.VideoFileRenderer) -> <init>
    void run() -> run
org.webrtc.VideoFileRenderer$1 -> org.webrtc.VideoFileRenderer$1:
    org.webrtc.EglBase$Context val$sharedContext -> val$sharedContext
    org.webrtc.VideoFileRenderer this$0 -> this$0
    void <init>(org.webrtc.VideoFileRenderer,org.webrtc.EglBase$Context) -> <init>
    void run() -> run
org.webrtc.VideoFrame -> org.webrtc.VideoFrame:
    org.webrtc.VideoFrame$Buffer buffer -> buffer
    int rotation -> rotation
    long timestampNs -> timestampNs
    void <init>(org.webrtc.VideoFrame$Buffer,int,long) -> <init>
    org.webrtc.VideoFrame$Buffer getBuffer() -> getBuffer
    int getRotation() -> getRotation
    long getTimestampNs() -> getTimestampNs
    int getRotatedWidth() -> getRotatedWidth
    int getRotatedHeight() -> getRotatedHeight
    void retain() -> retain
    void release() -> release
org.webrtc.VideoFrame$Buffer -> org.webrtc.VideoFrame$Buffer:
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    org.webrtc.VideoFrame$I420Buffer toI420() -> toI420
    void retain() -> retain
    void release() -> release
    org.webrtc.VideoFrame$Buffer cropAndScale(int,int,int,int,int,int) -> cropAndScale
org.webrtc.VideoFrame$I420Buffer -> org.webrtc.VideoFrame$I420Buffer:
    java.nio.ByteBuffer getDataY() -> getDataY
    java.nio.ByteBuffer getDataU() -> getDataU
    java.nio.ByteBuffer getDataV() -> getDataV
    int getStrideY() -> getStrideY
    int getStrideU() -> getStrideU
    int getStrideV() -> getStrideV
org.webrtc.VideoFrame$TextureBuffer -> org.webrtc.VideoFrame$TextureBuffer:
    org.webrtc.VideoFrame$TextureBuffer$Type getType() -> getType
    int getTextureId() -> getTextureId
    android.graphics.Matrix getTransformMatrix() -> getTransformMatrix
org.webrtc.VideoFrame$TextureBuffer$Type -> org.webrtc.VideoFrame$TextureBuffer$Type:
    org.webrtc.VideoFrame$TextureBuffer$Type OES -> OES
    org.webrtc.VideoFrame$TextureBuffer$Type RGB -> RGB
    int glTarget -> glTarget
    org.webrtc.VideoFrame$TextureBuffer$Type[] $VALUES -> $VALUES
    org.webrtc.VideoFrame$TextureBuffer$Type[] values() -> values
    org.webrtc.VideoFrame$TextureBuffer$Type valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int,int) -> <init>
    int getGlTarget() -> getGlTarget
    void <clinit>() -> <clinit>
org.webrtc.VideoFrameDrawer -> org.webrtc.VideoFrameDrawer:
    java.lang.String TAG -> TAG
    float[] srcPoints -> srcPoints
    float[] dstPoints -> dstPoints
    android.graphics.Point renderSize -> renderSize
    int renderWidth -> renderWidth
    int renderHeight -> renderHeight
    org.webrtc.VideoFrameDrawer$YuvUploader yuvUploader -> yuvUploader
    org.webrtc.VideoFrame lastI420Frame -> lastI420Frame
    android.graphics.Matrix renderMatrix -> renderMatrix
    void <init>() -> <init>
    void drawTexture(org.webrtc.RendererCommon$GlDrawer,org.webrtc.VideoFrame$TextureBuffer,android.graphics.Matrix,int,int,int,int,int,int) -> drawTexture
    int distance(float,float,float,float) -> distance
    void calculateTransformedRenderSize(int,int,android.graphics.Matrix) -> calculateTransformedRenderSize
    void drawFrame(org.webrtc.VideoFrame,org.webrtc.RendererCommon$GlDrawer) -> drawFrame
    void drawFrame(org.webrtc.VideoFrame,org.webrtc.RendererCommon$GlDrawer,android.graphics.Matrix) -> drawFrame
    void drawFrame(org.webrtc.VideoFrame,org.webrtc.RendererCommon$GlDrawer,android.graphics.Matrix,int,int,int,int) -> drawFrame
    org.webrtc.VideoFrame$Buffer prepareBufferForViewportSize(org.webrtc.VideoFrame$Buffer,int,int) -> prepareBufferForViewportSize
    void release() -> release
    void <clinit>() -> <clinit>
org.webrtc.VideoFrameDrawer$1 -> org.webrtc.VideoFrameDrawer$1:
    int[] $SwitchMap$org$webrtc$VideoFrame$TextureBuffer$Type -> $SwitchMap$org$webrtc$VideoFrame$TextureBuffer$Type
    void <clinit>() -> <clinit>
org.webrtc.VideoFrameDrawer$YuvUploader -> org.webrtc.VideoFrameDrawer$YuvUploader:
    java.nio.ByteBuffer copyBuffer -> copyBuffer
    int[] yuvTextures -> yuvTextures
    void <init>() -> <init>
    int[] uploadYuvData(int,int,int[],java.nio.ByteBuffer[]) -> uploadYuvData
    int[] uploadFromBuffer(org.webrtc.VideoFrame$I420Buffer) -> uploadFromBuffer
    int[] getYuvTextures() -> getYuvTextures
    void release() -> release
    void <init>(org.webrtc.VideoFrameDrawer$1) -> <init>
org.webrtc.VideoProcessor -> org.webrtc.VideoProcessor:
    void onFrameCaptured(org.webrtc.VideoFrame,org.webrtc.VideoProcessor$FrameAdaptationParameters) -> onFrameCaptured
    void setSink(org.webrtc.VideoSink) -> setSink
org.webrtc.VideoProcessor$$CC -> org.webrtc.VideoProcessor$$CC:
    void onFrameCaptured(org.webrtc.VideoProcessor,org.webrtc.VideoFrame,org.webrtc.VideoProcessor$FrameAdaptationParameters) -> onFrameCaptured
    org.webrtc.VideoFrame applyFrameAdaptationParameters$$STATIC$$(org.webrtc.VideoFrame,org.webrtc.VideoProcessor$FrameAdaptationParameters) -> applyFrameAdaptationParameters$$STATIC$$
org.webrtc.VideoProcessor$FrameAdaptationParameters -> org.webrtc.VideoProcessor$FrameAdaptationParameters:
    int cropX -> cropX
    int cropY -> cropY
    int cropWidth -> cropWidth
    int cropHeight -> cropHeight
    int scaleWidth -> scaleWidth
    int scaleHeight -> scaleHeight
    long timestampNs -> timestampNs
    boolean drop -> drop
    void <init>(int,int,int,int,int,int,long,boolean) -> <init>
org.webrtc.VideoSink -> org.webrtc.VideoSink:
    void onFrame(org.webrtc.VideoFrame) -> onFrame
org.webrtc.VideoSource -> org.webrtc.VideoSource:
    org.webrtc.NativeAndroidVideoTrackSource nativeAndroidVideoTrackSource -> nativeAndroidVideoTrackSource
    java.lang.Object videoProcessorLock -> videoProcessorLock
    org.webrtc.VideoProcessor videoProcessor -> videoProcessor
    boolean isCapturerRunning -> isCapturerRunning
    org.webrtc.CapturerObserver capturerObserver -> capturerObserver
    void <init>(long) -> <init>
    void adaptOutputFormat(int,int,int) -> adaptOutputFormat
    void adaptOutputFormat(int,int,int,int,int) -> adaptOutputFormat
    void adaptOutputFormat(org.webrtc.VideoSource$AspectRatio,java.lang.Integer,org.webrtc.VideoSource$AspectRatio,java.lang.Integer,java.lang.Integer) -> adaptOutputFormat
    void setVideoProcessor(org.webrtc.VideoProcessor) -> setVideoProcessor
    org.webrtc.CapturerObserver getCapturerObserver() -> getCapturerObserver
    long getNativeVideoTrackSource() -> getNativeVideoTrackSource
    void dispose() -> dispose
    org.webrtc.NativeAndroidVideoTrackSource access$000(org.webrtc.VideoSource) -> access$000
    java.lang.Object access$100(org.webrtc.VideoSource) -> access$100
    boolean access$202(org.webrtc.VideoSource,boolean) -> access$202
    org.webrtc.VideoProcessor access$300(org.webrtc.VideoSource) -> access$300
org.webrtc.VideoSource$$Lambda$0 -> org.webrtc.VideoSource$$Lambda$0:
    org.webrtc.NativeAndroidVideoTrackSource arg$1 -> arg$1
    void <init>(org.webrtc.NativeAndroidVideoTrackSource) -> <init>
    org.webrtc.VideoSink get$Lambda(org.webrtc.NativeAndroidVideoTrackSource) -> get$Lambda
    void onFrame(org.webrtc.VideoFrame) -> onFrame
org.webrtc.VideoSource$1 -> org.webrtc.VideoSource$1:
    org.webrtc.VideoSource this$0 -> this$0
    void <init>(org.webrtc.VideoSource) -> <init>
    void onCapturerStarted(boolean) -> onCapturerStarted
    void onCapturerStopped() -> onCapturerStopped
    void onFrameCaptured(org.webrtc.VideoFrame) -> onFrameCaptured
org.webrtc.VideoSource$AspectRatio -> org.webrtc.VideoSource$AspectRatio:
    org.webrtc.VideoSource$AspectRatio UNDEFINED -> UNDEFINED
    int width -> width
    int height -> height
    void <init>(int,int) -> <init>
    void <clinit>() -> <clinit>
org.webrtc.VideoTrack -> org.webrtc.VideoTrack:
    java.util.IdentityHashMap sinks -> sinks
    void <init>(long) -> <init>
    void addSink(org.webrtc.VideoSink) -> addSink
    void removeSink(org.webrtc.VideoSink) -> removeSink
    void dispose() -> dispose
    long getNativeVideoTrack() -> getNativeVideoTrack
    void nativeAddSink(long,long) -> nativeAddSink
    void nativeRemoveSink(long,long) -> nativeRemoveSink
    long nativeWrapSink(org.webrtc.VideoSink) -> nativeWrapSink
    void nativeFreeSink(long) -> nativeFreeSink
org.webrtc.WebRtcClassLoader -> org.webrtc.WebRtcClassLoader:
    void <init>() -> <init>
    java.lang.Object getClassLoader() -> getClassLoader
org.webrtc.WrappedNativeI420Buffer -> org.webrtc.WrappedNativeI420Buffer:
    int width -> width
    int height -> height
    java.nio.ByteBuffer dataY -> dataY
    int strideY -> strideY
    java.nio.ByteBuffer dataU -> dataU
    int strideU -> strideU
    java.nio.ByteBuffer dataV -> dataV
    int strideV -> strideV
    long nativeBuffer -> nativeBuffer
    void <init>(int,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,long) -> <init>
    int getWidth() -> getWidth
    int getHeight() -> getHeight
    java.nio.ByteBuffer getDataY() -> getDataY
    java.nio.ByteBuffer getDataU() -> getDataU
    java.nio.ByteBuffer getDataV() -> getDataV
    int getStrideY() -> getStrideY
    int getStrideU() -> getStrideU
    int getStrideV() -> getStrideV
    org.webrtc.VideoFrame$I420Buffer toI420() -> toI420
    void retain() -> retain
    void release() -> release
    org.webrtc.VideoFrame$Buffer cropAndScale(int,int,int,int,int,int) -> cropAndScale
org.webrtc.WrappedNativeVideoDecoder -> org.webrtc.WrappedNativeVideoDecoder:
    void <init>() -> <init>
    long createNativeVideoDecoder() -> createNativeVideoDecoder
    org.webrtc.VideoCodecStatus initDecode(org.webrtc.VideoDecoder$Settings,org.webrtc.VideoDecoder$Callback) -> initDecode
    org.webrtc.VideoCodecStatus release() -> release
    org.webrtc.VideoCodecStatus decode(org.webrtc.EncodedImage,org.webrtc.VideoDecoder$DecodeInfo) -> decode
    boolean getPrefersLateDecoding() -> getPrefersLateDecoding
    java.lang.String getImplementationName() -> getImplementationName
org.webrtc.WrappedNativeVideoEncoder -> org.webrtc.WrappedNativeVideoEncoder:
    void <init>() -> <init>
    long createNativeVideoEncoder() -> createNativeVideoEncoder
    boolean isHardwareEncoder() -> isHardwareEncoder
    org.webrtc.VideoCodecStatus initEncode(org.webrtc.VideoEncoder$Settings,org.webrtc.VideoEncoder$Callback) -> initEncode
    org.webrtc.VideoCodecStatus release() -> release
    org.webrtc.VideoCodecStatus encode(org.webrtc.VideoFrame,org.webrtc.VideoEncoder$EncodeInfo) -> encode
    org.webrtc.VideoCodecStatus setRateAllocation(org.webrtc.VideoEncoder$BitrateAllocation,int) -> setRateAllocation
    org.webrtc.VideoEncoder$ScalingSettings getScalingSettings() -> getScalingSettings
    java.lang.String getImplementationName() -> getImplementationName
org.webrtc.YuvConverter -> org.webrtc.YuvConverter:
    java.lang.String FRAGMENT_SHADER -> FRAGMENT_SHADER
    org.webrtc.ThreadUtils$ThreadChecker threadChecker -> threadChecker
    org.webrtc.GlTextureFrameBuffer i420TextureFrameBuffer -> i420TextureFrameBuffer
    org.webrtc.YuvConverter$ShaderCallbacks shaderCallbacks -> shaderCallbacks
    org.webrtc.GlGenericDrawer drawer -> drawer
    org.webrtc.VideoFrameDrawer videoFrameDrawer -> videoFrameDrawer
    void <init>() -> <init>
    void <init>(org.webrtc.VideoFrameDrawer) -> <init>
    org.webrtc.VideoFrame$I420Buffer convert(org.webrtc.VideoFrame$TextureBuffer) -> convert
    void release() -> release
    void lambda$convert$0$YuvConverter(java.nio.ByteBuffer) -> lambda$convert$0$YuvConverter
org.webrtc.YuvConverter$$Lambda$0 -> org.webrtc.YuvConverter$$Lambda$0:
    java.nio.ByteBuffer arg$1 -> arg$1
    void <init>(java.nio.ByteBuffer) -> <init>
    void run() -> run
org.webrtc.YuvConverter$1 -> org.webrtc.YuvConverter$1:
org.webrtc.YuvConverter$ShaderCallbacks -> org.webrtc.YuvConverter$ShaderCallbacks:
    float[] yCoeffs -> yCoeffs
    float[] uCoeffs -> uCoeffs
    float[] vCoeffs -> vCoeffs
    int xUnitLoc -> xUnitLoc
    int coeffsLoc -> coeffsLoc
    float[] coeffs -> coeffs
    float stepSize -> stepSize
    void <init>() -> <init>
    void setPlaneY() -> setPlaneY
    void setPlaneU() -> setPlaneU
    void setPlaneV() -> setPlaneV
    void onNewShader(org.webrtc.GlShader) -> onNewShader
    void onPrepareShader(org.webrtc.GlShader,float[],int,int,int,int) -> onPrepareShader
    void <init>(org.webrtc.YuvConverter$1) -> <init>
    void <clinit>() -> <clinit>
org.webrtc.YuvHelper -> org.webrtc.YuvHelper:
    void <init>() -> <init>
    void I420Copy(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int) -> I420Copy
    void I420ToNV12(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int) -> I420ToNV12
    void I420Rotate(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int,int) -> I420Rotate
    void copyPlane(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int,int) -> copyPlane
    void I420Copy(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int,int) -> I420Copy
    void I420ToNV12(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int,int) -> I420ToNV12
    void I420Rotate(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int,int,int) -> I420Rotate
    void nativeCopyPlane(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int,int) -> nativeCopyPlane
    void nativeI420Copy(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int,int) -> nativeI420Copy
    void nativeI420ToNV12(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int,int) -> nativeI420ToNV12
    void nativeI420Rotate(java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,java.nio.ByteBuffer,int,int,int,int) -> nativeI420Rotate
org.webrtc.audio.AudioDeviceModule -> org.webrtc.audio.AudioDeviceModule:
    long getNativeAudioDeviceModulePointer() -> getNativeAudioDeviceModulePointer
    void release() -> release
    void setSpeakerMute(boolean) -> setSpeakerMute
    void setMicrophoneMute(boolean) -> setMicrophoneMute
org.webrtc.audio.JavaAudioDeviceModule -> org.webrtc.audio.JavaAudioDeviceModule:
    java.lang.String TAG -> TAG
    android.content.Context context -> context
    android.media.AudioManager audioManager -> audioManager
    org.webrtc.audio.WebRtcAudioRecord audioInput -> audioInput
    org.webrtc.audio.WebRtcAudioTrack audioOutput -> audioOutput
    int inputSampleRate -> inputSampleRate
    int outputSampleRate -> outputSampleRate
    boolean useStereoInput -> useStereoInput
    boolean useStereoOutput -> useStereoOutput
    java.lang.Object nativeLock -> nativeLock
    long nativeAudioDeviceModule -> nativeAudioDeviceModule
    org.webrtc.audio.JavaAudioDeviceModule$Builder builder(android.content.Context) -> builder
    boolean isBuiltInAcousticEchoCancelerSupported() -> isBuiltInAcousticEchoCancelerSupported
    boolean isBuiltInNoiseSuppressorSupported() -> isBuiltInNoiseSuppressorSupported
    void <init>(android.content.Context,android.media.AudioManager,org.webrtc.audio.WebRtcAudioRecord,org.webrtc.audio.WebRtcAudioTrack,int,int,boolean,boolean) -> <init>
    long getNativeAudioDeviceModulePointer() -> getNativeAudioDeviceModulePointer
    void release() -> release
    void setSpeakerMute(boolean) -> setSpeakerMute
    void setMicrophoneMute(boolean) -> setMicrophoneMute
    long nativeCreateAudioDeviceModule(android.content.Context,android.media.AudioManager,org.webrtc.audio.WebRtcAudioRecord,org.webrtc.audio.WebRtcAudioTrack,int,int,boolean,boolean) -> nativeCreateAudioDeviceModule
    void <init>(android.content.Context,android.media.AudioManager,org.webrtc.audio.WebRtcAudioRecord,org.webrtc.audio.WebRtcAudioTrack,int,int,boolean,boolean,org.webrtc.audio.JavaAudioDeviceModule$1) -> <init>
org.webrtc.audio.JavaAudioDeviceModule$1 -> org.webrtc.audio.JavaAudioDeviceModule$1:
org.webrtc.audio.JavaAudioDeviceModule$AudioRecordErrorCallback -> org.webrtc.audio.JavaAudioDeviceModule$AudioRecordErrorCallback:
    void onWebRtcAudioRecordInitError(java.lang.String) -> onWebRtcAudioRecordInitError
    void onWebRtcAudioRecordStartError(org.webrtc.audio.JavaAudioDeviceModule$AudioRecordStartErrorCode,java.lang.String) -> onWebRtcAudioRecordStartError
    void onWebRtcAudioRecordError(java.lang.String) -> onWebRtcAudioRecordError
org.webrtc.audio.JavaAudioDeviceModule$AudioRecordStartErrorCode -> org.webrtc.audio.JavaAudioDeviceModule$AudioRecordStartErrorCode:
    org.webrtc.audio.JavaAudioDeviceModule$AudioRecordStartErrorCode AUDIO_RECORD_START_EXCEPTION -> AUDIO_RECORD_START_EXCEPTION
    org.webrtc.audio.JavaAudioDeviceModule$AudioRecordStartErrorCode AUDIO_RECORD_START_STATE_MISMATCH -> AUDIO_RECORD_START_STATE_MISMATCH
    org.webrtc.audio.JavaAudioDeviceModule$AudioRecordStartErrorCode[] $VALUES -> $VALUES
    org.webrtc.audio.JavaAudioDeviceModule$AudioRecordStartErrorCode[] values() -> values
    org.webrtc.audio.JavaAudioDeviceModule$AudioRecordStartErrorCode valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.webrtc.audio.JavaAudioDeviceModule$AudioSamples -> org.webrtc.audio.JavaAudioDeviceModule$AudioSamples:
    int audioFormat -> audioFormat
    int channelCount -> channelCount
    int sampleRate -> sampleRate
    byte[] data -> data
    void <init>(int,int,int,byte[]) -> <init>
    int getAudioFormat() -> getAudioFormat
    int getChannelCount() -> getChannelCount
    int getSampleRate() -> getSampleRate
    byte[] getData() -> getData
org.webrtc.audio.JavaAudioDeviceModule$AudioTrackErrorCallback -> org.webrtc.audio.JavaAudioDeviceModule$AudioTrackErrorCallback:
    void onWebRtcAudioTrackInitError(java.lang.String) -> onWebRtcAudioTrackInitError
    void onWebRtcAudioTrackStartError(org.webrtc.audio.JavaAudioDeviceModule$AudioTrackStartErrorCode,java.lang.String) -> onWebRtcAudioTrackStartError
    void onWebRtcAudioTrackError(java.lang.String) -> onWebRtcAudioTrackError
org.webrtc.audio.JavaAudioDeviceModule$AudioTrackStartErrorCode -> org.webrtc.audio.JavaAudioDeviceModule$AudioTrackStartErrorCode:
    org.webrtc.audio.JavaAudioDeviceModule$AudioTrackStartErrorCode AUDIO_TRACK_START_EXCEPTION -> AUDIO_TRACK_START_EXCEPTION
    org.webrtc.audio.JavaAudioDeviceModule$AudioTrackStartErrorCode AUDIO_TRACK_START_STATE_MISMATCH -> AUDIO_TRACK_START_STATE_MISMATCH
    org.webrtc.audio.JavaAudioDeviceModule$AudioTrackStartErrorCode[] $VALUES -> $VALUES
    org.webrtc.audio.JavaAudioDeviceModule$AudioTrackStartErrorCode[] values() -> values
    org.webrtc.audio.JavaAudioDeviceModule$AudioTrackStartErrorCode valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.webrtc.audio.JavaAudioDeviceModule$Builder -> org.webrtc.audio.JavaAudioDeviceModule$Builder:
    android.content.Context context -> context
    android.media.AudioManager audioManager -> audioManager
    int inputSampleRate -> inputSampleRate
    int outputSampleRate -> outputSampleRate
    int audioSource -> audioSource
    int audioFormat -> audioFormat
    org.webrtc.audio.JavaAudioDeviceModule$AudioTrackErrorCallback audioTrackErrorCallback -> audioTrackErrorCallback
    org.webrtc.audio.JavaAudioDeviceModule$AudioRecordErrorCallback audioRecordErrorCallback -> audioRecordErrorCallback
    org.webrtc.audio.JavaAudioDeviceModule$SamplesReadyCallback samplesReadyCallback -> samplesReadyCallback
    boolean useHardwareAcousticEchoCanceler -> useHardwareAcousticEchoCanceler
    boolean useHardwareNoiseSuppressor -> useHardwareNoiseSuppressor
    boolean useStereoInput -> useStereoInput
    boolean useStereoOutput -> useStereoOutput
    void <init>(android.content.Context) -> <init>
    org.webrtc.audio.JavaAudioDeviceModule$Builder setSampleRate(int) -> setSampleRate
    org.webrtc.audio.JavaAudioDeviceModule$Builder setInputSampleRate(int) -> setInputSampleRate
    org.webrtc.audio.JavaAudioDeviceModule$Builder setOutputSampleRate(int) -> setOutputSampleRate
    org.webrtc.audio.JavaAudioDeviceModule$Builder setAudioSource(int) -> setAudioSource
    org.webrtc.audio.JavaAudioDeviceModule$Builder setAudioFormat(int) -> setAudioFormat
    org.webrtc.audio.JavaAudioDeviceModule$Builder setAudioTrackErrorCallback(org.webrtc.audio.JavaAudioDeviceModule$AudioTrackErrorCallback) -> setAudioTrackErrorCallback
    org.webrtc.audio.JavaAudioDeviceModule$Builder setAudioRecordErrorCallback(org.webrtc.audio.JavaAudioDeviceModule$AudioRecordErrorCallback) -> setAudioRecordErrorCallback
    org.webrtc.audio.JavaAudioDeviceModule$Builder setSamplesReadyCallback(org.webrtc.audio.JavaAudioDeviceModule$SamplesReadyCallback) -> setSamplesReadyCallback
    org.webrtc.audio.JavaAudioDeviceModule$Builder setUseHardwareNoiseSuppressor(boolean) -> setUseHardwareNoiseSuppressor
    org.webrtc.audio.JavaAudioDeviceModule$Builder setUseHardwareAcousticEchoCanceler(boolean) -> setUseHardwareAcousticEchoCanceler
    org.webrtc.audio.JavaAudioDeviceModule$Builder setUseStereoInput(boolean) -> setUseStereoInput
    org.webrtc.audio.JavaAudioDeviceModule$Builder setUseStereoOutput(boolean) -> setUseStereoOutput
    org.webrtc.audio.AudioDeviceModule createAudioDeviceModule() -> createAudioDeviceModule
    void <init>(android.content.Context,org.webrtc.audio.JavaAudioDeviceModule$1) -> <init>
org.webrtc.audio.JavaAudioDeviceModule$SamplesReadyCallback -> org.webrtc.audio.JavaAudioDeviceModule$SamplesReadyCallback:
    void onWebRtcAudioRecordSamplesReady(org.webrtc.audio.JavaAudioDeviceModule$AudioSamples) -> onWebRtcAudioRecordSamplesReady
org.webrtc.audio.VolumeLogger -> org.webrtc.audio.VolumeLogger:
    java.lang.String TAG -> TAG
    java.lang.String THREAD_NAME -> THREAD_NAME
    int TIMER_PERIOD_IN_SECONDS -> TIMER_PERIOD_IN_SECONDS
    android.media.AudioManager audioManager -> audioManager
    java.util.Timer timer -> timer
    void <init>(android.media.AudioManager) -> <init>
    void start() -> start
    void stop() -> stop
    android.media.AudioManager access$000(org.webrtc.audio.VolumeLogger) -> access$000
org.webrtc.audio.VolumeLogger$LogVolumeTask -> org.webrtc.audio.VolumeLogger$LogVolumeTask:
    int maxRingVolume -> maxRingVolume
    int maxVoiceCallVolume -> maxVoiceCallVolume
    org.webrtc.audio.VolumeLogger this$0 -> this$0
    void <init>(org.webrtc.audio.VolumeLogger,int,int) -> <init>
    void run() -> run
org.webrtc.audio.WebRtcAudioEffects -> org.webrtc.audio.WebRtcAudioEffects:
    boolean DEBUG -> DEBUG
    java.lang.String TAG -> TAG
    java.util.UUID AOSP_ACOUSTIC_ECHO_CANCELER -> AOSP_ACOUSTIC_ECHO_CANCELER
    java.util.UUID AOSP_NOISE_SUPPRESSOR -> AOSP_NOISE_SUPPRESSOR
    android.media.audiofx.AudioEffect$Descriptor[] cachedEffects -> cachedEffects
    android.media.audiofx.AcousticEchoCanceler aec -> aec
    android.media.audiofx.NoiseSuppressor ns -> ns
    boolean shouldEnableAec -> shouldEnableAec
    boolean shouldEnableNs -> shouldEnableNs
    boolean isAcousticEchoCancelerSupported() -> isAcousticEchoCancelerSupported
    boolean isNoiseSuppressorSupported() -> isNoiseSuppressorSupported
    void <init>() -> <init>
    boolean setAEC(boolean) -> setAEC
    boolean setNS(boolean) -> setNS
    void enable(int) -> enable
    void release() -> release
    boolean effectTypeIsVoIP(java.util.UUID) -> effectTypeIsVoIP
    void assertTrue(boolean) -> assertTrue
    android.media.audiofx.AudioEffect$Descriptor[] getAvailableEffects() -> getAvailableEffects
    boolean isEffectTypeAvailable(java.util.UUID,java.util.UUID) -> isEffectTypeAvailable
    void <clinit>() -> <clinit>
org.webrtc.audio.WebRtcAudioManager -> org.webrtc.audio.WebRtcAudioManager:
    java.lang.String TAG -> TAG
    int DEFAULT_SAMPLE_RATE_HZ -> DEFAULT_SAMPLE_RATE_HZ
    int BITS_PER_SAMPLE -> BITS_PER_SAMPLE
    int DEFAULT_FRAME_PER_BUFFER -> DEFAULT_FRAME_PER_BUFFER
    void <init>() -> <init>
    android.media.AudioManager getAudioManager(android.content.Context) -> getAudioManager
    int getOutputBufferSize(android.content.Context,android.media.AudioManager,int,int) -> getOutputBufferSize
    int getInputBufferSize(android.content.Context,android.media.AudioManager,int,int) -> getInputBufferSize
    boolean isLowLatencyOutputSupported(android.content.Context) -> isLowLatencyOutputSupported
    boolean isLowLatencyInputSupported(android.content.Context) -> isLowLatencyInputSupported
    int getSampleRate(android.media.AudioManager) -> getSampleRate
    int getSampleRateForApiLevel(android.media.AudioManager) -> getSampleRateForApiLevel
    int getLowLatencyFramesPerBuffer(android.media.AudioManager) -> getLowLatencyFramesPerBuffer
    int getMinOutputFrameSize(int,int) -> getMinOutputFrameSize
    int getMinInputFrameSize(int,int) -> getMinInputFrameSize
org.webrtc.audio.WebRtcAudioRecord -> org.webrtc.audio.WebRtcAudioRecord:
    java.lang.String TAG -> TAG
    int CALLBACK_BUFFER_SIZE_MS -> CALLBACK_BUFFER_SIZE_MS
    int BUFFERS_PER_SECOND -> BUFFERS_PER_SECOND
    int BUFFER_SIZE_FACTOR -> BUFFER_SIZE_FACTOR
    long AUDIO_RECORD_THREAD_JOIN_TIMEOUT_MS -> AUDIO_RECORD_THREAD_JOIN_TIMEOUT_MS
    int DEFAULT_AUDIO_SOURCE -> DEFAULT_AUDIO_SOURCE
    int DEFAULT_AUDIO_FORMAT -> DEFAULT_AUDIO_FORMAT
    android.content.Context context -> context
    android.media.AudioManager audioManager -> audioManager
    int audioSource -> audioSource
    int audioFormat -> audioFormat
    long nativeAudioRecord -> nativeAudioRecord
    org.webrtc.audio.WebRtcAudioEffects effects -> effects
    java.nio.ByteBuffer byteBuffer -> byteBuffer
    android.media.AudioRecord audioRecord -> audioRecord
    org.webrtc.audio.WebRtcAudioRecord$AudioRecordThread audioThread -> audioThread
    boolean microphoneMute -> microphoneMute
    byte[] emptyBytes -> emptyBytes
    org.webrtc.audio.JavaAudioDeviceModule$AudioRecordErrorCallback errorCallback -> errorCallback
    org.webrtc.audio.JavaAudioDeviceModule$SamplesReadyCallback audioSamplesReadyCallback -> audioSamplesReadyCallback
    boolean isAcousticEchoCancelerSupported -> isAcousticEchoCancelerSupported
    boolean isNoiseSuppressorSupported -> isNoiseSuppressorSupported
    void <init>(android.content.Context,android.media.AudioManager) -> <init>
    void <init>(android.content.Context,android.media.AudioManager,int,int,org.webrtc.audio.JavaAudioDeviceModule$AudioRecordErrorCallback,org.webrtc.audio.JavaAudioDeviceModule$SamplesReadyCallback,boolean,boolean) -> <init>
    void setNativeAudioRecord(long) -> setNativeAudioRecord
    boolean isAcousticEchoCancelerSupported() -> isAcousticEchoCancelerSupported
    boolean isNoiseSuppressorSupported() -> isNoiseSuppressorSupported
    boolean enableBuiltInAEC(boolean) -> enableBuiltInAEC
    boolean enableBuiltInNS(boolean) -> enableBuiltInNS
    int initRecording(int,int) -> initRecording
    boolean startRecording() -> startRecording
    boolean stopRecording() -> stopRecording
    void logMainParameters() -> logMainParameters
    void logMainParametersExtended() -> logMainParametersExtended
    void assertTrue(boolean) -> assertTrue
    int channelCountToConfiguration(int) -> channelCountToConfiguration
    void nativeCacheDirectBufferAddress(long,java.nio.ByteBuffer) -> nativeCacheDirectBufferAddress
    void nativeDataIsRecorded(long,int) -> nativeDataIsRecorded
    void setMicrophoneMute(boolean) -> setMicrophoneMute
    void releaseAudioResources() -> releaseAudioResources
    void reportWebRtcAudioRecordInitError(java.lang.String) -> reportWebRtcAudioRecordInitError
    void reportWebRtcAudioRecordStartError(org.webrtc.audio.JavaAudioDeviceModule$AudioRecordStartErrorCode,java.lang.String) -> reportWebRtcAudioRecordStartError
    void reportWebRtcAudioRecordError(java.lang.String) -> reportWebRtcAudioRecordError
    int getBytesPerSample(int) -> getBytesPerSample
    android.media.AudioRecord access$000(org.webrtc.audio.WebRtcAudioRecord) -> access$000
    void access$100(boolean) -> access$100
    java.nio.ByteBuffer access$200(org.webrtc.audio.WebRtcAudioRecord) -> access$200
    boolean access$300(org.webrtc.audio.WebRtcAudioRecord) -> access$300
    byte[] access$400(org.webrtc.audio.WebRtcAudioRecord) -> access$400
    long access$500(org.webrtc.audio.WebRtcAudioRecord) -> access$500
    void access$600(org.webrtc.audio.WebRtcAudioRecord,long,int) -> access$600
    org.webrtc.audio.JavaAudioDeviceModule$SamplesReadyCallback access$700(org.webrtc.audio.WebRtcAudioRecord) -> access$700
    void access$800(org.webrtc.audio.WebRtcAudioRecord,java.lang.String) -> access$800
org.webrtc.audio.WebRtcAudioRecord$AudioRecordThread -> org.webrtc.audio.WebRtcAudioRecord$AudioRecordThread:
    boolean keepAlive -> keepAlive
    org.webrtc.audio.WebRtcAudioRecord this$0 -> this$0
    void <init>(org.webrtc.audio.WebRtcAudioRecord,java.lang.String) -> <init>
    void run() -> run
    void stopThread() -> stopThread
org.webrtc.audio.WebRtcAudioTrack -> org.webrtc.audio.WebRtcAudioTrack:
    java.lang.String TAG -> TAG
    int BITS_PER_SAMPLE -> BITS_PER_SAMPLE
    int CALLBACK_BUFFER_SIZE_MS -> CALLBACK_BUFFER_SIZE_MS
    int BUFFERS_PER_SECOND -> BUFFERS_PER_SECOND
    long AUDIO_TRACK_THREAD_JOIN_TIMEOUT_MS -> AUDIO_TRACK_THREAD_JOIN_TIMEOUT_MS
    int DEFAULT_USAGE -> DEFAULT_USAGE
    long nativeAudioTrack -> nativeAudioTrack
    android.content.Context context -> context
    android.media.AudioManager audioManager -> audioManager
    org.webrtc.ThreadUtils$ThreadChecker threadChecker -> threadChecker
    java.nio.ByteBuffer byteBuffer -> byteBuffer
    android.media.AudioTrack audioTrack -> audioTrack
    org.webrtc.audio.WebRtcAudioTrack$AudioTrackThread audioThread -> audioThread
    org.webrtc.audio.VolumeLogger volumeLogger -> volumeLogger
    boolean speakerMute -> speakerMute
    byte[] emptyBytes -> emptyBytes
    org.webrtc.audio.JavaAudioDeviceModule$AudioTrackErrorCallback errorCallback -> errorCallback
    int getDefaultUsageAttribute() -> getDefaultUsageAttribute
    void <init>(android.content.Context,android.media.AudioManager) -> <init>
    void <init>(android.content.Context,android.media.AudioManager,org.webrtc.audio.JavaAudioDeviceModule$AudioTrackErrorCallback) -> <init>
    void setNativeAudioTrack(long) -> setNativeAudioTrack
    boolean initPlayout(int,int) -> initPlayout
    boolean startPlayout() -> startPlayout
    boolean stopPlayout() -> stopPlayout
    int getStreamMaxVolume() -> getStreamMaxVolume
    boolean setStreamVolume(int) -> setStreamVolume
    boolean isVolumeFixed() -> isVolumeFixed
    int getStreamVolume() -> getStreamVolume
    void logMainParameters() -> logMainParameters
    android.media.AudioTrack createAudioTrackOnLollipopOrHigher(int,int,int) -> createAudioTrackOnLollipopOrHigher
    android.media.AudioTrack createAudioTrackOnLowerThanLollipop(int,int,int) -> createAudioTrackOnLowerThanLollipop
    void logBufferSizeInFrames() -> logBufferSizeInFrames
    void logBufferCapacityInFrames() -> logBufferCapacityInFrames
    void logMainParametersExtended() -> logMainParametersExtended
    void logUnderrunCount() -> logUnderrunCount
    void assertTrue(boolean) -> assertTrue
    int channelCountToConfiguration(int) -> channelCountToConfiguration
    void nativeCacheDirectBufferAddress(long,java.nio.ByteBuffer) -> nativeCacheDirectBufferAddress
    void nativeGetPlayoutData(long,int) -> nativeGetPlayoutData
    void setSpeakerMute(boolean) -> setSpeakerMute
    void releaseAudioResources() -> releaseAudioResources
    void reportWebRtcAudioTrackInitError(java.lang.String) -> reportWebRtcAudioTrackInitError
    void reportWebRtcAudioTrackStartError(org.webrtc.audio.JavaAudioDeviceModule$AudioTrackStartErrorCode,java.lang.String) -> reportWebRtcAudioTrackStartError
    void reportWebRtcAudioTrackError(java.lang.String) -> reportWebRtcAudioTrackError
    android.media.AudioTrack access$000(org.webrtc.audio.WebRtcAudioTrack) -> access$000
    void access$100(boolean) -> access$100
    java.nio.ByteBuffer access$200(org.webrtc.audio.WebRtcAudioTrack) -> access$200
    long access$300(org.webrtc.audio.WebRtcAudioTrack) -> access$300
    void access$400(long,int) -> access$400
    boolean access$500(org.webrtc.audio.WebRtcAudioTrack) -> access$500
    byte[] access$600(org.webrtc.audio.WebRtcAudioTrack) -> access$600
    void access$700(org.webrtc.audio.WebRtcAudioTrack,java.lang.String) -> access$700
    void <clinit>() -> <clinit>
org.webrtc.audio.WebRtcAudioTrack$AudioTrackThread -> org.webrtc.audio.WebRtcAudioTrack$AudioTrackThread:
    boolean keepAlive -> keepAlive
    org.webrtc.audio.WebRtcAudioTrack this$0 -> this$0
    void <init>(org.webrtc.audio.WebRtcAudioTrack,java.lang.String) -> <init>
    void run() -> run
    int writeBytes(android.media.AudioTrack,java.nio.ByteBuffer,int) -> writeBytes
    void stopThread() -> stopThread
org.webrtc.audio.WebRtcAudioTrackUtils -> org.webrtc.audio.WebRtcAudioTrackUtils:
    java.lang.String TAG -> TAG
    void <init>() -> <init>
    void attachOutputCallback(org.webrtc.audio.JavaAudioDeviceModule$SamplesReadyCallback,org.webrtc.audio.JavaAudioDeviceModule) -> attachOutputCallback
    void detachOutputCallback(org.webrtc.audio.JavaAudioDeviceModule) -> detachOutputCallback
org.webrtc.audio.WebRtcAudioUtils -> org.webrtc.audio.WebRtcAudioUtils:
    java.lang.String TAG -> TAG
    void <init>() -> <init>
    java.lang.String getThreadInfo() -> getThreadInfo
    boolean runningOnEmulator() -> runningOnEmulator
    void logDeviceInfo(java.lang.String) -> logDeviceInfo
    void logAudioState(java.lang.String,android.content.Context,android.media.AudioManager) -> logAudioState
    void logAudioStateBasic(java.lang.String,android.content.Context,android.media.AudioManager) -> logAudioStateBasic
    boolean isVolumeFixed(android.media.AudioManager) -> isVolumeFixed
    void logAudioStateVolume(java.lang.String,android.media.AudioManager) -> logAudioStateVolume
    void logIsStreamMute(java.lang.String,android.media.AudioManager,int,java.lang.StringBuilder) -> logIsStreamMute
    void logAudioDeviceInfo(java.lang.String,android.media.AudioManager) -> logAudioDeviceInfo
    java.lang.String modeToString(int) -> modeToString
    java.lang.String streamTypeToString(int) -> streamTypeToString
    java.lang.String deviceTypeToString(int) -> deviceTypeToString
    boolean hasMicrophone(android.content.Context) -> hasMicrophone
org.webrtc.voiceengine.BuildInfo -> org.webrtc.voiceengine.BuildInfo:
    void <init>() -> <init>
    java.lang.String getDevice() -> getDevice
    java.lang.String getDeviceModel() -> getDeviceModel
    java.lang.String getProduct() -> getProduct
    java.lang.String getBrand() -> getBrand
    java.lang.String getDeviceManufacturer() -> getDeviceManufacturer
    java.lang.String getAndroidBuildId() -> getAndroidBuildId
    java.lang.String getBuildType() -> getBuildType
    java.lang.String getBuildRelease() -> getBuildRelease
    int getSdkVersion() -> getSdkVersion
org.webrtc.voiceengine.WebRtcAudioEffects -> org.webrtc.voiceengine.WebRtcAudioEffects:
    boolean DEBUG -> DEBUG
    java.lang.String TAG -> TAG
    java.util.UUID AOSP_ACOUSTIC_ECHO_CANCELER -> AOSP_ACOUSTIC_ECHO_CANCELER
    java.util.UUID AOSP_NOISE_SUPPRESSOR -> AOSP_NOISE_SUPPRESSOR
    android.media.audiofx.AudioEffect$Descriptor[] cachedEffects -> cachedEffects
    android.media.audiofx.AcousticEchoCanceler aec -> aec
    android.media.audiofx.NoiseSuppressor ns -> ns
    boolean shouldEnableAec -> shouldEnableAec
    boolean shouldEnableNs -> shouldEnableNs
    boolean isAcousticEchoCancelerSupported() -> isAcousticEchoCancelerSupported
    boolean isNoiseSuppressorSupported() -> isNoiseSuppressorSupported
    boolean isAcousticEchoCancelerBlacklisted() -> isAcousticEchoCancelerBlacklisted
    boolean isNoiseSuppressorBlacklisted() -> isNoiseSuppressorBlacklisted
    boolean isAcousticEchoCancelerExcludedByUUID() -> isAcousticEchoCancelerExcludedByUUID
    boolean isNoiseSuppressorExcludedByUUID() -> isNoiseSuppressorExcludedByUUID
    boolean isAcousticEchoCancelerEffectAvailable() -> isAcousticEchoCancelerEffectAvailable
    boolean isNoiseSuppressorEffectAvailable() -> isNoiseSuppressorEffectAvailable
    boolean canUseAcousticEchoCanceler() -> canUseAcousticEchoCanceler
    boolean canUseNoiseSuppressor() -> canUseNoiseSuppressor
    org.webrtc.voiceengine.WebRtcAudioEffects create() -> create
    void <init>() -> <init>
    boolean setAEC(boolean) -> setAEC
    boolean setNS(boolean) -> setNS
    void enable(int) -> enable
    void release() -> release
    boolean effectTypeIsVoIP(java.util.UUID) -> effectTypeIsVoIP
    void assertTrue(boolean) -> assertTrue
    android.media.audiofx.AudioEffect$Descriptor[] getAvailableEffects() -> getAvailableEffects
    boolean isEffectTypeAvailable(java.util.UUID) -> isEffectTypeAvailable
    void <clinit>() -> <clinit>
org.webrtc.voiceengine.WebRtcAudioManager -> org.webrtc.voiceengine.WebRtcAudioManager:
    boolean DEBUG -> DEBUG
    java.lang.String TAG -> TAG
    boolean blacklistDeviceForAAudioUsage -> blacklistDeviceForAAudioUsage
    boolean useStereoOutput -> useStereoOutput
    boolean useStereoInput -> useStereoInput
    boolean blacklistDeviceForOpenSLESUsage -> blacklistDeviceForOpenSLESUsage
    boolean blacklistDeviceForOpenSLESUsageIsOverridden -> blacklistDeviceForOpenSLESUsageIsOverridden
    int BITS_PER_SAMPLE -> BITS_PER_SAMPLE
    int DEFAULT_FRAME_PER_BUFFER -> DEFAULT_FRAME_PER_BUFFER
    long nativeAudioManager -> nativeAudioManager
    android.media.AudioManager audioManager -> audioManager
    boolean initialized -> initialized
    int nativeSampleRate -> nativeSampleRate
    int nativeChannels -> nativeChannels
    boolean hardwareAEC -> hardwareAEC
    boolean hardwareAGC -> hardwareAGC
    boolean hardwareNS -> hardwareNS
    boolean lowLatencyOutput -> lowLatencyOutput
    boolean lowLatencyInput -> lowLatencyInput
    boolean proAudio -> proAudio
    boolean aAudio -> aAudio
    int sampleRate -> sampleRate
    int outputChannels -> outputChannels
    int inputChannels -> inputChannels
    int outputBufferSize -> outputBufferSize
    int inputBufferSize -> inputBufferSize
    org.webrtc.voiceengine.WebRtcAudioManager$VolumeLogger volumeLogger -> volumeLogger
    void setBlacklistDeviceForOpenSLESUsage(boolean) -> setBlacklistDeviceForOpenSLESUsage
    void setStereoOutput(boolean) -> setStereoOutput
    void setStereoInput(boolean) -> setStereoInput
    boolean getStereoOutput() -> getStereoOutput
    boolean getStereoInput() -> getStereoInput
    void <init>(long) -> <init>
    boolean init() -> init
    void dispose() -> dispose
    boolean isCommunicationModeEnabled() -> isCommunicationModeEnabled
    boolean isDeviceBlacklistedForOpenSLESUsage() -> isDeviceBlacklistedForOpenSLESUsage
    void storeAudioParameters() -> storeAudioParameters
    boolean hasEarpiece() -> hasEarpiece
    boolean isLowLatencyOutputSupported() -> isLowLatencyOutputSupported
    boolean isLowLatencyInputSupported() -> isLowLatencyInputSupported
    boolean isProAudioSupported() -> isProAudioSupported
    boolean isAAudioSupported() -> isAAudioSupported
    int getNativeOutputSampleRate() -> getNativeOutputSampleRate
    int getSampleRateForApiLevel() -> getSampleRateForApiLevel
    int getLowLatencyOutputFramesPerBuffer() -> getLowLatencyOutputFramesPerBuffer
    boolean isAcousticEchoCancelerSupported() -> isAcousticEchoCancelerSupported
    boolean isNoiseSuppressorSupported() -> isNoiseSuppressorSupported
    int getMinOutputFrameSize(int,int) -> getMinOutputFrameSize
    int getLowLatencyInputFramesPerBuffer() -> getLowLatencyInputFramesPerBuffer
    int getMinInputFrameSize(int,int) -> getMinInputFrameSize
    void assertTrue(boolean) -> assertTrue
    void nativeCacheAudioParameters(int,int,int,boolean,boolean,boolean,boolean,boolean,boolean,boolean,int,int,long) -> nativeCacheAudioParameters
org.webrtc.voiceengine.WebRtcAudioManager$VolumeLogger -> org.webrtc.voiceengine.WebRtcAudioManager$VolumeLogger:
    java.lang.String THREAD_NAME -> THREAD_NAME
    int TIMER_PERIOD_IN_SECONDS -> TIMER_PERIOD_IN_SECONDS
    android.media.AudioManager audioManager -> audioManager
    java.util.Timer timer -> timer
    void <init>(android.media.AudioManager) -> <init>
    void start() -> start
    void stop() -> stop
    android.media.AudioManager access$000(org.webrtc.voiceengine.WebRtcAudioManager$VolumeLogger) -> access$000
    void access$100(org.webrtc.voiceengine.WebRtcAudioManager$VolumeLogger) -> access$100
org.webrtc.voiceengine.WebRtcAudioManager$VolumeLogger$LogVolumeTask -> org.webrtc.voiceengine.WebRtcAudioManager$VolumeLogger$LogVolumeTask:
    int maxRingVolume -> maxRingVolume
    int maxVoiceCallVolume -> maxVoiceCallVolume
    org.webrtc.voiceengine.WebRtcAudioManager$VolumeLogger this$0 -> this$0
    void <init>(org.webrtc.voiceengine.WebRtcAudioManager$VolumeLogger,int,int) -> <init>
    void run() -> run
org.webrtc.voiceengine.WebRtcAudioRecord -> org.webrtc.voiceengine.WebRtcAudioRecord:
    boolean DEBUG -> DEBUG
    java.lang.String TAG -> TAG
    int BITS_PER_SAMPLE -> BITS_PER_SAMPLE
    int CALLBACK_BUFFER_SIZE_MS -> CALLBACK_BUFFER_SIZE_MS
    int BUFFERS_PER_SECOND -> BUFFERS_PER_SECOND
    int BUFFER_SIZE_FACTOR -> BUFFER_SIZE_FACTOR
    long AUDIO_RECORD_THREAD_JOIN_TIMEOUT_MS -> AUDIO_RECORD_THREAD_JOIN_TIMEOUT_MS
    int DEFAULT_AUDIO_SOURCE -> DEFAULT_AUDIO_SOURCE
    int audioSource -> audioSource
    long nativeAudioRecord -> nativeAudioRecord
    org.webrtc.voiceengine.WebRtcAudioEffects effects -> effects
    java.nio.ByteBuffer byteBuffer -> byteBuffer
    android.media.AudioRecord audioRecord -> audioRecord
    org.webrtc.voiceengine.WebRtcAudioRecord$AudioRecordThread audioThread -> audioThread
    boolean microphoneMute -> microphoneMute
    byte[] emptyBytes -> emptyBytes
    org.webrtc.voiceengine.WebRtcAudioRecord$WebRtcAudioRecordErrorCallback errorCallback -> errorCallback
    org.webrtc.voiceengine.WebRtcAudioRecord$WebRtcAudioRecordSamplesReadyCallback audioSamplesReadyCallback -> audioSamplesReadyCallback
    void setErrorCallback(org.webrtc.voiceengine.WebRtcAudioRecord$WebRtcAudioRecordErrorCallback) -> setErrorCallback
    void setOnAudioSamplesReady(org.webrtc.voiceengine.WebRtcAudioRecord$WebRtcAudioRecordSamplesReadyCallback) -> setOnAudioSamplesReady
    void <init>(long) -> <init>
    boolean enableBuiltInAEC(boolean) -> enableBuiltInAEC
    boolean enableBuiltInNS(boolean) -> enableBuiltInNS
    int initRecording(int,int) -> initRecording
    boolean startRecording() -> startRecording
    boolean stopRecording() -> stopRecording
    void logMainParameters() -> logMainParameters
    void logMainParametersExtended() -> logMainParametersExtended
    void assertTrue(boolean) -> assertTrue
    int channelCountToConfiguration(int) -> channelCountToConfiguration
    void nativeCacheDirectBufferAddress(java.nio.ByteBuffer,long) -> nativeCacheDirectBufferAddress
    void nativeDataIsRecorded(int,long) -> nativeDataIsRecorded
    void setAudioSource(int) -> setAudioSource
    int getDefaultAudioSource() -> getDefaultAudioSource
    void setMicrophoneMute(boolean) -> setMicrophoneMute
    void releaseAudioResources() -> releaseAudioResources
    void reportWebRtcAudioRecordInitError(java.lang.String) -> reportWebRtcAudioRecordInitError
    void reportWebRtcAudioRecordStartError(org.webrtc.voiceengine.WebRtcAudioRecord$AudioRecordStartErrorCode,java.lang.String) -> reportWebRtcAudioRecordStartError
    void reportWebRtcAudioRecordError(java.lang.String) -> reportWebRtcAudioRecordError
    android.media.AudioRecord access$000(org.webrtc.voiceengine.WebRtcAudioRecord) -> access$000
    void access$100(boolean) -> access$100
    java.nio.ByteBuffer access$200(org.webrtc.voiceengine.WebRtcAudioRecord) -> access$200
    boolean access$300() -> access$300
    byte[] access$400(org.webrtc.voiceengine.WebRtcAudioRecord) -> access$400
    long access$500(org.webrtc.voiceengine.WebRtcAudioRecord) -> access$500
    void access$600(org.webrtc.voiceengine.WebRtcAudioRecord,int,long) -> access$600
    org.webrtc.voiceengine.WebRtcAudioRecord$WebRtcAudioRecordSamplesReadyCallback access$700() -> access$700
    void access$900(org.webrtc.voiceengine.WebRtcAudioRecord,java.lang.String) -> access$900
    void <clinit>() -> <clinit>
org.webrtc.voiceengine.WebRtcAudioRecord$1 -> org.webrtc.voiceengine.WebRtcAudioRecord$1:
org.webrtc.voiceengine.WebRtcAudioRecord$AudioRecordStartErrorCode -> org.webrtc.voiceengine.WebRtcAudioRecord$AudioRecordStartErrorCode:
    org.webrtc.voiceengine.WebRtcAudioRecord$AudioRecordStartErrorCode AUDIO_RECORD_START_EXCEPTION -> AUDIO_RECORD_START_EXCEPTION
    org.webrtc.voiceengine.WebRtcAudioRecord$AudioRecordStartErrorCode AUDIO_RECORD_START_STATE_MISMATCH -> AUDIO_RECORD_START_STATE_MISMATCH
    org.webrtc.voiceengine.WebRtcAudioRecord$AudioRecordStartErrorCode[] $VALUES -> $VALUES
    org.webrtc.voiceengine.WebRtcAudioRecord$AudioRecordStartErrorCode[] values() -> values
    org.webrtc.voiceengine.WebRtcAudioRecord$AudioRecordStartErrorCode valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.webrtc.voiceengine.WebRtcAudioRecord$AudioRecordThread -> org.webrtc.voiceengine.WebRtcAudioRecord$AudioRecordThread:
    boolean keepAlive -> keepAlive
    org.webrtc.voiceengine.WebRtcAudioRecord this$0 -> this$0
    void <init>(org.webrtc.voiceengine.WebRtcAudioRecord,java.lang.String) -> <init>
    void run() -> run
    void stopThread() -> stopThread
org.webrtc.voiceengine.WebRtcAudioRecord$AudioSamples -> org.webrtc.voiceengine.WebRtcAudioRecord$AudioSamples:
    int audioFormat -> audioFormat
    int channelCount -> channelCount
    int sampleRate -> sampleRate
    byte[] data -> data
    void <init>(android.media.AudioRecord,byte[]) -> <init>
    int getAudioFormat() -> getAudioFormat
    int getChannelCount() -> getChannelCount
    int getSampleRate() -> getSampleRate
    byte[] getData() -> getData
    void <init>(android.media.AudioRecord,byte[],org.webrtc.voiceengine.WebRtcAudioRecord$1) -> <init>
org.webrtc.voiceengine.WebRtcAudioRecord$WebRtcAudioRecordErrorCallback -> org.webrtc.voiceengine.WebRtcAudioRecord$WebRtcAudioRecordErrorCallback:
    void onWebRtcAudioRecordInitError(java.lang.String) -> onWebRtcAudioRecordInitError
    void onWebRtcAudioRecordStartError(org.webrtc.voiceengine.WebRtcAudioRecord$AudioRecordStartErrorCode,java.lang.String) -> onWebRtcAudioRecordStartError
    void onWebRtcAudioRecordError(java.lang.String) -> onWebRtcAudioRecordError
org.webrtc.voiceengine.WebRtcAudioRecord$WebRtcAudioRecordSamplesReadyCallback -> org.webrtc.voiceengine.WebRtcAudioRecord$WebRtcAudioRecordSamplesReadyCallback:
    void onWebRtcAudioRecordSamplesReady(org.webrtc.voiceengine.WebRtcAudioRecord$AudioSamples) -> onWebRtcAudioRecordSamplesReady
org.webrtc.voiceengine.WebRtcAudioTrack -> org.webrtc.voiceengine.WebRtcAudioTrack:
    boolean DEBUG -> DEBUG
    java.lang.String TAG -> TAG
    int BITS_PER_SAMPLE -> BITS_PER_SAMPLE
    int CALLBACK_BUFFER_SIZE_MS -> CALLBACK_BUFFER_SIZE_MS
    int BUFFERS_PER_SECOND -> BUFFERS_PER_SECOND
    long AUDIO_TRACK_THREAD_JOIN_TIMEOUT_MS -> AUDIO_TRACK_THREAD_JOIN_TIMEOUT_MS
    int DEFAULT_USAGE -> DEFAULT_USAGE
    int usageAttribute -> usageAttribute
    long nativeAudioTrack -> nativeAudioTrack
    android.media.AudioManager audioManager -> audioManager
    org.webrtc.ThreadUtils$ThreadChecker threadChecker -> threadChecker
    java.nio.ByteBuffer byteBuffer -> byteBuffer
    android.media.AudioTrack audioTrack -> audioTrack
    org.webrtc.voiceengine.WebRtcAudioTrack$AudioTrackThread audioThread -> audioThread
    boolean speakerMute -> speakerMute
    byte[] emptyBytes -> emptyBytes
    org.webrtc.voiceengine.WebRtcAudioTrack$WebRtcAudioTrackErrorCallback errorCallbackOld -> errorCallbackOld
    org.webrtc.voiceengine.WebRtcAudioTrack$ErrorCallback errorCallback -> errorCallback
    void setAudioTrackUsageAttribute(int) -> setAudioTrackUsageAttribute
    int getDefaultUsageAttribute() -> getDefaultUsageAttribute
    void setErrorCallback(org.webrtc.voiceengine.WebRtcAudioTrack$WebRtcAudioTrackErrorCallback) -> setErrorCallback
    void setErrorCallback(org.webrtc.voiceengine.WebRtcAudioTrack$ErrorCallback) -> setErrorCallback
    void <init>(long) -> <init>
    boolean initPlayout(int,int) -> initPlayout
    boolean startPlayout() -> startPlayout
    boolean stopPlayout() -> stopPlayout
    int getStreamMaxVolume() -> getStreamMaxVolume
    boolean setStreamVolume(int) -> setStreamVolume
    boolean isVolumeFixed() -> isVolumeFixed
    int getStreamVolume() -> getStreamVolume
    void logMainParameters() -> logMainParameters
    android.media.AudioTrack createAudioTrackOnLollipopOrHigher(int,int,int) -> createAudioTrackOnLollipopOrHigher
    android.media.AudioTrack createAudioTrackOnLowerThanLollipop(int,int,int) -> createAudioTrackOnLowerThanLollipop
    void logBufferSizeInFrames() -> logBufferSizeInFrames
    void logBufferCapacityInFrames() -> logBufferCapacityInFrames
    void logMainParametersExtended() -> logMainParametersExtended
    void logUnderrunCount() -> logUnderrunCount
    void assertTrue(boolean) -> assertTrue
    int channelCountToConfiguration(int) -> channelCountToConfiguration
    void nativeCacheDirectBufferAddress(java.nio.ByteBuffer,long) -> nativeCacheDirectBufferAddress
    void nativeGetPlayoutData(int,long) -> nativeGetPlayoutData
    void setSpeakerMute(boolean) -> setSpeakerMute
    void releaseAudioResources() -> releaseAudioResources
    void reportWebRtcAudioTrackInitError(java.lang.String) -> reportWebRtcAudioTrackInitError
    void reportWebRtcAudioTrackStartError(org.webrtc.voiceengine.WebRtcAudioTrack$AudioTrackStartErrorCode,java.lang.String) -> reportWebRtcAudioTrackStartError
    void reportWebRtcAudioTrackError(java.lang.String) -> reportWebRtcAudioTrackError
    android.media.AudioTrack access$000(org.webrtc.voiceengine.WebRtcAudioTrack) -> access$000
    void access$100(boolean) -> access$100
    java.nio.ByteBuffer access$200(org.webrtc.voiceengine.WebRtcAudioTrack) -> access$200
    long access$300(org.webrtc.voiceengine.WebRtcAudioTrack) -> access$300
    void access$400(org.webrtc.voiceengine.WebRtcAudioTrack,int,long) -> access$400
    boolean access$500() -> access$500
    byte[] access$600(org.webrtc.voiceengine.WebRtcAudioTrack) -> access$600
    void access$700(org.webrtc.voiceengine.WebRtcAudioTrack,java.lang.String) -> access$700
    void <clinit>() -> <clinit>
org.webrtc.voiceengine.WebRtcAudioTrack$AudioTrackStartErrorCode -> org.webrtc.voiceengine.WebRtcAudioTrack$AudioTrackStartErrorCode:
    org.webrtc.voiceengine.WebRtcAudioTrack$AudioTrackStartErrorCode AUDIO_TRACK_START_EXCEPTION -> AUDIO_TRACK_START_EXCEPTION
    org.webrtc.voiceengine.WebRtcAudioTrack$AudioTrackStartErrorCode AUDIO_TRACK_START_STATE_MISMATCH -> AUDIO_TRACK_START_STATE_MISMATCH
    org.webrtc.voiceengine.WebRtcAudioTrack$AudioTrackStartErrorCode[] $VALUES -> $VALUES
    org.webrtc.voiceengine.WebRtcAudioTrack$AudioTrackStartErrorCode[] values() -> values
    org.webrtc.voiceengine.WebRtcAudioTrack$AudioTrackStartErrorCode valueOf(java.lang.String) -> valueOf
    void <init>(java.lang.String,int) -> <init>
    void <clinit>() -> <clinit>
org.webrtc.voiceengine.WebRtcAudioTrack$AudioTrackThread -> org.webrtc.voiceengine.WebRtcAudioTrack$AudioTrackThread:
    boolean keepAlive -> keepAlive
    org.webrtc.voiceengine.WebRtcAudioTrack this$0 -> this$0
    void <init>(org.webrtc.voiceengine.WebRtcAudioTrack,java.lang.String) -> <init>
    void run() -> run
    int writeBytes(android.media.AudioTrack,java.nio.ByteBuffer,int) -> writeBytes
    void stopThread() -> stopThread
org.webrtc.voiceengine.WebRtcAudioTrack$ErrorCallback -> org.webrtc.voiceengine.WebRtcAudioTrack$ErrorCallback:
    void onWebRtcAudioTrackInitError(java.lang.String) -> onWebRtcAudioTrackInitError
    void onWebRtcAudioTrackStartError(org.webrtc.voiceengine.WebRtcAudioTrack$AudioTrackStartErrorCode,java.lang.String) -> onWebRtcAudioTrackStartError
    void onWebRtcAudioTrackError(java.lang.String) -> onWebRtcAudioTrackError
org.webrtc.voiceengine.WebRtcAudioTrack$WebRtcAudioTrackErrorCallback -> org.webrtc.voiceengine.WebRtcAudioTrack$WebRtcAudioTrackErrorCallback:
    void onWebRtcAudioTrackInitError(java.lang.String) -> onWebRtcAudioTrackInitError
    void onWebRtcAudioTrackStartError(java.lang.String) -> onWebRtcAudioTrackStartError
    void onWebRtcAudioTrackError(java.lang.String) -> onWebRtcAudioTrackError
org.webrtc.voiceengine.WebRtcAudioUtils -> org.webrtc.voiceengine.WebRtcAudioUtils:
    java.lang.String TAG -> TAG
    java.lang.String[] BLACKLISTED_OPEN_SL_ES_MODELS -> BLACKLISTED_OPEN_SL_ES_MODELS
    java.lang.String[] BLACKLISTED_AEC_MODELS -> BLACKLISTED_AEC_MODELS
    java.lang.String[] BLACKLISTED_NS_MODELS -> BLACKLISTED_NS_MODELS
    int DEFAULT_SAMPLE_RATE_HZ -> DEFAULT_SAMPLE_RATE_HZ
    int defaultSampleRateHz -> defaultSampleRateHz
    boolean isDefaultSampleRateOverridden -> isDefaultSampleRateOverridden
    boolean useWebRtcBasedAcousticEchoCanceler -> useWebRtcBasedAcousticEchoCanceler
    boolean useWebRtcBasedNoiseSuppressor -> useWebRtcBasedNoiseSuppressor
    void <init>() -> <init>
    void setWebRtcBasedAcousticEchoCanceler(boolean) -> setWebRtcBasedAcousticEchoCanceler
    void setWebRtcBasedNoiseSuppressor(boolean) -> setWebRtcBasedNoiseSuppressor
    void setWebRtcBasedAutomaticGainControl(boolean) -> setWebRtcBasedAutomaticGainControl
    boolean useWebRtcBasedAcousticEchoCanceler() -> useWebRtcBasedAcousticEchoCanceler
    boolean useWebRtcBasedNoiseSuppressor() -> useWebRtcBasedNoiseSuppressor
    boolean useWebRtcBasedAutomaticGainControl() -> useWebRtcBasedAutomaticGainControl
    boolean isAcousticEchoCancelerSupported() -> isAcousticEchoCancelerSupported
    boolean isNoiseSuppressorSupported() -> isNoiseSuppressorSupported
    boolean isAutomaticGainControlSupported() -> isAutomaticGainControlSupported
    void setDefaultSampleRateHz(int) -> setDefaultSampleRateHz
    boolean isDefaultSampleRateOverridden() -> isDefaultSampleRateOverridden
    int getDefaultSampleRateHz() -> getDefaultSampleRateHz
    java.util.List getBlackListedModelsForAecUsage() -> getBlackListedModelsForAecUsage
    java.util.List getBlackListedModelsForNsUsage() -> getBlackListedModelsForNsUsage
    java.lang.String getThreadInfo() -> getThreadInfo
    boolean runningOnEmulator() -> runningOnEmulator
    boolean deviceIsBlacklistedForOpenSLESUsage() -> deviceIsBlacklistedForOpenSLESUsage
    void logDeviceInfo(java.lang.String) -> logDeviceInfo
    void logAudioState(java.lang.String) -> logAudioState
    void logAudioStateBasic(java.lang.String,android.media.AudioManager) -> logAudioStateBasic
    boolean isVolumeFixed(android.media.AudioManager) -> isVolumeFixed
    void logAudioStateVolume(java.lang.String,android.media.AudioManager) -> logAudioStateVolume
    void logIsStreamMute(java.lang.String,android.media.AudioManager,int,java.lang.StringBuilder) -> logIsStreamMute
    void logAudioDeviceInfo(java.lang.String,android.media.AudioManager) -> logAudioDeviceInfo
    java.lang.String modeToString(int) -> modeToString
    java.lang.String streamTypeToString(int) -> streamTypeToString
    java.lang.String deviceTypeToString(int) -> deviceTypeToString
    boolean hasMicrophone() -> hasMicrophone
    void <clinit>() -> <clinit>
